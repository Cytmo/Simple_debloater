{'getline_in_replace': None, 'addstr': ['  {\n', '    {\n', '      * (outset + (* j)) = c;\n', '      (* j)++;\n', '    }\n', '    return (int) result;\n', '  }\n'], 'esc': None, 'dodash': ['  int tmp___0;\n', '  {\n', '    {\n', '      while (1)\n', '      {\n', '        if (((int) (* (src + (* i)))) != ((int) delim))\n', '        {\n', '          if (! (((int) (* (src + (* i)))) != 0))\n', '          {\n', ' \n', '          }\n', '        }\n', '        else\n', '        {\n', '          goto while_break;\n', '        }\n', '        {\n', '          if (((int) (* (src + (* i)))) != 45)\n', '          {\n', '            {\n', '              tmp___0 = addstr(* (src + (* i)), dest, j, maxset);\n', '            }\n', '          }\n', '          else\n', '          {\n', '            {\n', '              {\n', '                {\n', '                  {\n', '                  }\n', '                }\n', '              }\n', '            }\n', '          }\n'], 'getccl': ['  int tmp;\n', '  int tmp___1;\n', '  {\n', '    (* i)++;\n', '    if (((int) (* (arg + (* i)))) == 94)\n', '    {\n', '      {\n', "        tmp = addstr((char) '!', pat, j, 100);\n", '      }\n', '    }\n', '    else\n', '    {\n', '      {\n', '      }\n', '    }\n', '    {\n', '      jstart = * j;\n', '      tmp___1 = addstr((char) 0, pat, j, 100);\n', "      dodash((char) ']', arg, i, pat, j, 100);\n", '      * (pat + jstart) = (char) (((* j) - jstart) - 1);\n', '    }\n', '    return (bool) (((int) (* (arg + (* i)))) == 93);\n', '  }\n', '}\n'], 'stclose': ['  int jp;\n', '  int tmp;\n', '  {\n', '    jp = (* j) - 1;\n', '    {\n', '      while (1)\n', '      {\n', '        if (! (jp >= lastj))\n', '        {\n', '          goto while_break;\n', '        }\n', '        {\n', '          jt = jp + 1;\n', '          tmp = addstr(* (pat + jp), pat, & jt, 100);\n', '          jp--;\n', '        }\n', '      }\n', '      while_break:\n', '      ;\n', '    }\n', '    (* j)++;\n', "    * (pat + lastj) = (char) '*';\n", '  }\n', '}\n'], 'in_set_2': ['  {\n', '    {\n', '      {\n', '        if (((int) c) == 42)\n', '        {\n', '        }\n', '      }\n', '    }\n', '    return (bool) tmp;\n'], 'in_pat_set': ['  {\n', '    if (((int) c) == 99)\n', '    {\n', '      if (((int) c) == 37)\n', '      {\n', '        {\n', '          if (((int) c) == 63)\n', '          {\n', '            if (((int) c) == 91)\n', '            {\n', '              if (((int) c) == 33)\n', '              {\n', '                if (((int) c) == 42)\n', '                {\n', '                  tmp = 1;\n', '                }\n', ' \n', ' \n', ' \n', ' \n', '              }\n', '            }\n', '          }\n', '        }\n', '      }\n'], 'makepat': ['  int i;\n', '  int j;\n', '  int lastj;\n', '  int lj;\n', '  bool done;\n', '  bool junk;\n', '  bool getres;\n', '  char escjunk;\n', '  int tmp;\n', '  int tmp___0;\n', '  bool tmp___2;\n', '  int tmp___3;\n', '  int tmp___4;\n', '  {\n', '    {\n', '      while (1)\n', '      {\n', '        if (! done)\n', '        {\n', '          if (((int) (* (arg + i))) != ((int) delim))\n', '          {\n', '            if (! (((int) (* (arg + i))) != 0))\n', '            {\n', ' \n', '            }\n', '          }\n', '          else\n', '          {\n', '            goto while_break;\n', '          }\n', '        }\n', '        else\n', '        {\n', '          goto while_break;\n', '        }\n', '        lj = j;\n', '        if (((int) (* (arg + i))) == 63)\n', '        {\n', '          {\n', "            tmp = addstr((char) '?', pat, & j, 100);\n", '          }\n', '        }\n', '        else\n', '        {\n', '          if (((int) (* (arg + i))) == 37)\n', '          {\n', '            if (i == start)\n', '            {\n', '              {\n', "                tmp___0 = addstr((char) '%', pat, & j, 100);\n", '              }\n', '            }\n', ' \n', ' \n', ' \n', ' \n', '          }\n', '          else\n', '          {\n', '            {\n', '              _L:\n', '              if (((int) (* (arg + i))) == 91)\n', '              {\n', '                {\n', '                  getres = getccl(arg, & i, pat, & j);\n', '                  done = (bool) (((int) getres) == 0);\n', '                }\n', '              }\n', '              else\n', '              {\n', '                if (((int) (* (arg + i))) == 42)\n', '                {\n', '                  if (i > start)\n', '                  {\n', '                    {\n', '                      lj = lastj;\n', '                      tmp___2 = in_set_2(* (pat + lj));\n', '                    }\n', '                    if (tmp___2)\n', '                    {\n', '                      done = (bool) 1;\n', '                    }\n', '                    else\n', '                    {\n', '                      {\n', '                        stclose(pat, & j, lastj);\n', '                      }\n', '                    }\n', '                  }\n', ' \n', ' \n', ' \n', ' \n', ' \n', ' \n', ' \n', ' \n', ' \n', ' \n', '                }\n', '                else\n', '                {\n', '                  {\n', "                    tmp___3 = addstr((char) 'c', pat, & j, 100);\n", '                    escjunk = esc(arg, & i);\n', '                    tmp___4 = addstr(escjunk, pat, & j, 100);\n', '                  }\n', '                }\n', '              }\n', '            }\n', '          }\n', '        }\n', '        {\n', '          i++;\n', '        }\n', '      }\n', '      while_break:\n', '      ;\n', '    }\n', '    {\n', '    }\n', '    if (done)\n', '    {\n', '      result = 0;\n'], 'getpat': None, 'makesub': ['  int i;\n', '  int j;\n', '  bool junk;\n', '  character escjunk;\n', '  int tmp;\n', '  int tmp___0;\n', '  int tmp___1;\n', '  {\n', '    j = 0;\n', '    i = from;\n', '    {\n', '      while (1)\n', '      {\n', '        if (((int) (* (arg + i))) != ((int) delim))\n', '        {\n', '          if (! (((int) (* (arg + i))) != 0))\n', '          {\n', ' \n', '          }\n', '        }\n', '        else\n', '        {\n', '          goto while_break;\n', '        }\n', '        if (((unsigned int) (* (arg + i))) == 38U)\n', '        {\n', '          {\n', '            tmp = addstr((char) (- 1), sub, & j, 100);\n', '          }\n', '        }\n', '        else\n', '        {\n', '          {\n', '            escjunk = esc(arg, & i);\n', '            tmp___0 = addstr(escjunk, sub, & j, 100);\n', '            junk = (bool) tmp___0;\n', '          }\n', '        }\n', '        i++;\n', '      }\n', '      while_break:\n', '      ;\n', '    }\n', '    {\n', '      {\n', "        tmp___1 = addstr((char) '\\000', sub, & j, 100);\n", '      }\n', '    }\n'], 'getsub': None, 'locate': ['  bool flag;\n', '  {\n', '    flag = (bool) 0;\n', '    i = offset + ((int) (* (pat + offset)));\n', '    {\n', '      while (1)\n', '      {\n', '        {\n', '          goto while_break;\n', '        }\n', '      }\n', '      while_break:\n', '      ;\n', '    }\n', '    return flag;\n', '  }\n', '}\n'], 'omatch': ['  bool result;\n', '  bool tmp___0;\n', '  bool tmp___1;\n', '  {\n', '    advance = (char) (- 1);\n', '    if (((int) (* (lin + (* i)))) == 0)\n', '    {\n', ' \n', '    }\n', '    else\n', '    {\n', '      {\n', '        tmp___1 = in_pat_set(* (pat + j));\n', '      }\n', '      if (tmp___1)\n', '      {\n', '        {\n', '          if (((int) (* (pat + j))) == 37)\n', '          {\n', '            goto case_37;\n', '          }\n', '          if (((int) (* (pat + j))) == 63)\n', '          {\n', '            goto case_63;\n', '          }\n', '          if (((int) (* (pat + j))) == 36)\n', '          {\n', ' \n', '          }\n', '          if (((int) (* (pat + j))) == 33)\n', '          {\n', '            goto case_33;\n', '          }\n', ' \n', '          case_99:\n', '          if (((int) (* (lin + (* i)))) == ((int) (* (pat + (j + 1)))))\n', '          {\n', '            advance = (char) 1;\n', '          }\n', '          goto switch_break;\n', '          case_37:\n', '          {\n', '            advance = (char) 0;\n', '          }\n', '          goto switch_break;\n', '          case_63:\n', '          case_33:\n', '          if (((int) (* (lin + (* i)))) != 10)\n', '          {\n', '            {\n', '              tmp___0 = locate(* (lin + (* i)), pat, j + 1);\n', '            }\n', '            if (! tmp___0)\n', '            {\n', '              advance = (char) 1;\n', '            }\n', '          }\n', '          {\n', ' \n', '          }\n', '          switch_break:\n', '          ;\n', '        }\n', '      }\n', ' \n', ' \n', ' \n', ' \n', ' \n', ' \n', ' \n', '    }\n', '    if (((int) advance) >= 0)\n', '    {\n'], 'patsize': ['  bool tmp;\n', '  {\n', '    {\n', '      tmp = in_pat_set(* (pat + n));\n', '    }\n', '    if (tmp)\n', '    {\n', '      {\n', '        if (((int) (* (pat + n))) == 63)\n', '        {\n', '          goto case_63;\n', '        }\n', '        if (((int) (* (pat + n))) == 36)\n', '        {\n', ' \n', '        }\n', '        if (((int) (* (pat + n))) == 37)\n', '        {\n', '          goto case_63;\n', '        }\n', '        if (((int) (* (pat + n))) == 33)\n', '        {\n', '          goto case_33;\n', '        }\n', '        if (((int) (* (pat + n))) == 42)\n', '        {\n', '          goto case_42;\n', '        }\n', ' \n', '        case_99:\n', '        size = 2;\n', '        goto switch_break;\n', '        case_63:\n', '        size = 1;\n', '        goto switch_break;\n', '        case_33:\n', '        size = ((int) (* (pat + (n + 1)))) + 2;\n', '        goto switch_break;\n', '        case_42:\n', '        size = 1;\n', '        {\n', ' \n', '        }\n', '        switch_break:\n', '        ;\n', '      }\n', '    }\n', ' \n', ' \n'], 'amatch': ['  int k;\n', '  bool result;\n', '  bool done;\n', '  int tmp;\n', '  int tmp___0;\n', '  int tmp___1;\n', '  {\n', '    done = (bool) 0;\n', '    {\n', '      while (1)\n', '      {\n', '        while_continue:\n', '        ;\n', '        if (! done)\n', '        {\n', '          if (! (((int) (* (pat + j))) != 0))\n', '          {\n', '            goto while_break;\n', '          }\n', '        }\n', '        else\n', '        {\n', '          goto while_break;\n', '        }\n', '        if (((int) (* (pat + j))) == 42)\n', '        {\n', '          {\n', '            tmp = patsize(pat, j);\n', '            j += tmp;\n', '            i = offset;\n', '          }\n', '          {\n', '            while (1)\n', '            {\n', '              while_continue___0:\n', '              ;\n', '              if (! done)\n', '              {\n', '                if (! (((int) (* (lin + i))) != 0))\n', '                {\n', ' \n', '                }\n', '              }\n', '              else\n', '              {\n', '                goto while_break___0;\n', '              }\n', '              {\n', '                result = omatch(lin, & i, pat, j);\n', '              }\n', '              if (! result)\n', '              {\n', '                done = (bool) 1;\n', '              }\n', '            }\n', '            while_break___0:\n', '            ;\n', '          }\n', '          done = (bool) 0;\n', '          {\n', '            while (1)\n', '            {\n', '              if (! done)\n', '              {\n', '                if (! (i >= offset))\n', '                {\n', '                  goto while_break___1;\n', '                }\n', '              }\n', '              else\n', '              {\n', '                goto while_break___1;\n', '              }\n', '              {\n', '                tmp___0 = patsize(pat, j);\n', '                k = amatch(lin, i, pat, j + tmp___0);\n', '              }\n', '              if (k >= 0)\n', '              {\n', '                done = (bool) 1;\n', '              }\n', '              else\n', '              {\n', '                i--;\n', '              }\n', '            }\n', '            while_break___1:\n', '            ;\n', '          }\n', '          offset = k;\n', '        }\n', '        else\n', '        {\n', '          {\n', '            result = omatch(lin, & offset, pat, j);\n', '          }\n', '          if (! result)\n', '          {\n', '            offset = - 1;\n', '            done = (bool) 1;\n', '          }\n', '          else\n', '          {\n', '            {\n', '              tmp___1 = patsize(pat, j);\n', '              j += tmp___1;\n', '            }\n', '          }\n', '        }\n', '      }\n', '      while_break:\n', '      ;\n', '    }\n', '    return offset;\n', '  }\n'], 'putsub': None, 'subline': None, 'change': None, 'main': None}[{'name': 'getline_in_replace', 'start_line': 58, 'end_line': 66, 'lines': ['{', '  char *result;', '  {', '    {', '      result = fgets((char *__restrict ) s, maxsize, (FILE *__restrict ) stdin);', '    }', '    return (bool) (((unsigned long) result) != ((unsigned long) ((char *) 0)));', '  }', '}']}, {'name': 'addstr', 'start_line': 69, 'end_line': 84, 'lines': ['{', '  bool result;', '  {', '    if ((* j) >= maxset)', '    {', ' ', '    }', '    else', '    {', '      * (outset + (* j)) = c;', '      (* j)++;', '      result = (bool) 1;', '    }', '', '    return (int) result;', '  }']}, {'name': 'esc', 'start_line': 88, 'end_line': 126, 'lines': ['{', '  char result;', '  {', '    if (((int) (* (s + (* i)))) != 64)', '    {', '      result = * (s + (* i));', '    }', '    else', '    {', '      if (((int) (* (s + ((* i) + 1)))) == 0)', '      {', ' ', '      }', '      else', '      {', '        (* i)++;', '        if (((int) (* (s + (* i)))) == 110)', '        {', '          result = (char) 10;', '        }', '        else', '        {', '          if (((int) (* (s + (* i)))) == 116)', '          {', '            result = (char) 9;', '          }', '          else', '          {', '            result = * (s + (* i));', '          }', '', '        }', '', '      }', '', '    }', '', '    return result;', '  }']}, {'name': 'dodash', 'start_line': 132, 'end_line': 254, 'lines': ['{', '  int k;', '  bool junk;', '  char escjunk;', '  int tmp;', '  int tmp___0;', '  int tmp___1;', '  int tmp___2;', '  int tmp___3;', '  int tmp___4;', '  int tmp___5;', '  {', '    {', '      while (1)', '      {', '        while_continue:', '        ;', '', '        if (((int) (* (src + (* i)))) != ((int) delim))', '        {', '          if (! (((int) (* (src + (* i)))) != 0))', '          {', ' ', '          }', '', '        }', '        else', '        {', '          goto while_break;', '        }', '', '        if (((int) (* (src + ((* i) - 1)))) == 64)', '        {', '          {', '            escjunk = esc(src, i);', '            tmp = addstr(escjunk, dest, j, maxset);', '            junk = (bool) tmp;', '          }', '        }', '        else', '        {', '          if (((int) (* (src + (* i)))) != 45)', '          {', '            {', '              tmp___0 = addstr(* (src + (* i)), dest, j, maxset);', '              junk = (bool) tmp___0;', '            }', '          }', '          else', '          {', '            if ((* j) <= 1)', '            {', '              {', ' ', ' ', '              }', '            }', '            else', '            {', '              if (((int) (* (src + ((* i) + 1)))) == 0)', '              {', '                {', ' ', ' ', '                }', '              }', '              else', '              {', '                {', '                  tmp___4 = isalnum((int) (* (src + ((* i) - 1))));', '                  tmp___5 = isalnum((int) (* (src + ((* i) + 1))));', '                }', '                if (tmp___4 & tmp___5)', '                {', '                  if (((int) (* (src + ((* i) - 1)))) <= ((int) (* (src + ((* i) + 1)))))', '                  {', '                    k = ((int) (* (src + ((* i) - 1)))) + 1;', '                    {', '                      while (1)', '                      {', '                        while_continue___0:', '                        ;', '', '                        if (! (k <= ((int) (* (src + ((* i) + 1))))))', '                        {', '                          goto while_break___0;', '                        }', '', '                        {', '                          tmp___2 = addstr((char) k, dest, j, maxset);', '                          junk = (bool) tmp___2;', '                          k++;', '                        }', '                      }', '', '                      while_break___0:', '                      ;', '', '                    }', '                    (* i)++;', '                  }', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '                }', '                else', '                {', '                  {', "                    tmp___3 = addstr((char) '-', dest, j, maxset);", '                    junk = (bool) tmp___3;', '                  }', '                }', '', '              }', '', '            }', '', '          }']}, {'name': 'getccl', 'start_line': 270, 'end_line': 303, 'lines': ['{', '  int jstart;', '  bool junk;', '  int tmp;', '  int tmp___0;', '  int tmp___1;', '  {', '    (* i)++;', '    if (((int) (* (arg + (* i)))) == 94)', '    {', '      {', "        tmp = addstr((char) '!', pat, j, 100);", '        junk = (bool) tmp;', '        (* i)++;', '      }', '    }', '    else', '    {', '      {', "        tmp___0 = addstr((char) '[', pat, j, 100);", '        junk = (bool) tmp___0;', '      }', '    }', '', '    {', '      jstart = * j;', '      tmp___1 = addstr((char) 0, pat, j, 100);', '      junk = (bool) tmp___1;', "      dodash((char) ']', arg, i, pat, j, 100);", '      * (pat + jstart) = (char) (((* j) - jstart) - 1);', '    }', '    return (bool) (((int) (* (arg + (* i)))) == 93);', '  }', '}']}, {'name': 'stclose', 'start_line': 306, 'end_line': 340, 'lines': ['{', '  int jt;', '  int jp;', '  bool junk;', '  int tmp;', '  {', '    jp = (* j) - 1;', '    {', '      while (1)', '      {', '        while_continue:', '        ;', '', '        if (! (jp >= lastj))', '        {', '          goto while_break;', '        }', '', '        {', '          jt = jp + 1;', '          tmp = addstr(* (pat + jp), pat, & jt, 100);', '          junk = (bool) tmp;', '          jp--;', '        }', '      }', '', '      while_break:', '      ;', '', '    }', '    (* j)++;', "    * (pat + lastj) = (char) '*';", '    return;', '  }', '}']}, {'name': 'in_set_2', 'start_line': 343, 'end_line': 371, 'lines': ['{', '  int tmp;', '  {', '    if (((int) c) == 37)', '    {', ' ', '    }', '    else', '    {', '      if (((int) c) == 36)', '      {', ' ', '      }', '      else', '      {', '        if (((int) c) == 42)', '        {', '          tmp = 1;', '        }', '        else', '        {', '          tmp = 0;', '        }', '', '      }', '', '    }', '', '    return (bool) tmp;']}, {'name': 'in_pat_set', 'start_line': 376, 'end_line': 432, 'lines': ['{', '  int tmp;', '  {', '    if (((int) c) == 99)', '    {', '      tmp = 1;', '    }', '    else', '    {', '      if (((int) c) == 37)', '      {', '        tmp = 1;', '      }', '      else', '      {', '        if (((int) c) == 36)', '        {', ' ', '        }', '        else', '        {', '          if (((int) c) == 63)', '          {', '            tmp = 1;', '          }', '          else', '          {', '            if (((int) c) == 91)', '            {', '              tmp = 1;', '            }', '            else', '            {', '              if (((int) c) == 33)', '              {', '                tmp = 1;', '              }', '              else', '              {', '                if (((int) c) == 42)', '                {', '                  tmp = 1;', '                }', ' ', ' ', ' ', ' ', '', '              }', '', '            }', '', '          }', '', '        }', '', '      }']}, {'name': 'makepat', 'start_line': 441, 'end_line': 616, 'lines': ['{', '  int result;', '  int i;', '  int j;', '  int lastj;', '  int lj;', '  bool done;', '  bool junk;', '  bool getres;', '  char escjunk;', '  int tmp;', '  int tmp___0;', '  int tmp___1;', '  bool tmp___2;', '  int tmp___3;', '  int tmp___4;', '  int tmp___5;', '  {', '    j = 0;', '    i = start;', '    lastj = 0;', '    done = (bool) 0;', '    {', '      while (1)', '      {', '        while_continue:', '        ;', '', '        if (! done)', '        {', '          if (((int) (* (arg + i))) != ((int) delim))', '          {', '            if (! (((int) (* (arg + i))) != 0))', '            {', ' ', '            }', '', '          }', '          else', '          {', '            goto while_break;', '          }', '', '        }', '        else', '        {', '          goto while_break;', '        }', '', '        lj = j;', '        if (((int) (* (arg + i))) == 63)', '        {', '          {', "            tmp = addstr((char) '?', pat, & j, 100);", '            junk = (bool) tmp;', '          }', '        }', '        else', '        {', '          if (((int) (* (arg + i))) == 37)', '          {', '            if (i == start)', '            {', '              {', "                tmp___0 = addstr((char) '%', pat, & j, 100);", '                junk = (bool) tmp___0;', '              }', '            }', ' ', ' ', ' ', ' ', '', '          }', '          else', '          {', '            _L___0:', '            if (((int) (* (arg + i))) == 36)', '            {', '              if (((int) (* (arg + (i + 1)))) == ((int) delim))', '              {', '                {', "                  tmp___1 = addstr((char) '$', pat, & j, 100);", '                  junk = (bool) tmp___1;', '                }', '              }', ' ', ' ', ' ', ' ', '', '            }', '            else', '            {', '              _L:', '              if (((int) (* (arg + i))) == 91)', '              {', '                {', '                  getres = getccl(arg, & i, pat, & j);', '                  done = (bool) (((int) getres) == 0);', '                }', '              }', '              else', '              {', '                if (((int) (* (arg + i))) == 42)', '                {', '                  if (i > start)', '                  {', '                    {', '                      lj = lastj;', '                      tmp___2 = in_set_2(* (pat + lj));', '                    }', '                    if (tmp___2)', '                    {', '                      done = (bool) 1;', '                    }', '                    else', '                    {', '                      {', '                        stclose(pat, & j, lastj);', '                      }', '                    }', '', '                  }', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '                }', '                else', '                {', '                  {', "                    tmp___3 = addstr((char) 'c', pat, & j, 100);", '                    junk = (bool) tmp___3;', '                    escjunk = esc(arg, & i);', '                    tmp___4 = addstr(escjunk, pat, & j, 100);', '                    junk = (bool) tmp___4;', '                  }', '                }', '', '              }', '', '', '            }', '', '', '          }', '', '        }', '', '        lastj = lj;', '        if (! done)', '        {', '          i++;', '        }', '', '      }', '', '      while_break:', '      ;', '', '    }', '    {', "      tmp___5 = addstr((char) '\\000', pat, & j, 100);", '      junk = (bool) tmp___5;', '    }', '    if (done)', '    {', '      result = 0;']}, {'name': 'getpat', 'start_line': 644, 'end_line': 652, 'lines': ['{', '  int makeres;', '  {', '    {', "      makeres = makepat(arg, 0, (char) '\\000', pat);", '    }', '    return makeres > 0;', '  }', '}']}, {'name': 'makesub', 'start_line': 655, 'end_line': 728, 'lines': ['{', '  int result;', '  int i;', '  int j;', '  bool junk;', '  character escjunk;', '  int tmp;', '  int tmp___0;', '  int tmp___1;', '  {', '    j = 0;', '    i = from;', '    {', '      while (1)', '      {', '        while_continue:', '        ;', '', '        if (((int) (* (arg + i))) != ((int) delim))', '        {', '          if (! (((int) (* (arg + i))) != 0))', '          {', ' ', '          }', '', '        }', '        else', '        {', '          goto while_break;', '        }', '', '        if (((unsigned int) (* (arg + i))) == 38U)', '        {', '          {', '            tmp = addstr((char) (- 1), sub, & j, 100);', '            junk = (bool) tmp;', '          }', '        }', '        else', '        {', '          {', '            escjunk = esc(arg, & i);', '            tmp___0 = addstr(escjunk, sub, & j, 100);', '            junk = (bool) tmp___0;', '          }', '        }', '', '        i++;', '      }', '', '      while_break:', '      ;', '', '    }', '    if (((int) (* (arg + i))) != ((int) delim))', '    {', ' ', '    }', '    else', '    {', '      {', "        tmp___1 = addstr((char) '\\000', sub, & j, 100);", '        junk = (bool) tmp___1;', '      }', '      if (! junk)', '      {', ' ', '      }', '      else', '      {', '        result = i;', '      }', '', '    }']}, {'name': 'getsub', 'start_line': 735, 'end_line': 743, 'lines': ['{', '  int makeres;', '  {', '    {', "      makeres = makesub(arg, 0, (character) '\\000', sub);", '    }', '    return (bool) (makeres > 0);', '  }', '}']}, {'name': 'locate', 'start_line': 747, 'end_line': 782, 'lines': ['{', '  int i;', '  bool flag;', '  {', '    flag = (bool) 0;', '    i = offset + ((int) (* (pat + offset)));', '    {', '      while (1)', '      {', '        while_continue:', '        ;', '', '        if (! (i > offset))', '        {', '          goto while_break;', '        }', '', '        if (((int) c) == ((int) (* (pat + i))))', '        {', '          flag = (bool) 1;', '          i = offset;', '        }', '        else', '        {', '          i--;', '        }', '', '      }', '', '      while_break:', '      ;', '', '    }', '    return flag;', '  }', '}']}, {'name': 'omatch', 'start_line': 786, 'end_line': 916, 'lines': ['{', '  char advance;', '  bool result;', '  bool tmp;', '  bool tmp___0;', '  bool tmp___1;', '  {', '    advance = (char) (- 1);', '    if (((int) (* (lin + (* i)))) == 0)', '    {', ' ', '    }', '    else', '    {', '      {', '        tmp___1 = in_pat_set(* (pat + j));', '      }', '      if (tmp___1)', '      {', '        {', '          if (((int) (* (pat + j))) == 99)', '          {', '            goto case_99;', '          }', '', '          if (((int) (* (pat + j))) == 37)', '          {', '            goto case_37;', '          }', '', '          if (((int) (* (pat + j))) == 63)', '          {', '            goto case_63;', '          }', '', '          if (((int) (* (pat + j))) == 36)', '          {', ' ', '          }', '', '          if (((int) (* (pat + j))) == 91)', '          {', '            goto case_91;', '          }', '', '          if (((int) (* (pat + j))) == 33)', '          {', '            goto case_33;', '          }', '', ' ', '          case_99:', '          if (((int) (* (lin + (* i)))) == ((int) (* (pat + (j + 1)))))', '          {', '            advance = (char) 1;', '          }', '', '', '          goto switch_break;', '          case_37:', '          if ((* i) == 0)', '          {', '            advance = (char) 0;', '          }', '', '', '          goto switch_break;', '          case_63:', '          if (((int) (* (lin + (* i)))) != 10)', '          {', '            advance = (char) 1;', '          }', '', '', '          goto switch_break;', '          case_36:;', '          if (((int) (* (lin + (* i)))) == 10)', '          {', ' ', '          }', '', '', ' ', '          case_91:', '          {', '            tmp = locate(* (lin + (* i)), pat, j + 1);', '          }', '', '          if (tmp)', '          {', '            advance = (char) 1;', '          }', '', '          goto switch_break;', '          case_33:', '          if (((int) (* (lin + (* i)))) != 10)', '          {', '            {', '              tmp___0 = locate(* (lin + (* i)), pat, j + 1);', '            }', '            if (! tmp___0)', '            {', '              advance = (char) 1;', '            }', '', '          }', '', '', '          goto switch_break;', '          switch_default:;', '          {', ' ', '          }', '', '          switch_break:', '          ;', '', '        }', '      }', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '', '    }', '', '    if (((int) advance) >= 0)', '    {']}, {'name': 'patsize', 'start_line': 930, 'end_line': 1009, 'lines': ['{', '  int size;', '  bool tmp;', '  {', '    {', '      tmp = in_pat_set(* (pat + n));', '    }', '    if (tmp)', '    {', '      {', '        if (((int) (* (pat + n))) == 99)', '        {', '          goto case_99;', '        }', '', '        if (((int) (* (pat + n))) == 63)', '        {', '          goto case_63;', '        }', '', '        if (((int) (* (pat + n))) == 36)', '        {', ' ', '        }', '', '        if (((int) (* (pat + n))) == 37)', '        {', '          goto case_63;', '        }', '', '        if (((int) (* (pat + n))) == 33)', '        {', '          goto case_33;', '        }', '', '        if (((int) (* (pat + n))) == 91)', '        {', '          goto case_33;', '        }', '', '        if (((int) (* (pat + n))) == 42)', '        {', '          goto case_42;', '        }', '', ' ', '        case_99:', '        size = 2;', '', '        goto switch_break;', '        case_63:', '        case_36:', '        case_37:', '        size = 1;', '', '', '', '        goto switch_break;', '        case_33:', '        case_91:', '        size = ((int) (* (pat + (n + 1)))) + 2;', '', '', '        goto switch_break;', '        case_42:', '        size = 1;', '', '        goto switch_break;', '        switch_default:;', '        {', ' ', '        }', '', '        switch_break:', '        ;', '', '      }', '    }', ' ', ' ']}, {'name': 'amatch', 'start_line': 1021, 'end_line': 1159, 'lines': ['{', '  int i;', '  int k;', '  bool result;', '  bool done;', '  int tmp;', '  int tmp___0;', '  int tmp___1;', '  {', '    done = (bool) 0;', '    {', '      while (1)', '      {', '        while_continue:', '        ;', '', '        if (! done)', '        {', '          if (! (((int) (* (pat + j))) != 0))', '          {', '            goto while_break;', '          }', '', '        }', '        else', '        {', '          goto while_break;', '        }', '', '        if (((int) (* (pat + j))) == 42)', '        {', '          {', '            tmp = patsize(pat, j);', '            j += tmp;', '            i = offset;', '          }', '          {', '            while (1)', '            {', '              while_continue___0:', '              ;', '', '              if (! done)', '              {', '                if (! (((int) (* (lin + i))) != 0))', '                {', ' ', '                }', '', '              }', '              else', '              {', '                goto while_break___0;', '              }', '', '              {', '                result = omatch(lin, & i, pat, j);', '              }', '              if (! result)', '              {', '                done = (bool) 1;', '              }', '', '            }', '', '            while_break___0:', '            ;', '', '          }', '          done = (bool) 0;', '          {', '            while (1)', '            {', '              while_continue___1:', '              ;', '', '              if (! done)', '              {', '                if (! (i >= offset))', '                {', '                  goto while_break___1;', '                }', '', '              }', '              else', '              {', '                goto while_break___1;', '              }', '', '              {', '                tmp___0 = patsize(pat, j);', '                k = amatch(lin, i, pat, j + tmp___0);', '              }', '              if (k >= 0)', '              {', '                done = (bool) 1;', '              }', '              else', '              {', '                i--;', '              }', '', '            }', '', '            while_break___1:', '            ;', '', '          }', '          offset = k;', '          done = (bool) 1;', '        }', '        else', '        {', '          {', '            result = omatch(lin, & offset, pat, j);', '          }', '          if (! result)', '          {', '            offset = - 1;', '            done = (bool) 1;', '          }', '          else', '          {', '            {', '              tmp___1 = patsize(pat, j);', '              j += tmp___1;', '            }', '          }', '', '        }', '', '      }', '', '      while_break:', '      ;', '', '    }', '    return offset;', '  }']}, {'name': 'putsub', 'start_line': 1163, 'end_line': 1220, 'lines': ['{', '  int i;', '  int j;', '  {', '    i = 0;', '    {', '      while (1)', '      {', '        while_continue:', '        ;', '', '        if (! (((int) (* (sub + i))) != 0))', '        {', '          goto while_break;', '        }', '', '        if (((int) (* (sub + i))) == (- 1))', '        {', '          j = s1;', '          {', '            while (1)', '            {', '              while_continue___0:', '              ;', '', '              if (! (j < s2))', '              {', '                goto while_break___0;', '              }', '', '              {', '                fputc((int) (* (lin + j)), stdout);', '                j++;', '              }', '            }', '', '            while_break___0:', '            ;', '', '          }', '        }', '        else', '        {', '          {', '            fputc((int) (* (sub + i)), stdout);', '          }', '        }', '', '        i++;', '      }', '', '      while_break:', '      ;', '', '    }', '    return;', '  }', '}']}, {'name': 'subline', 'start_line': 1223, 'end_line': 1287, 'lines': ['{', '  int i;', '  int lastm;', '  int m;', '  {', '    lastm = - 1;', '    i = 0;', '    {', '      while (1)', '      {', '        while_continue:', '        ;', '', '        if (! (((int) (* (lin + i))) != 0))', '        {', '          goto while_break;', '        }', '', '        {', '          m = amatch(lin, i, pat, 0);', '        }', '        if (m >= 0)', '        {', '          if (lastm != m)', '          {', '            {', '              putsub(lin, i, m, sub);', '              lastm = m;', '            }', '          }', '', '        }', '', '        if (m == (- 1))', '        {', '          {', '            fputc((int) (* (lin + i)), stdout);', '            i++;', '          }', '        }', '        else', '        {', '          if (m == i)', '          {', '            {', '              fputc((int) (* (lin + i)), stdout);', '              i++;', '            }', '          }', '          else', '          {', '            i = m;', '          }', '', '        }', '', '      }', '', '      while_break:', '      ;', '', '    }', '    return;', '  }', '}']}, {'name': 'change', 'start_line': 1290, 'end_line': 1320, 'lines': ['{', '  string line;', '  bool result;', '  {', '    {', '      result = getline_in_replace(line, 100);', '    }', '    {', '      while (1)', '      {', '        while_continue:', '        ;', '', '        if (! result)', '        {', '          goto while_break;', '        }', '', '        {', '          subline(line, pat, sub);', '          result = getline_in_replace(line, 100);', '        }', '      }', '', '      while_break:', '      ;', '', '    }', '    return;', '  }', '}']}, {'name': 'main', 'start_line': 1323, 'end_line': 1364, 'lines': ['{', '  string pat;', '  string sub;', '  bool result;', '  int tmp;', '  {', '    if (argc < 2)', '    {', '      {', ' ', ' ', '      }', '    }', '', '    {', '      tmp = getpat(* (argv + 1), pat);', '      result = (bool) tmp;', '    }', '    if (! result)', '    {', '      {', '        fprintf((FILE *__restrict ) stdout, (const char *__restrict ) "change: illegal \\"from\\" pattern\\n");', '        exit(2);', '      }', '    }', '', '    if (argc >= 3)', '    {', '      {', '        result = getsub(* (argv + 2), sub);', '      }', '      if (! result)', '      {', '        {', ' ', ' ', '        }', '      }', '', '    }', ' ', ' ']}]