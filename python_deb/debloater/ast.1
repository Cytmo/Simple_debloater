FileAST: 
  Typedef: voidp, [], ['typedef']
    PtrDecl: []
      TypeDecl: voidp, [], None
        IdentifierType: ['void']
  Typedef: uch, [], ['typedef']
    TypeDecl: uch, [], None
      IdentifierType: ['unsigned', 'char']
  Typedef: ush, [], ['typedef']
    TypeDecl: ush, [], None
      IdentifierType: ['unsigned', 'short']
  Typedef: ulg, [], ['typedef']
    TypeDecl: ulg, [], None
      IdentifierType: ['unsigned', 'long']
  Typedef: __off_t, [], ['typedef']
    TypeDecl: __off_t, [], None
      IdentifierType: ['long']
  Typedef: __off64_t, [], ['typedef']
    TypeDecl: __off64_t, [], None
      IdentifierType: ['long']
  Typedef: __ssize_t, [], ['typedef']
    TypeDecl: __ssize_t, [], None
      IdentifierType: ['long']
  Typedef: ssize_t, [], ['typedef']
    TypeDecl: ssize_t, [], None
      IdentifierType: ['__ssize_t']
  Typedef: size_t, [], ['typedef']
    TypeDecl: size_t, [], None
      IdentifierType: ['unsigned', 'long']
  Decl: None, [], [], [], []
    Struct: _IO_FILE
  Decl: None, [], [], [], []
    Struct: _IO_FILE
  Typedef: FILE, [], ['typedef']
    TypeDecl: FILE, [], None
      Struct: _IO_FILE
  Typedef: _IO_lock_t, [], ['typedef']
    TypeDecl: _IO_lock_t, [], None
      IdentifierType: ['void']
  Decl: None, [], [], [], []
    Struct: _IO_marker
      Decl: _next, [], [], [], []
        PtrDecl: []
          TypeDecl: _next, [], None
            Struct: _IO_marker
      Decl: _sbuf, [], [], [], []
        PtrDecl: []
          TypeDecl: _sbuf, [], None
            Struct: _IO_FILE
      Decl: _pos, [], [], [], []
        TypeDecl: _pos, [], None
          IdentifierType: ['int']
  Decl: None, [], [], [], []
    Struct: _IO_FILE
      Decl: _flags, [], [], [], []
        TypeDecl: _flags, [], None
          IdentifierType: ['int']
      Decl: _IO_read_ptr, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_read_ptr, [], None
            IdentifierType: ['char']
      Decl: _IO_read_end, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_read_end, [], None
            IdentifierType: ['char']
      Decl: _IO_read_base, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_read_base, [], None
            IdentifierType: ['char']
      Decl: _IO_write_base, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_write_base, [], None
            IdentifierType: ['char']
      Decl: _IO_write_ptr, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_write_ptr, [], None
            IdentifierType: ['char']
      Decl: _IO_write_end, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_write_end, [], None
            IdentifierType: ['char']
      Decl: _IO_buf_base, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_buf_base, [], None
            IdentifierType: ['char']
      Decl: _IO_buf_end, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_buf_end, [], None
            IdentifierType: ['char']
      Decl: _IO_save_base, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_save_base, [], None
            IdentifierType: ['char']
      Decl: _IO_backup_base, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_backup_base, [], None
            IdentifierType: ['char']
      Decl: _IO_save_end, [], [], [], []
        PtrDecl: []
          TypeDecl: _IO_save_end, [], None
            IdentifierType: ['char']
      Decl: _markers, [], [], [], []
        PtrDecl: []
          TypeDecl: _markers, [], None
            Struct: _IO_marker
      Decl: _chain, [], [], [], []
        PtrDecl: []
          TypeDecl: _chain, [], None
            Struct: _IO_FILE
      Decl: _fileno, [], [], [], []
        TypeDecl: _fileno, [], None
          IdentifierType: ['int']
      Decl: _flags2, [], [], [], []
        TypeDecl: _flags2, [], None
          IdentifierType: ['int']
      Decl: _old_offset, [], [], [], []
        TypeDecl: _old_offset, [], None
          IdentifierType: ['__off_t']
      Decl: _cur_column, [], [], [], []
        TypeDecl: _cur_column, [], None
          IdentifierType: ['unsigned', 'short']
      Decl: _vtable_offset, [], [], [], []
        TypeDecl: _vtable_offset, [], None
          IdentifierType: ['signed', 'char']
      Decl: _shortbuf, [], [], [], []
        ArrayDecl: []
          TypeDecl: _shortbuf, [], None
            IdentifierType: ['char']
          Constant: int, 1
      Decl: _lock, [], [], [], []
        PtrDecl: []
          TypeDecl: _lock, [], None
            IdentifierType: ['_IO_lock_t']
      Decl: _offset, [], [], [], []
        TypeDecl: _offset, [], None
          IdentifierType: ['__off64_t']
      Decl: __pad1, [], [], [], []
        PtrDecl: []
          TypeDecl: __pad1, [], None
            IdentifierType: ['void']
      Decl: __pad2, [], [], [], []
        PtrDecl: []
          TypeDecl: __pad2, [], None
            IdentifierType: ['void']
      Decl: __pad3, [], [], [], []
        PtrDecl: []
          TypeDecl: __pad3, [], None
            IdentifierType: ['void']
      Decl: __pad4, [], [], [], []
        PtrDecl: []
          TypeDecl: __pad4, [], None
            IdentifierType: ['void']
      Decl: __pad5, [], [], [], []
        TypeDecl: __pad5, [], None
          IdentifierType: ['size_t']
      Decl: _mode, [], [], [], []
        TypeDecl: _mode, [], None
          IdentifierType: ['int']
      Decl: _unused2, [], [], [], []
        ArrayDecl: []
          TypeDecl: _unused2, [], None
            IdentifierType: ['char']
          BinaryOp: -
            BinaryOp: -
              BinaryOp: *
                Constant: unsigned long int, 15UL
                UnaryOp: sizeof
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
              BinaryOp: *
                Constant: unsigned long int, 4UL
                UnaryOp: sizeof
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['void']
            UnaryOp: sizeof
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['size_t']
  Typedef: char_type, [], ['typedef']
    TypeDecl: char_type, [], None
      IdentifierType: ['unsigned', 'char']
  Typedef: code_int, [], ['typedef']
    TypeDecl: code_int, [], None
      IdentifierType: ['long']
  Typedef: cmp_code_int, [], ['typedef']
    TypeDecl: cmp_code_int, [], None
      IdentifierType: ['unsigned', 'long']
  Typedef: _IO_FILE, [], ['typedef']
    TypeDecl: _IO_FILE, [], None
      Struct: _IO_FILE
  Decl: None, [], [], [], []
    Struct: huft
  Decl: None, [], [], [], []
    Union: __anonunion_v_25
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['ush']
      Decl: t, [], [], [], []
        PtrDecl: []
          TypeDecl: t, [], None
            Struct: huft
  Decl: None, [], [], [], []
    Struct: huft
      Decl: e, [], [], [], []
        TypeDecl: e, [], None
          IdentifierType: ['uch']
      Decl: b, [], [], [], []
        TypeDecl: b, [], None
          IdentifierType: ['uch']
      Decl: v, [], [], [], []
        TypeDecl: v, [], None
          Union: __anonunion_v_25
  Typedef: file_t, [], ['typedef']
    TypeDecl: file_t, [], None
      IdentifierType: ['int']
  Decl: None, [], [], [], []
    Union: __anonunion_fc_7
      Decl: freq, [], [], [], []
        TypeDecl: freq, [], None
          IdentifierType: ['ush']
      Decl: code, [], [], [], []
        TypeDecl: code, [], None
          IdentifierType: ['ush']
  Decl: None, [], [], [], []
    Union: __anonunion_dl_8
      Decl: dad, [], [], [], []
        TypeDecl: dad, [], None
          IdentifierType: ['ush']
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['ush']
  Decl: None, [], [], [], []
    Struct: ct_data
      Decl: fc, [], [], [], []
        TypeDecl: fc, [], None
          Union: __anonunion_fc_7
      Decl: dl, [], [], [], []
        TypeDecl: dl, [], None
          Union: __anonunion_dl_8
  Typedef: ct_data, [], ['typedef']
    TypeDecl: ct_data, [], None
      Struct: ct_data
  Decl: None, [], [], [], []
    Struct: tree_desc
      Decl: dyn_tree, [], [], [], []
        PtrDecl: []
          TypeDecl: dyn_tree, [], None
            IdentifierType: ['ct_data']
      Decl: static_tree, [], [], [], []
        PtrDecl: []
          TypeDecl: static_tree, [], None
            IdentifierType: ['ct_data']
      Decl: extra_bits, [], [], [], []
        PtrDecl: []
          TypeDecl: extra_bits, [], None
            IdentifierType: ['int']
      Decl: extra_base, [], [], [], []
        TypeDecl: extra_base, [], None
          IdentifierType: ['int']
      Decl: elems, [], [], [], []
        TypeDecl: elems, [], None
          IdentifierType: ['int']
      Decl: max_length, [], [], [], []
        TypeDecl: max_length, [], None
          IdentifierType: ['int']
      Decl: max_code, [], [], [], []
        TypeDecl: max_code, [], None
          IdentifierType: ['int']
  Typedef: tree_desc, [], ['typedef']
    TypeDecl: tree_desc, [], None
      Struct: tree_desc
  Typedef: Pos, [], ['typedef']
    TypeDecl: Pos, [], None
      IdentifierType: ['ush']
  Typedef: IPos, [], ['typedef']
    TypeDecl: IPos, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: None, [], [], [], []
    Struct: config
      Decl: good_length, [], [], [], []
        TypeDecl: good_length, [], None
          IdentifierType: ['ush']
      Decl: max_lazy, [], [], [], []
        TypeDecl: max_lazy, [], None
          IdentifierType: ['ush']
      Decl: nice_length, [], [], [], []
        TypeDecl: nice_length, [], None
          IdentifierType: ['ush']
      Decl: max_chain, [], [], [], []
        TypeDecl: max_chain, [], None
          IdentifierType: ['ush']
  Typedef: config, [], ['typedef']
    TypeDecl: config, [], None
      Struct: config
  Typedef: __dev_t, [], ['typedef']
    TypeDecl: __dev_t, [], None
      IdentifierType: ['unsigned', 'long']
  Typedef: __uid_t, [], ['typedef']
    TypeDecl: __uid_t, [], None
      IdentifierType: ['unsigned', 'int']
  Typedef: __gid_t, [], ['typedef']
    TypeDecl: __gid_t, [], None
      IdentifierType: ['unsigned', 'int']
  Typedef: __ino_t, [], ['typedef']
    TypeDecl: __ino_t, [], None
      IdentifierType: ['unsigned', 'long']
  Typedef: __mode_t, [], ['typedef']
    TypeDecl: __mode_t, [], None
      IdentifierType: ['unsigned', 'int']
  Typedef: __nlink_t, [], ['typedef']
    TypeDecl: __nlink_t, [], None
      IdentifierType: ['unsigned', 'long']
  Typedef: __time_t, [], ['typedef']
    TypeDecl: __time_t, [], None
      IdentifierType: ['long']
  Typedef: __blksize_t, [], ['typedef']
    TypeDecl: __blksize_t, [], None
      IdentifierType: ['long']
  Typedef: __blkcnt_t, [], ['typedef']
    TypeDecl: __blkcnt_t, [], None
      IdentifierType: ['long']
  Typedef: __syscall_slong_t, [], ['typedef']
    TypeDecl: __syscall_slong_t, [], None
      IdentifierType: ['long']
  Typedef: off_t, [], ['typedef']
    TypeDecl: off_t, [], None
      IdentifierType: ['__off_t']
  Typedef: time_t, [], ['typedef']
    TypeDecl: time_t, [], None
      IdentifierType: ['__time_t']
  Decl: None, [], [], [], []
    Struct: timespec
      Decl: tv_sec, [], [], [], []
        TypeDecl: tv_sec, [], None
          IdentifierType: ['__time_t']
      Decl: tv_nsec, [], [], [], []
        TypeDecl: tv_nsec, [], None
          IdentifierType: ['__syscall_slong_t']
  Typedef: __sighandler_t, [], ['typedef']
    PtrDecl: []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['int']
        TypeDecl: __sighandler_t, [], None
          IdentifierType: ['void']
  Decl: None, [], [], [], []
    Struct: stat
      Decl: st_dev, [], [], [], []
        TypeDecl: st_dev, [], None
          IdentifierType: ['__dev_t']
      Decl: st_ino, [], [], [], []
        TypeDecl: st_ino, [], None
          IdentifierType: ['__ino_t']
      Decl: st_nlink, [], [], [], []
        TypeDecl: st_nlink, [], None
          IdentifierType: ['__nlink_t']
      Decl: st_mode, [], [], [], []
        TypeDecl: st_mode, [], None
          IdentifierType: ['__mode_t']
      Decl: st_uid, [], [], [], []
        TypeDecl: st_uid, [], None
          IdentifierType: ['__uid_t']
      Decl: st_gid, [], [], [], []
        TypeDecl: st_gid, [], None
          IdentifierType: ['__gid_t']
      Decl: __pad0, [], [], [], []
        TypeDecl: __pad0, [], None
          IdentifierType: ['int']
      Decl: st_rdev, [], [], [], []
        TypeDecl: st_rdev, [], None
          IdentifierType: ['__dev_t']
      Decl: st_size, [], [], [], []
        TypeDecl: st_size, [], None
          IdentifierType: ['__off_t']
      Decl: st_blksize, [], [], [], []
        TypeDecl: st_blksize, [], None
          IdentifierType: ['__blksize_t']
      Decl: st_blocks, [], [], [], []
        TypeDecl: st_blocks, [], None
          IdentifierType: ['__blkcnt_t']
      Decl: st_atim, [], [], [], []
        TypeDecl: st_atim, [], None
          Struct: timespec
      Decl: st_mtim, [], [], [], []
        TypeDecl: st_mtim, [], None
          Struct: timespec
      Decl: st_ctim, [], [], [], []
        TypeDecl: st_ctim, [], None
          Struct: timespec
      Decl: __glibc_reserved, [], [], [], []
        ArrayDecl: []
          TypeDecl: __glibc_reserved, [], None
            IdentifierType: ['__syscall_slong_t']
          Constant: int, 3
  Decl: None, [], [], [], []
    Struct: option
      Decl: name, ['const'], [], [], []
        PtrDecl: []
          TypeDecl: name, ['const'], None
            IdentifierType: ['char']
      Decl: has_arg, [], [], [], []
        TypeDecl: has_arg, [], None
          IdentifierType: ['int']
      Decl: flag, [], [], [], []
        PtrDecl: []
          TypeDecl: flag, [], None
            IdentifierType: ['int']
      Decl: val, [], [], [], []
        TypeDecl: val, [], None
          IdentifierType: ['int']
  Decl: None, [], [], [], []
    Struct: dirent
      Decl: d_ino, [], [], [], []
        TypeDecl: d_ino, [], None
          IdentifierType: ['__ino_t']
      Decl: d_off, [], [], [], []
        TypeDecl: d_off, [], None
          IdentifierType: ['__off_t']
      Decl: d_reclen, [], [], [], []
        TypeDecl: d_reclen, [], None
          IdentifierType: ['unsigned', 'short']
      Decl: d_type, [], [], [], []
        TypeDecl: d_type, [], None
          IdentifierType: ['unsigned', 'char']
      Decl: d_name, [], [], [], []
        ArrayDecl: []
          TypeDecl: d_name, [], None
            IdentifierType: ['char']
          Constant: int, 256
  Decl: None, [], [], [], []
    Struct: __dirstream
  Decl: None, [], [], [], []
    Struct: __dirstream
  Typedef: DIR, [], ['typedef']
    TypeDecl: DIR, [], None
      Struct: __dirstream
  Typedef: dir_type, [], ['typedef']
    TypeDecl: dir_type, [], None
      Struct: dirent
  Decl: None, [], [], [], []
    Struct: utimbuf
      Decl: actime, [], [], [], []
        TypeDecl: actime, [], None
          IdentifierType: ['__time_t']
      Decl: modtime, [], [], [], []
        TypeDecl: modtime, [], None
          IdentifierType: ['__time_t']
  Decl: inbuf, [], [], [], []
    ArrayDecl: []
      TypeDecl: inbuf, [], None
        IdentifierType: ['uch']
      Constant: int, 32832
  Decl: outbuf, [], [], [], []
    ArrayDecl: []
      TypeDecl: outbuf, [], None
        IdentifierType: ['uch']
      Constant: int, 18432
  Decl: d_buf, [], [], [], []
    ArrayDecl: []
      TypeDecl: d_buf, [], None
        IdentifierType: ['ush']
      Constant: int, 32768
  Decl: window, [], [], [], []
    ArrayDecl: []
      TypeDecl: window, [], None
        IdentifierType: ['uch']
      Constant: long int, 65536L
  Decl: prev, [], [], [], []
    ArrayDecl: []
      TypeDecl: prev, [], None
        IdentifierType: ['ush']
      BinaryOp: <<
        Constant: long int, 1L
        Constant: int, 16
  Decl: insize, [], [], [], []
    TypeDecl: insize, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: inptr, [], [], [], []
    TypeDecl: inptr, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: ifd, [], [], [], []
    TypeDecl: ifd, [], None
      IdentifierType: ['int']
  Decl: ofd, [], [], [], []
    TypeDecl: ofd, [], None
      IdentifierType: ['int']
  Decl: test, [], [], [], []
    TypeDecl: test, [], None
      IdentifierType: ['int']
  Decl: unlzh, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: in, [], [], [], []
          TypeDecl: in, [], None
            IdentifierType: ['int']
        Decl: out, [], [], [], []
          TypeDecl: out, [], None
            IdentifierType: ['int']
      TypeDecl: unlzh, [], None
        IdentifierType: ['int']
  Decl: fill_inbuf, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: eof_ok, [], [], [], []
          TypeDecl: eof_ok, [], None
            IdentifierType: ['int']
      TypeDecl: fill_inbuf, [], None
        IdentifierType: ['int']
  Decl: write_buf, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: fd, [], [], [], []
          TypeDecl: fd, [], None
            IdentifierType: ['int']
        Decl: buf, [], [], [], []
          TypeDecl: buf, [], None
            IdentifierType: ['voidp']
        Decl: cnt, [], [], [], []
          TypeDecl: cnt, [], None
            IdentifierType: ['unsigned', 'int']
      TypeDecl: write_buf, [], None
        IdentifierType: ['void']
  Decl: error, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: m, [], [], [], []
          PtrDecl: []
            TypeDecl: m, [], None
              IdentifierType: ['char']
      TypeDecl: error, [], None
        IdentifierType: ['void']
  Decl: decode, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: count, [], [], [], []
          TypeDecl: count, [], None
            IdentifierType: ['unsigned', 'int']
        Decl: buffer, [], [], [], []
          PtrDecl: []
            TypeDecl: buffer, [], None
              IdentifierType: ['uch']
      TypeDecl: decode, [], None
        IdentifierType: ['unsigned', 'int']
  Decl: decode_start, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: decode_start, [], None
        IdentifierType: ['void']
  Decl: huf_decode_start, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: huf_decode_start, [], None
        IdentifierType: ['void']
  Decl: decode_c, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: decode_c, [], None
        IdentifierType: ['unsigned', 'int']
  Decl: decode_p, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: decode_p, [], None
        IdentifierType: ['unsigned', 'int']
  Decl: read_pt_len, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: nn, [], [], [], []
          TypeDecl: nn, [], None
            IdentifierType: ['int']
        Decl: nbit, [], [], [], []
          TypeDecl: nbit, [], None
            IdentifierType: ['int']
        Decl: i_special, [], [], [], []
          TypeDecl: i_special, [], None
            IdentifierType: ['int']
      TypeDecl: read_pt_len, [], None
        IdentifierType: ['void']
  Decl: read_c_len, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: read_c_len, [], None
        IdentifierType: ['void']
  Decl: fillbuf, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: n, [], [], [], []
          TypeDecl: n, [], None
            IdentifierType: ['int']
      TypeDecl: fillbuf, [], None
        IdentifierType: ['void']
  Decl: getbits, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: n, [], [], [], []
          TypeDecl: n, [], None
            IdentifierType: ['int']
      TypeDecl: getbits, [], None
        IdentifierType: ['unsigned', 'int']
  Decl: init_getbits, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: init_getbits, [], None
        IdentifierType: ['void']
  Decl: make_table, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: nchar, [], [], [], []
          TypeDecl: nchar, [], None
            IdentifierType: ['int']
        Decl: bitlen, [], [], [], []
          PtrDecl: []
            TypeDecl: bitlen, [], None
              IdentifierType: ['uch']
        Decl: tablebits, [], [], [], []
          TypeDecl: tablebits, [], None
            IdentifierType: ['int']
        Decl: table, [], [], [], []
          PtrDecl: []
            TypeDecl: table, [], None
              IdentifierType: ['ush']
      TypeDecl: make_table, [], None
        IdentifierType: ['void']
  Decl: pt_len, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: pt_len, [], None
        IdentifierType: ['uch']
      Constant: int, 19
  Decl: blocksize, [], [], ['static'], []
    TypeDecl: blocksize, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: pt_table, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: pt_table, [], None
        IdentifierType: ['ush']
      Constant: int, 256
  Decl: bitbuf, [], [], ['static'], []
    TypeDecl: bitbuf, [], None
      IdentifierType: ['ush']
  Decl: subbitbuf, [], [], ['static'], []
    TypeDecl: subbitbuf, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: bitcount, [], [], ['static'], []
    TypeDecl: bitcount, [], None
      IdentifierType: ['int']
  FuncDef: 
    Decl: fillbuf, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: n, [], [], [], []
            TypeDecl: n, [], None
              IdentifierType: ['int']
        TypeDecl: fillbuf, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: bitbuf
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ush']
            BinaryOp: <<
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ID: bitbuf
              ID: n
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: >
                    ID: n
                    ID: bitcount
                Compound: 
                  Goto: while_break
              Assignment: -=
                ID: n
                ID: bitcount
              Assignment: =
                ID: bitbuf
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: |
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: bitbuf
                    BinaryOp: <<
                      ID: subbitbuf
                      ID: n
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___1
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___0
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 1
                    Assignment: =
                      ID: tmp___1
                      ID: tmp___0
              Assignment: =
                ID: subbitbuf
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  ID: tmp___1
              If: 
                BinaryOp: ==
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ID: subbitbuf
                  UnaryOp: -
                    Constant: int, 1
                Compound: 
                  Assignment: =
                    ID: subbitbuf
                    Constant: unsigned int, 0U
              Assignment: =
                ID: bitcount
                Constant: int, 8
          Label: while_break
            EmptyStatement: 
        Assignment: -=
          ID: bitcount
          ID: n
        Assignment: =
          ID: bitbuf
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ush']
            BinaryOp: |
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'int']
                ID: bitbuf
              BinaryOp: >>
                ID: subbitbuf
                ID: bitcount
        Return: 
  FuncDef: 
    Decl: getbits, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: n, [], [], [], []
            TypeDecl: n, [], None
              IdentifierType: ['int']
        TypeDecl: getbits, [], None
          IdentifierType: ['unsigned', 'int']
    Compound: 
      Decl: x, [], [], [], []
        TypeDecl: x, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Compound: 
          Assignment: =
            ID: x
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              BinaryOp: >>
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  ID: bitbuf
                BinaryOp: -
                  BinaryOp: *
                    Constant: unsigned long int, 16UL
                    UnaryOp: sizeof
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'long']
                    ID: n
          FuncCall: 
            ID: fillbuf
            ExprList: 
              ID: n
        Return: 
          ID: x
  FuncDef: 
    Decl: init_getbits, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: init_getbits, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        Compound: 
          Assignment: =
            ID: bitbuf
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['ush']
              Constant: int, 0
          Assignment: =
            ID: subbitbuf
            Constant: unsigned int, 0U
          Assignment: =
            ID: bitcount
            Constant: int, 0
          FuncCall: 
            ID: fillbuf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                BinaryOp: *
                  Constant: unsigned long int, 16UL
                  UnaryOp: sizeof
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
        Return: 
  FuncDef: 
    Decl: make_table, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: nchar, [], [], [], []
            TypeDecl: nchar, [], None
              IdentifierType: ['int']
          Decl: bitlen, [], [], [], []
            PtrDecl: []
              TypeDecl: bitlen, [], None
                IdentifierType: ['uch']
          Decl: tablebits, [], [], [], []
            TypeDecl: tablebits, [], None
              IdentifierType: ['int']
          Decl: table, [], [], [], []
            PtrDecl: []
              TypeDecl: table, [], None
                IdentifierType: ['ush']
        TypeDecl: make_table, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: count, [], [], [], []
        ArrayDecl: []
          TypeDecl: count, [], None
            IdentifierType: ['ush']
          Constant: int, 17
      Decl: weight, [], [], [], []
        ArrayDecl: []
          TypeDecl: weight, [], None
            IdentifierType: ['ush']
          Constant: int, 17
      Decl: start, [], [], [], []
        ArrayDecl: []
          TypeDecl: start, [], None
            IdentifierType: ['ush']
          Constant: int, 18
      Decl: p, [], [], [], []
        PtrDecl: []
          TypeDecl: p, [], None
            IdentifierType: ['ush']
      Decl: i___0, [], [], [], []
        TypeDecl: i___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: k, [], [], [], []
        TypeDecl: k, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: ch, [], [], [], []
        TypeDecl: ch, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: jutbits, [], [], [], []
        TypeDecl: jutbits, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: avail, [], [], [], []
        TypeDecl: avail, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: nextcode, [], [], [], []
        TypeDecl: nextcode, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: mask, [], [], [], []
        TypeDecl: mask, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['ush']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: __cil_tmp20, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp20, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp21, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp21, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp22, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp22, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp23, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp23, [], None
            IdentifierType: ['char']
      Compound: 
        Assignment: =
          ID: i___0
          Constant: unsigned int, 1U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: i___0
                    Constant: unsigned int, 16U
                Compound: 
                  Goto: while_break
              Assignment: =
                ArrayRef: 
                  ID: count
                  ID: i___0
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 0
              UnaryOp: p++
                ID: i___0
          Label: while_break
            EmptyStatement: 
        Assignment: =
          ID: i___0
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: i___0
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: nchar
                Compound: 
                  Goto: while_break___0
              Assignment: =
                ArrayRef: 
                  ID: count
                  UnaryOp: *
                    BinaryOp: +
                      ID: bitlen
                      ID: i___0
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: count
                        UnaryOp: *
                          BinaryOp: +
                            ID: bitlen
                            ID: i___0
                    Constant: int, 1
              UnaryOp: p++
                ID: i___0
          Label: while_break___0
            EmptyStatement: 
        Assignment: =
          ArrayRef: 
            ID: start
            Constant: int, 1
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ush']
            Constant: int, 0
        Assignment: =
          ID: i___0
          Constant: unsigned int, 1U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: i___0
                    Constant: unsigned int, 16U
                Compound: 
                  Goto: while_break___1
              Assignment: =
                ArrayRef: 
                  ID: start
                  BinaryOp: +
                    ID: i___0
                    Constant: unsigned int, 1U
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: start
                        ID: i___0
                    BinaryOp: <<
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: count
                          ID: i___0
                      BinaryOp: -
                        Constant: unsigned int, 16U
                        ID: i___0
              UnaryOp: p++
                ID: i___0
          Label: while_break___1
            EmptyStatement: 
        If: 
          BinaryOp: !=
            BinaryOp: &
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ArrayRef: 
                  ID: start
                  Constant: int, 17
              Constant: int, 65535
            Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "Bad table\n"
        Assignment: =
          ID: jutbits
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            BinaryOp: -
              Constant: int, 16
              ID: tablebits
        Assignment: =
          ID: i___0
          Constant: unsigned int, 1U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___2
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: i___0
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: tablebits
                Compound: 
                  Goto: while_break___2
              Assignment: =
                ArrayRef: 
                  ID: start
                  ID: i___0
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: >>
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: start
                        ID: i___0
                    ID: jutbits
              Assignment: =
                ArrayRef: 
                  ID: weight
                  ID: i___0
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: <<
                    Constant: unsigned int, 1U
                    BinaryOp: -
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        ID: tablebits
                      ID: i___0
              UnaryOp: p++
                ID: i___0
          Label: while_break___2
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___3
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: i___0
                    Constant: unsigned int, 16U
                Compound: 
                  Goto: while_break___3
              Assignment: =
                ArrayRef: 
                  ID: weight
                  ID: i___0
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: <<
                    Constant: unsigned int, 1U
                    BinaryOp: -
                      Constant: unsigned int, 16U
                      ID: i___0
              UnaryOp: p++
                ID: i___0
          Label: while_break___3
            EmptyStatement: 
        Assignment: =
          ID: i___0
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            BinaryOp: >>
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ArrayRef: 
                  ID: start
                  BinaryOp: +
                    ID: tablebits
                    Constant: int, 1
              ID: jutbits
        If: 
          BinaryOp: !=
            ID: i___0
            Constant: unsigned int, 0U
          Compound: 
            Assignment: =
              ID: k
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'int']
                BinaryOp: <<
                  Constant: int, 1
                  ID: tablebits
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___4
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: !=
                        ID: i___0
                        ID: k
                    Compound: 
                      Goto: while_break___4
                  Assignment: =
                    ID: tmp
                    ID: i___0
                  UnaryOp: p++
                    ID: i___0
                  Assignment: =
                    UnaryOp: *
                      BinaryOp: +
                        ID: table
                        ID: tmp
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      Constant: int, 0
              Label: while_break___4
                EmptyStatement: 
        Assignment: =
          ID: avail
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            ID: nchar
        Assignment: =
          ID: mask
          BinaryOp: <<
            Constant: unsigned int, 1U
            BinaryOp: -
              Constant: int, 15
              ID: tablebits
        Assignment: =
          ID: ch
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___5
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: ch
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: nchar
                Compound: 
                  Goto: while_break___5
              Assignment: =
                ID: len
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  UnaryOp: *
                    BinaryOp: +
                      ID: bitlen
                      ID: ch
              If: 
                BinaryOp: ==
                  ID: len
                  Constant: unsigned int, 0U
                Compound: 
                  Goto: __Cont
              Assignment: =
                ID: nextcode
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: start
                        ID: len
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: weight
                        ID: len
              If: 
                BinaryOp: <=
                  ID: len
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'int']
                    ID: tablebits
                Compound: 
                  Assignment: =
                    ID: i___0
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ArrayRef: 
                        ID: start
                        ID: len
                  Compound: 
                    While: 
                      Constant: int, 1
                      Compound: 
                        Label: while_continue___6
                          EmptyStatement: 
                        If: 
                          UnaryOp: !
                            BinaryOp: <
                              ID: i___0
                              ID: nextcode
                          Compound: 
                            Goto: while_break___6
                        Assignment: =
                          UnaryOp: *
                            BinaryOp: +
                              ID: table
                              ID: i___0
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            ID: ch
                        UnaryOp: p++
                          ID: i___0
                    Label: while_break___6
                      EmptyStatement: 
                Compound: 
                  Assignment: =
                    ID: k
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ArrayRef: 
                        ID: start
                        ID: len
                  Assignment: =
                    ID: p
                    BinaryOp: +
                      ID: table
                      BinaryOp: >>
                        ID: k
                        ID: jutbits
                  Assignment: =
                    ID: i___0
                    BinaryOp: -
                      ID: len
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        ID: tablebits
                  Compound: 
                    While: 
                      Constant: int, 1
                      Compound: 
                        Label: while_continue___7
                          EmptyStatement: 
                        If: 
                          UnaryOp: !
                            BinaryOp: !=
                              ID: i___0
                              Constant: unsigned int, 0U
                          Compound: 
                            Goto: while_break___7
                        If: 
                          BinaryOp: ==
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              UnaryOp: *
                                ID: p
                            Constant: int, 0
                          Compound: 
                            Assignment: =
                              ID: tmp___0
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                Constant: int, 0
                            Assignment: =
                              ArrayRef: 
                                ID: prev
                                ID: avail
                              ID: tmp___0
                            Assignment: =
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: prev
                                    Constant: int, 32768
                                  ID: avail
                              ID: tmp___0
                            Assignment: =
                              ID: tmp___1
                              ID: avail
                            UnaryOp: p++
                              ID: avail
                            Assignment: =
                              UnaryOp: *
                                ID: p
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                ID: tmp___1
                        If: 
                          BinaryOp: &
                            ID: k
                            ID: mask
                          Compound: 
                            Assignment: =
                              ID: p
                              BinaryOp: +
                                BinaryOp: +
                                  ID: prev
                                  Constant: int, 32768
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  UnaryOp: *
                                    ID: p
                          Compound: 
                            Assignment: =
                              ID: p
                              UnaryOp: &
                                ArrayRef: 
                                  ID: prev
                                  UnaryOp: *
                                    ID: p
                        Assignment: <<=
                          ID: k
                          Constant: int, 1
                        UnaryOp: p--
                          ID: i___0
                    Label: while_break___7
                      EmptyStatement: 
                  Assignment: =
                    UnaryOp: *
                      ID: p
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      ID: ch
              Assignment: =
                ArrayRef: 
                  ID: start
                  ID: len
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  ID: nextcode
              Label: __Cont
                UnaryOp: p++
                  ID: ch
          Label: while_break___5
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: read_pt_len, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: nn, [], [], [], []
            TypeDecl: nn, [], None
              IdentifierType: ['int']
          Decl: nbit, [], [], [], []
            TypeDecl: nbit, [], None
              IdentifierType: ['int']
          Decl: i_special, [], [], [], []
            TypeDecl: i_special, [], None
              IdentifierType: ['int']
        TypeDecl: read_pt_len, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: i___0, [], [], [], []
        TypeDecl: i___0, [], None
          IdentifierType: ['int']
      Decl: c, [], [], [], []
        TypeDecl: c, [], None
          IdentifierType: ['int']
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: mask, [], [], [], []
        TypeDecl: mask, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Compound: 
        Compound: 
          Assignment: =
            ID: n
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              FuncCall: 
                ID: getbits
                ExprList: 
                  ID: nbit
        If: 
          BinaryOp: ==
            ID: n
            Constant: int, 0
          Compound: 
            Compound: 
              Assignment: =
                ID: c
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  FuncCall: 
                    ID: getbits
                    ExprList: 
                      ID: nbit
              Assignment: =
                ID: i___0
                Constant: int, 0
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: i___0
                        ID: nn
                    Compound: 
                      Goto: while_break
                  Assignment: =
                    ArrayRef: 
                      ID: pt_len
                      ID: i___0
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      Constant: int, 0
                  UnaryOp: p++
                    ID: i___0
              Label: while_break
                EmptyStatement: 
            Assignment: =
              ID: i___0
              Constant: int, 0
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___0
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: i___0
                        Constant: int, 256
                    Compound: 
                      Goto: while_break___0
                  Assignment: =
                    ArrayRef: 
                      ID: pt_table
                      ID: i___0
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      ID: c
                  UnaryOp: p++
                    ID: i___0
              Label: while_break___0
                EmptyStatement: 
          Compound: 
            Assignment: =
              ID: i___0
              Constant: int, 0
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___1
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: i___0
                        ID: n
                    Compound: 
                      Goto: while_break___1
                  Assignment: =
                    ID: c
                    BinaryOp: >>
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: bitbuf
                      BinaryOp: -
                        BinaryOp: *
                          Constant: unsigned long int, 16UL
                          UnaryOp: sizeof
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                        Constant: unsigned long int, 3UL
                  If: 
                    BinaryOp: ==
                      ID: c
                      Constant: int, 7
                    Compound: 
                      Assignment: =
                        ID: mask
                        BinaryOp: <<
                          Constant: unsigned int, 1U
                          BinaryOp: -
                            BinaryOp: -
                              BinaryOp: *
                                Constant: unsigned long int, 16UL
                                UnaryOp: sizeof
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['char']
                              Constant: unsigned long int, 1UL
                            Constant: unsigned long int, 3UL
                      Compound: 
                        While: 
                          Constant: int, 1
                          Compound: 
                            Label: while_continue___2
                              EmptyStatement: 
                            If: 
                              UnaryOp: !
                                BinaryOp: &
                                  ID: mask
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['unsigned', 'int']
                                    ID: bitbuf
                              Compound: 
                                Goto: while_break___2
                            Assignment: >>=
                              ID: mask
                              Constant: int, 1
                            UnaryOp: p++
                              ID: c
                        Label: while_break___2
                          EmptyStatement: 
                  If: 
                    BinaryOp: <
                      ID: c
                      Constant: int, 7
                    Compound: 
                      Assignment: =
                        ID: tmp
                        Constant: int, 3
                    Compound: 
                      Assignment: =
                        ID: tmp
                        BinaryOp: -
                          ID: c
                          Constant: int, 3
                  Compound: 
                    FuncCall: 
                      ID: fillbuf
                      ExprList: 
                        ID: tmp
                    Assignment: =
                      ID: tmp___0
                      ID: i___0
                    UnaryOp: p++
                      ID: i___0
                    Assignment: =
                      ArrayRef: 
                        ID: pt_len
                        ID: tmp___0
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['uch']
                        ID: c
                  If: 
                    BinaryOp: ==
                      ID: i___0
                      ID: i_special
                    Compound: 
                      Compound: 
                        Assignment: =
                          ID: c
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            FuncCall: 
                              ID: getbits
                              ExprList: 
                                Constant: int, 2
                      Compound: 
                        While: 
                          Constant: int, 1
                          Compound: 
                            Label: while_continue___3
                              EmptyStatement: 
                            UnaryOp: p--
                              ID: c
                            If: 
                              UnaryOp: !
                                BinaryOp: >=
                                  ID: c
                                  Constant: int, 0
                              Compound: 
                                Goto: while_break___3
                            Assignment: =
                              ID: tmp___1
                              ID: i___0
                            UnaryOp: p++
                              ID: i___0
                            Assignment: =
                              ArrayRef: 
                                ID: pt_len
                                ID: tmp___1
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['uch']
                                Constant: int, 0
                        Label: while_break___3
                          EmptyStatement: 
              Label: while_break___1
                EmptyStatement: 
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___4
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: i___0
                        ID: nn
                    Compound: 
                      Goto: while_break___4
                  Assignment: =
                    ID: tmp___2
                    ID: i___0
                  UnaryOp: p++
                    ID: i___0
                  Assignment: =
                    ArrayRef: 
                      ID: pt_len
                      ID: tmp___2
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      Constant: int, 0
              Label: while_break___4
                EmptyStatement: 
            Compound: 
              FuncCall: 
                ID: make_table
                ExprList: 
                  ID: nn
                  ID: pt_len
                  Constant: int, 8
                  ID: pt_table
        Return: 
  FuncDef: 
    Decl: read_c_len, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: read_c_len, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: i___0, [], [], [], []
        TypeDecl: i___0, [], None
          IdentifierType: ['int']
      Decl: c, [], [], [], []
        TypeDecl: c, [], None
          IdentifierType: ['int']
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: mask, [], [], [], []
        TypeDecl: mask, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Compound: 
        Compound: 
          Assignment: =
            ID: n
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              FuncCall: 
                ID: getbits
                ExprList: 
                  Constant: int, 9
        If: 
          BinaryOp: ==
            ID: n
            Constant: int, 0
          Compound: 
            Compound: 
              Assignment: =
                ID: c
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  FuncCall: 
                    ID: getbits
                    ExprList: 
                      Constant: int, 9
              Assignment: =
                ID: i___0
                Constant: int, 0
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: i___0
                        Constant: int, 510
                    Compound: 
                      Goto: while_break
                  Assignment: =
                    ArrayRef: 
                      ID: outbuf
                      ID: i___0
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      Constant: int, 0
                  UnaryOp: p++
                    ID: i___0
              Label: while_break
                EmptyStatement: 
            Assignment: =
              ID: i___0
              Constant: int, 0
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___0
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: i___0
                        Constant: int, 4096
                    Compound: 
                      Goto: while_break___0
                  Assignment: =
                    ArrayRef: 
                      ID: d_buf
                      ID: i___0
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      ID: c
                  UnaryOp: p++
                    ID: i___0
              Label: while_break___0
                EmptyStatement: 
          Compound: 
            Assignment: =
              ID: i___0
              Constant: int, 0
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___1
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: i___0
                        ID: n
                    Compound: 
                      Goto: while_break___1
                  Assignment: =
                    ID: c
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: pt_table
                        BinaryOp: >>
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ID: bitbuf
                          BinaryOp: -
                            BinaryOp: *
                              Constant: unsigned long int, 16UL
                              UnaryOp: sizeof
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['char']
                            Constant: unsigned long int, 8UL
                  If: 
                    BinaryOp: >=
                      ID: c
                      Constant: int, 19
                    Compound: 
                      Assignment: =
                        ID: mask
                        BinaryOp: <<
                          Constant: unsigned int, 1U
                          BinaryOp: -
                            BinaryOp: -
                              BinaryOp: *
                                Constant: unsigned long int, 16UL
                                UnaryOp: sizeof
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['char']
                              Constant: unsigned long int, 1UL
                            Constant: unsigned long int, 8UL
                      Compound: 
                        While: 
                          Constant: int, 1
                          Compound: 
                            Label: while_continue___2
                              EmptyStatement: 
                            If: 
                              BinaryOp: &
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['unsigned', 'int']
                                  ID: bitbuf
                                ID: mask
                              Compound: 
                                Assignment: =
                                  ID: c
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    UnaryOp: *
                                      BinaryOp: +
                                        BinaryOp: +
                                          ID: prev
                                          Constant: int, 32768
                                        ID: c
                              Compound: 
                                Assignment: =
                                  ID: c
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    ArrayRef: 
                                      ID: prev
                                      ID: c
                            Assignment: >>=
                              ID: mask
                              Constant: int, 1
                            If: 
                              UnaryOp: !
                                BinaryOp: >=
                                  ID: c
                                  Constant: int, 19
                              Compound: 
                                Goto: while_break___2
                        Label: while_break___2
                          EmptyStatement: 
                  Compound: 
                    FuncCall: 
                      ID: fillbuf
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          ArrayRef: 
                            ID: pt_len
                            ID: c
                  If: 
                    BinaryOp: <=
                      ID: c
                      Constant: int, 2
                    Compound: 
                      If: 
                        BinaryOp: ==
                          ID: c
                          Constant: int, 0
                        Compound: 
                          Assignment: =
                            ID: c
                            Constant: int, 1
                        Compound: 
                          If: 
                            BinaryOp: ==
                              ID: c
                              Constant: int, 1
                            Compound: 
                              Compound: 
                                Assignment: =
                                  ID: tmp
                                  FuncCall: 
                                    ID: getbits
                                    ExprList: 
                                      Constant: int, 4
                                Assignment: =
                                  ID: c
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    BinaryOp: +
                                      ID: tmp
                                      Constant: unsigned int, 3U
                            Compound: 
                              Compound: 
                                Assignment: =
                                  ID: tmp___0
                                  FuncCall: 
                                    ID: getbits
                                    ExprList: 
                                      Constant: int, 9
                                Assignment: =
                                  ID: c
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    BinaryOp: +
                                      ID: tmp___0
                                      Constant: unsigned int, 20U
                      Compound: 
                        While: 
                          Constant: int, 1
                          Compound: 
                            Label: while_continue___3
                              EmptyStatement: 
                            UnaryOp: p--
                              ID: c
                            If: 
                              UnaryOp: !
                                BinaryOp: >=
                                  ID: c
                                  Constant: int, 0
                              Compound: 
                                Goto: while_break___3
                            Assignment: =
                              ID: tmp___1
                              ID: i___0
                            UnaryOp: p++
                              ID: i___0
                            Assignment: =
                              ArrayRef: 
                                ID: outbuf
                                ID: tmp___1
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['uch']
                                Constant: int, 0
                        Label: while_break___3
                          EmptyStatement: 
                    Compound: 
                      Assignment: =
                        ID: tmp___2
                        ID: i___0
                      UnaryOp: p++
                        ID: i___0
                      Assignment: =
                        ArrayRef: 
                          ID: outbuf
                          ID: tmp___2
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['uch']
                          BinaryOp: -
                            ID: c
                            Constant: int, 2
              Label: while_break___1
                EmptyStatement: 
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___4
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: i___0
                        Constant: int, 510
                    Compound: 
                      Goto: while_break___4
                  Assignment: =
                    ID: tmp___3
                    ID: i___0
                  UnaryOp: p++
                    ID: i___0
                  Assignment: =
                    ArrayRef: 
                      ID: outbuf
                      ID: tmp___3
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      Constant: int, 0
              Label: while_break___4
                EmptyStatement: 
            Compound: 
              FuncCall: 
                ID: make_table
                ExprList: 
                  Constant: int, 510
                  ID: outbuf
                  Constant: int, 12
                  ID: d_buf
        Return: 
  FuncDef: 
    Decl: decode_c, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: decode_c, [], None
          IdentifierType: ['unsigned', 'int']
    Compound: 
      Decl: j___0, [], [], [], []
        TypeDecl: j___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: mask, [], [], [], []
        TypeDecl: mask, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        If: 
          BinaryOp: ==
            ID: blocksize
            Constant: unsigned int, 0U
          Compound: 
            Compound: 
              Assignment: =
                ID: blocksize
                FuncCall: 
                  ID: getbits
                  ExprList: 
                    Constant: int, 16
            If: 
              BinaryOp: ==
                ID: blocksize
                Constant: unsigned int, 0U
              Compound: 
                Return: 
                  Constant: unsigned int, 510U
            Compound: 
              FuncCall: 
                ID: read_pt_len
                ExprList: 
                  Constant: int, 19
                  Constant: int, 5
                  Constant: int, 3
              FuncCall: 
                ID: read_c_len
              FuncCall: 
                ID: read_pt_len
                ExprList: 
                  Constant: int, 14
                  Constant: int, 4
                  UnaryOp: -
                    Constant: int, 1
        UnaryOp: p--
          ID: blocksize
        Assignment: =
          ID: j___0
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            ArrayRef: 
              ID: d_buf
              BinaryOp: >>
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  ID: bitbuf
                BinaryOp: -
                  BinaryOp: *
                    Constant: unsigned long int, 16UL
                    UnaryOp: sizeof
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                  Constant: unsigned long int, 12UL
        If: 
          BinaryOp: >=
            ID: j___0
            Constant: unsigned int, 510U
          Compound: 
            Assignment: =
              ID: mask
              BinaryOp: <<
                Constant: unsigned int, 1U
                BinaryOp: -
                  BinaryOp: -
                    BinaryOp: *
                      Constant: unsigned long int, 16UL
                      UnaryOp: sizeof
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['char']
                    Constant: unsigned long int, 1UL
                  Constant: unsigned long int, 12UL
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue
                    EmptyStatement: 
                  If: 
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        ID: bitbuf
                      ID: mask
                    Compound: 
                      Assignment: =
                        ID: j___0
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          UnaryOp: *
                            BinaryOp: +
                              BinaryOp: +
                                ID: prev
                                Constant: int, 32768
                              ID: j___0
                    Compound: 
                      Assignment: =
                        ID: j___0
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ArrayRef: 
                            ID: prev
                            ID: j___0
                  Assignment: >>=
                    ID: mask
                    Constant: int, 1
                  If: 
                    UnaryOp: !
                      BinaryOp: >=
                        ID: j___0
                        Constant: unsigned int, 510U
                    Compound: 
                      Goto: while_break
              Label: while_break
                EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: fillbuf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ArrayRef: 
                  ID: outbuf
                  ID: j___0
        Return: 
          ID: j___0
  FuncDef: 
    Decl: decode_p, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: decode_p, [], None
          IdentifierType: ['unsigned', 'int']
    Compound: 
      Decl: j___0, [], [], [], []
        TypeDecl: j___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: mask, [], [], [], []
        TypeDecl: mask, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Assignment: =
          ID: j___0
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            ArrayRef: 
              ID: pt_table
              BinaryOp: >>
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  ID: bitbuf
                BinaryOp: -
                  BinaryOp: *
                    Constant: unsigned long int, 16UL
                    UnaryOp: sizeof
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                  Constant: unsigned long int, 8UL
        If: 
          BinaryOp: >=
            ID: j___0
            Constant: unsigned int, 14U
          Compound: 
            Assignment: =
              ID: mask
              BinaryOp: <<
                Constant: unsigned int, 1U
                BinaryOp: -
                  BinaryOp: -
                    BinaryOp: *
                      Constant: unsigned long int, 16UL
                      UnaryOp: sizeof
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['char']
                    Constant: unsigned long int, 1UL
                  Constant: unsigned long int, 8UL
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue
                    EmptyStatement: 
                  If: 
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        ID: bitbuf
                      ID: mask
                    Compound: 
                      Assignment: =
                        ID: j___0
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          UnaryOp: *
                            BinaryOp: +
                              BinaryOp: +
                                ID: prev
                                Constant: int, 32768
                              ID: j___0
                    Compound: 
                      Assignment: =
                        ID: j___0
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ArrayRef: 
                            ID: prev
                            ID: j___0
                  Assignment: >>=
                    ID: mask
                    Constant: int, 1
                  If: 
                    UnaryOp: !
                      BinaryOp: >=
                        ID: j___0
                        Constant: unsigned int, 14U
                    Compound: 
                      Goto: while_break
              Label: while_break
                EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: fillbuf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ArrayRef: 
                  ID: pt_len
                  ID: j___0
        If: 
          BinaryOp: !=
            ID: j___0
            Constant: unsigned int, 0U
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp
                FuncCall: 
                  ID: getbits
                  ExprList: 
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      BinaryOp: -
                        ID: j___0
                        Constant: unsigned int, 1U
              Assignment: =
                ID: j___0
                BinaryOp: +
                  BinaryOp: <<
                    Constant: unsigned int, 1U
                    BinaryOp: -
                      ID: j___0
                      Constant: unsigned int, 1U
                  ID: tmp
        Return: 
          ID: j___0
  FuncDef: 
    Decl: huf_decode_start, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: huf_decode_start, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        Compound: 
          FuncCall: 
            ID: init_getbits
          Assignment: =
            ID: blocksize
            Constant: unsigned int, 0U
        Return: 
  Decl: j, [], [], ['static'], []
    TypeDecl: j, [], None
      IdentifierType: ['int']
  Decl: done, [], [], ['static'], []
    TypeDecl: done, [], None
      IdentifierType: ['int']
  FuncDef: 
    Decl: decode_start, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: decode_start, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        Compound: 
          FuncCall: 
            ID: huf_decode_start
          Assignment: =
            ID: j
            Constant: int, 0
          Assignment: =
            ID: done
            Constant: int, 0
        Return: 
  Decl: i, [], [], ['static'], []
    TypeDecl: i, [], None
      IdentifierType: ['unsigned', 'int']
  FuncDef: 
    Decl: decode, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: count, [], [], [], []
            TypeDecl: count, [], None
              IdentifierType: ['unsigned', 'int']
          Decl: buffer, [], [], [], []
            PtrDecl: []
              TypeDecl: buffer, [], None
                IdentifierType: ['uch']
        TypeDecl: decode, [], None
          IdentifierType: ['unsigned', 'int']
    Compound: 
      Decl: r, [], [], [], []
        TypeDecl: r, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: c, [], [], [], []
        TypeDecl: c, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Assignment: =
          ID: r
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              UnaryOp: p--
                ID: j
              If: 
                UnaryOp: !
                  BinaryOp: >=
                    ID: j
                    Constant: int, 0
                Compound: 
                  Goto: while_break
              Assignment: =
                UnaryOp: *
                  BinaryOp: +
                    ID: buffer
                    ID: r
                UnaryOp: *
                  BinaryOp: +
                    ID: buffer
                    ID: i
              Assignment: =
                ID: i
                BinaryOp: &
                  BinaryOp: +
                    ID: i
                    Constant: unsigned int, 1U
                  BinaryOp: -
                    BinaryOp: <<
                      Constant: unsigned int, 1U
                      Constant: int, 13
                    Constant: unsigned int, 1U
              UnaryOp: p++
                ID: r
              If: 
                BinaryOp: ==
                  ID: r
                  ID: count
                Compound: 
                  Return: 
                    ID: r
          Label: while_break
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: c
                  FuncCall: 
                    ID: decode_c
              If: 
                BinaryOp: ==
                  ID: c
                  Constant: unsigned int, 510U
                Compound: 
                  Assignment: =
                    ID: done
                    Constant: int, 1
                  Return: 
                    ID: r
              If: 
                BinaryOp: <=
                  ID: c
                  Constant: unsigned int, 255U
                Compound: 
                  Assignment: =
                    UnaryOp: *
                      BinaryOp: +
                        ID: buffer
                        ID: r
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      ID: c
                  UnaryOp: p++
                    ID: r
                  If: 
                    BinaryOp: ==
                      ID: r
                      ID: count
                    Compound: 
                      Return: 
                        ID: r
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: j
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        BinaryOp: -
                          ID: c
                          Constant: unsigned int, 253U
                    Assignment: =
                      ID: tmp
                      FuncCall: 
                        ID: decode_p
                    Assignment: =
                      ID: i
                      BinaryOp: &
                        BinaryOp: -
                          BinaryOp: -
                            ID: r
                            ID: tmp
                          Constant: unsigned int, 1U
                        BinaryOp: -
                          BinaryOp: <<
                            Constant: unsigned int, 1U
                            Constant: int, 13
                          Constant: unsigned int, 1U
                  Compound: 
                    While: 
                      Constant: int, 1
                      Compound: 
                        Label: while_continue___1
                          EmptyStatement: 
                        UnaryOp: p--
                          ID: j
                        If: 
                          UnaryOp: !
                            BinaryOp: >=
                              ID: j
                              Constant: int, 0
                          Compound: 
                            Goto: while_break___1
                        Assignment: =
                          UnaryOp: *
                            BinaryOp: +
                              ID: buffer
                              ID: r
                          UnaryOp: *
                            BinaryOp: +
                              ID: buffer
                              ID: i
                        Assignment: =
                          ID: i
                          BinaryOp: &
                            BinaryOp: +
                              ID: i
                              Constant: unsigned int, 1U
                            BinaryOp: -
                              BinaryOp: <<
                                Constant: unsigned int, 1U
                                Constant: int, 13
                              Constant: unsigned int, 1U
                        UnaryOp: p++
                          ID: r
                        If: 
                          BinaryOp: ==
                            ID: r
                            ID: count
                          Compound: 
                            Return: 
                              ID: r
                    Label: while_break___1
                      EmptyStatement: 
          Label: while_break___0
            EmptyStatement: 
  FuncDef: 
    Decl: unlzh, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: in, [], [], [], []
            TypeDecl: in, [], None
              IdentifierType: ['int']
          Decl: out, [], [], [], []
            TypeDecl: out, [], None
              IdentifierType: ['int']
        TypeDecl: unlzh, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Compound: 
          Assignment: =
            ID: ifd
            ID: in
          Assignment: =
            ID: ofd
            ID: out
          FuncCall: 
            ID: decode_start
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  UnaryOp: !
                    ID: done
                Compound: 
                  Goto: while_break
              Compound: 
                Assignment: =
                  ID: n
                  FuncCall: 
                    ID: decode
                    ExprList: 
                      BinaryOp: <<
                        Constant: unsigned int, 1U
                        Constant: int, 13
                      ID: window
              If: 
                UnaryOp: !
                  ID: test
                Compound: 
                  If: 
                    BinaryOp: >
                      ID: n
                      Constant: unsigned int, 0U
                    Compound: 
                      Compound: 
                        FuncCall: 
                          ID: write_buf
                          ExprList: 
                            ID: out
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['voidp']
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['char']
                                ID: window
                            ID: n
          Label: while_break
            EmptyStatement: 
        Return: 
          Constant: int, 0
  Decl: outcnt, [], [], [], []
    TypeDecl: outcnt, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: bytes_out, [], [], [], []
    TypeDecl: bytes_out, [], None
      IdentifierType: ['long']
  Decl: unpack, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: in, [], [], [], []
          TypeDecl: in, [], None
            IdentifierType: ['int']
        Decl: out, [], [], [], []
          TypeDecl: out, [], None
            IdentifierType: ['int']
      TypeDecl: unpack, [], None
        IdentifierType: ['int']
  Decl: flush_window, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: flush_window, [], None
        IdentifierType: ['void']
  Decl: orig_len, [], [], ['static'], []
    TypeDecl: orig_len, [], None
      IdentifierType: ['ulg']
  Decl: max_len, [], [], ['static'], []
    TypeDecl: max_len, [], None
      IdentifierType: ['int']
  Decl: literal, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: literal, [], None
        IdentifierType: ['uch']
      Constant: int, 256
  Decl: lit_base, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: lit_base, [], None
        IdentifierType: ['int']
      Constant: int, 26
  Decl: leaves, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: leaves, [], None
        IdentifierType: ['int']
      Constant: int, 26
  Decl: parents, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: parents, [], None
        IdentifierType: ['int']
      Constant: int, 26
  Decl: peek_bits, [], [], ['static'], []
    TypeDecl: peek_bits, [], None
      IdentifierType: ['int']
  Decl: bitbuf___0, [], [], ['static'], []
    TypeDecl: bitbuf___0, [], None
      IdentifierType: ['ulg']
  Decl: valid, [], [], ['static'], []
    TypeDecl: valid, [], None
      IdentifierType: ['int']
  Decl: read_tree, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: read_tree, [], None
        IdentifierType: ['void']
  Decl: build_tree, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: build_tree, [], None
        IdentifierType: ['void']
  FuncDef: 
    Decl: read_tree, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: read_tree, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['int']
      Decl: base, [], [], [], []
        TypeDecl: base, [], None
          IdentifierType: ['int']
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['int']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___10, [], [], [], []
        TypeDecl: tmp___10, [], None
          IdentifierType: ['int']
      Decl: tmp___11, [], [], [], []
        TypeDecl: tmp___11, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp17, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp17, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp18, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp18, [], None
            IdentifierType: ['char']
      Compound: 
        Assignment: =
          ID: orig_len
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ulg']
            Constant: int, 0
        Assignment: =
          ID: n
          Constant: int, 1
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: n
                    Constant: int, 4
                Compound: 
                  Goto: while_break
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___1
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___0
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___1
                      ID: tmp___0
              Assignment: =
                ID: orig_len
                BinaryOp: |
                  BinaryOp: <<
                    ID: orig_len
                    Constant: int, 8
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    ID: tmp___1
              UnaryOp: p++
                ID: n
          Label: while_break
            EmptyStatement: 
        If: 
          BinaryOp: <
            ID: inptr
            ID: insize
          Compound: 
            Assignment: =
              ID: tmp___2
              ID: inptr
            UnaryOp: p++
              ID: inptr
            Assignment: =
              ID: tmp___4
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ArrayRef: 
                  ID: inbuf
                  ID: tmp___2
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___3
                FuncCall: 
                  ID: fill_inbuf
                  ExprList: 
                    Constant: int, 0
              Assignment: =
                ID: tmp___4
                ID: tmp___3
        Assignment: =
          ID: max_len
          ID: tmp___4
        If: 
          BinaryOp: >
            ID: max_len
            Constant: int, 25
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "invalid compressed data -- Huffman code > 32 bits"
        Assignment: =
          ID: n
          Constant: int, 0
        Assignment: =
          ID: len
          Constant: int, 1
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: len
                    ID: max_len
                Compound: 
                  Goto: while_break___0
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp___5
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___7
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp___5
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___6
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___7
                      ID: tmp___6
              Assignment: =
                ArrayRef: 
                  ID: leaves
                  ID: len
                ID: tmp___7
              Assignment: +=
                ID: n
                ArrayRef: 
                  ID: leaves
                  ID: len
              UnaryOp: p++
                ID: len
          Label: while_break___0
            EmptyStatement: 
        If: 
          BinaryOp: >
            ID: n
            Constant: int, 256
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "too many leaves in Huffman tree"
        UnaryOp: p++
          ArrayRef: 
            ID: leaves
            ID: max_len
        Assignment: =
          ID: base
          Constant: int, 0
        Assignment: =
          ID: len
          Constant: int, 1
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: len
                    ID: max_len
                Compound: 
                  Goto: while_break___1
              Assignment: =
                ArrayRef: 
                  ID: lit_base
                  ID: len
                ID: base
              Assignment: =
                ID: n
                ArrayRef: 
                  ID: leaves
                  ID: len
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___2
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: >
                          ID: n
                          Constant: int, 0
                      Compound: 
                        Goto: while_break___2
                    Assignment: =
                      ID: tmp___8
                      ID: base
                    UnaryOp: p++
                      ID: base
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp___9
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___11
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp___9
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___10
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___11
                            ID: tmp___10
                    Assignment: =
                      ArrayRef: 
                        ID: literal
                        ID: tmp___8
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['uch']
                        ID: tmp___11
                    UnaryOp: p--
                      ID: n
                Label: while_break___2
                  EmptyStatement: 
              UnaryOp: p++
                ID: len
          Label: while_break___1
            EmptyStatement: 
        UnaryOp: p++
          ArrayRef: 
            ID: leaves
            ID: max_len
        Return: 
  FuncDef: 
    Decl: build_tree, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: build_tree, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: nodes, [], [], [], []
        TypeDecl: nodes, [], None
          IdentifierType: ['int']
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['int']
      Decl: prefixp, [], [], [], []
        PtrDecl: []
          TypeDecl: prefixp, [], None
            IdentifierType: ['uch']
      Decl: prefixes, [], [], [], []
        TypeDecl: prefixes, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: nodes
          Constant: int, 0
        Assignment: =
          ID: len
          ID: max_len
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: >=
                    ID: len
                    Constant: int, 1
                Compound: 
                  Goto: while_break
              Assignment: >>=
                ID: nodes
                Constant: int, 1
              Assignment: =
                ArrayRef: 
                  ID: parents
                  ID: len
                ID: nodes
              Assignment: -=
                ArrayRef: 
                  ID: lit_base
                  ID: len
                ID: nodes
              Assignment: +=
                ID: nodes
                ArrayRef: 
                  ID: leaves
                  ID: len
              UnaryOp: p--
                ID: len
          Label: while_break
            EmptyStatement: 
        If: 
          BinaryOp: <=
            ID: max_len
            Constant: int, 12
          Compound: 
            Assignment: =
              ID: peek_bits
              ID: max_len
          Compound: 
            Assignment: =
              ID: peek_bits
              Constant: int, 12
        Assignment: =
          ID: prefixp
          UnaryOp: &
            ArrayRef: 
              ID: outbuf
              BinaryOp: <<
                Constant: int, 1
                ID: peek_bits
        Assignment: =
          ID: len
          Constant: int, 1
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: len
                    ID: peek_bits
                Compound: 
                  Goto: while_break___0
              Assignment: =
                ID: prefixes
                BinaryOp: <<
                  ArrayRef: 
                    ID: leaves
                    ID: len
                  BinaryOp: -
                    ID: peek_bits
                    ID: len
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___1
                      EmptyStatement: 
                    Assignment: =
                      ID: tmp
                      ID: prefixes
                    UnaryOp: p--
                      ID: prefixes
                    If: 
                      UnaryOp: !
                        ID: tmp
                      Compound: 
                        Goto: while_break___1
                    UnaryOp: p--
                      ID: prefixp
                    Assignment: =
                      UnaryOp: *
                        ID: prefixp
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['uch']
                        ID: len
                Label: while_break___1
                  EmptyStatement: 
              UnaryOp: p++
                ID: len
          Label: while_break___0
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___2
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: >
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      ID: prefixp
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      ID: outbuf
                Compound: 
                  Goto: while_break___2
              UnaryOp: p--
                ID: prefixp
              Assignment: =
                UnaryOp: *
                  ID: prefixp
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['uch']
                  Constant: int, 0
          Label: while_break___2
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: unpack, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: in, [], [], [], []
            TypeDecl: in, [], None
              IdentifierType: ['int']
          Decl: out, [], [], [], []
            TypeDecl: out, [], None
              IdentifierType: ['int']
        TypeDecl: unpack, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['int']
      Decl: eob, [], [], [], []
        TypeDecl: eob, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: peek, [], [], ['register'], []
        TypeDecl: peek, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: peek_mask, [], [], [], []
        TypeDecl: peek_mask, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: mask, [], [], [], []
        TypeDecl: mask, [], None
          IdentifierType: ['ulg']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: __cil_tmp15, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp15, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: ifd
            ID: in
          Assignment: =
            ID: ofd
            ID: out
          FuncCall: 
            ID: read_tree
          FuncCall: 
            ID: build_tree
          Assignment: =
            ID: valid
            Constant: int, 0
          Assignment: =
            ID: bitbuf___0
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['ulg']
              Constant: int, 0
          Assignment: =
            ID: peek_mask
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              BinaryOp: -
                BinaryOp: <<
                  Constant: int, 1
                  ID: peek_bits
                Constant: int, 1
          Assignment: =
            ID: eob
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              BinaryOp: -
                ArrayRef: 
                  ID: leaves
                  ID: max_len
                Constant: int, 1
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___0
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: <
                          ID: valid
                          ID: peek_bits
                      Compound: 
                        Goto: while_break___0
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___1
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___0
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___1
                            ID: tmp___0
                    Assignment: =
                      ID: bitbuf___0
                      BinaryOp: |
                        BinaryOp: <<
                          ID: bitbuf___0
                          Constant: int, 8
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          ID: tmp___1
                    Assignment: +=
                      ID: valid
                      Constant: int, 8
                Label: while_break___0
                  EmptyStatement: 
              Assignment: =
                ID: peek
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  BinaryOp: &
                    BinaryOp: >>
                      ID: bitbuf___0
                      BinaryOp: -
                        ID: valid
                        ID: peek_bits
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      ID: peek_mask
              Assignment: =
                ID: len
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  ArrayRef: 
                    ID: outbuf
                    ID: peek
              If: 
                BinaryOp: >
                  ID: len
                  Constant: int, 0
                Compound: 
                  Assignment: >>=
                    ID: peek
                    BinaryOp: -
                      ID: peek_bits
                      ID: len
                Compound: 
                  Assignment: =
                    ID: mask
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: peek_mask
                  Assignment: =
                    ID: len
                    ID: peek_bits
                  Compound: 
                    While: 
                      Constant: int, 1
                      Compound: 
                        Label: while_continue___1
                          EmptyStatement: 
                        UnaryOp: p++
                          ID: len
                        Assignment: =
                          ID: mask
                          BinaryOp: +
                            BinaryOp: <<
                              ID: mask
                              Constant: int, 1
                            Constant: unsigned long int, 1UL
                        Compound: 
                          While: 
                            Constant: int, 1
                            Compound: 
                              Label: while_continue___2
                                EmptyStatement: 
                              If: 
                                UnaryOp: !
                                  BinaryOp: <
                                    ID: valid
                                    ID: len
                                Compound: 
                                  Goto: while_break___2
                              If: 
                                BinaryOp: <
                                  ID: inptr
                                  ID: insize
                                Compound: 
                                  Assignment: =
                                    ID: tmp___2
                                    ID: inptr
                                  UnaryOp: p++
                                    ID: inptr
                                  Assignment: =
                                    ID: tmp___4
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['int']
                                      ArrayRef: 
                                        ID: inbuf
                                        ID: tmp___2
                                Compound: 
                                  Compound: 
                                    Assignment: =
                                      ID: tmp___3
                                      FuncCall: 
                                        ID: fill_inbuf
                                        ExprList: 
                                          Constant: int, 0
                                    Assignment: =
                                      ID: tmp___4
                                      ID: tmp___3
                              Assignment: =
                                ID: bitbuf___0
                                BinaryOp: |
                                  BinaryOp: <<
                                    ID: bitbuf___0
                                    Constant: int, 8
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ulg']
                                    ID: tmp___4
                              Assignment: +=
                                ID: valid
                                Constant: int, 8
                          Label: while_break___2
                            EmptyStatement: 
                        Assignment: =
                          ID: peek
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'int']
                            BinaryOp: &
                              BinaryOp: >>
                                ID: bitbuf___0
                                BinaryOp: -
                                  ID: valid
                                  ID: len
                              ID: mask
                        If: 
                          UnaryOp: !
                            BinaryOp: <
                              ID: peek
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                ArrayRef: 
                                  ID: parents
                                  ID: len
                          Compound: 
                            Goto: while_break___1
                    Label: while_break___1
                      EmptyStatement: 
              If: 
                BinaryOp: ==
                  ID: peek
                  ID: eob
                Compound: 
                  If: 
                    BinaryOp: ==
                      ID: len
                      ID: max_len
                    Compound: 
                      Goto: while_break
              Assignment: =
                ID: tmp___5
                ID: outcnt
              UnaryOp: p++
                ID: outcnt
              Assignment: =
                ArrayRef: 
                  ID: window
                  ID: tmp___5
                ArrayRef: 
                  ID: literal
                  BinaryOp: +
                    ID: peek
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ArrayRef: 
                        ID: lit_base
                        ID: len
              If: 
                BinaryOp: ==
                  ID: outcnt
                  Constant: unsigned int, 32768U
                Compound: 
                  Compound: 
                    FuncCall: 
                      ID: flush_window
              Assignment: -=
                ID: valid
                ID: len
          Label: while_break
            EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: flush_window
        If: 
          BinaryOp: !=
            ID: orig_len
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['ulg']
              ID: bytes_out
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "invalid compressed data--length error"
        Return: 
          Constant: int, 0
  Decl: read, [], [], ['extern'], []
    FuncDecl: 
      ParamList: 
        Decl: __fd, [], [], [], []
          TypeDecl: __fd, [], None
            IdentifierType: ['int']
        Decl: __buf, [], [], [], []
          PtrDecl: []
            TypeDecl: __buf, [], None
              IdentifierType: ['void']
        Decl: __nbytes, [], [], [], []
          TypeDecl: __nbytes, [], None
            IdentifierType: ['size_t']
      TypeDecl: read, [], None
        IdentifierType: ['ssize_t']
  Decl: stderr, [], [], ['extern'], []
    PtrDecl: []
      TypeDecl: stderr, [], None
        Struct: _IO_FILE
  Decl: bytes_in, [], [], [], []
    TypeDecl: bytes_in, [], None
      IdentifierType: ['long']
  Decl: ifname, [], [], [], []
    ArrayDecl: []
      TypeDecl: ifname, [], None
        IdentifierType: ['char']
      Constant: int, 1024
  Decl: progname, [], [], [], []
    PtrDecl: []
      TypeDecl: progname, [], None
        IdentifierType: ['char']
  Decl: exit_code, [], [], [], []
    TypeDecl: exit_code, [], None
      IdentifierType: ['int']
  Decl: quiet, [], [], [], []
    TypeDecl: quiet, [], None
      IdentifierType: ['int']
  Decl: to_stdout, [], [], [], []
    TypeDecl: to_stdout, [], None
      IdentifierType: ['int']
  Decl: read_error, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: read_error, [], None
        IdentifierType: ['void']
  Decl: maxbits, [], [], [], []
    TypeDecl: maxbits, [], None
      IdentifierType: ['int']
  Decl: block_mode, [], [], [], []
    TypeDecl: block_mode, [], None
      IdentifierType: ['int']
  Decl: unlzw, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: in, [], [], [], []
          TypeDecl: in, [], None
            IdentifierType: ['int']
        Decl: out, [], [], [], []
          TypeDecl: out, [], None
            IdentifierType: ['int']
      TypeDecl: unlzw, [], None
        IdentifierType: ['int']
  Decl: block_mode, [], [], [], []
    TypeDecl: block_mode, [], None
      IdentifierType: ['int']
    Constant: int, 128
  FuncDef: 
    Decl: unlzw, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: in, [], [], [], []
            TypeDecl: in, [], None
              IdentifierType: ['int']
          Decl: out, [], [], [], []
            TypeDecl: out, [], None
              IdentifierType: ['int']
        TypeDecl: unlzw, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: stackp, [], [], ['register'], []
        PtrDecl: []
          TypeDecl: stackp, [], None
            IdentifierType: ['char_type']
      Decl: code, [], [], [], []
        TypeDecl: code, [], None
          IdentifierType: ['code_int']
      Decl: finchar, [], [], [], []
        TypeDecl: finchar, [], None
          IdentifierType: ['int']
      Decl: oldcode, [], [], [], []
        TypeDecl: oldcode, [], None
          IdentifierType: ['code_int']
      Decl: incode, [], [], [], []
        TypeDecl: incode, [], None
          IdentifierType: ['code_int']
      Decl: inbits, [], [], [], []
        TypeDecl: inbits, [], None
          IdentifierType: ['long']
      Decl: posbits, [], [], [], []
        TypeDecl: posbits, [], None
          IdentifierType: ['long']
      Decl: outpos, [], [], [], []
        TypeDecl: outpos, [], None
          IdentifierType: ['int']
      Decl: bitmask, [], [], [], []
        TypeDecl: bitmask, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: free_ent, [], [], [], []
        TypeDecl: free_ent, [], None
          IdentifierType: ['code_int']
      Decl: maxcode, [], [], [], []
        TypeDecl: maxcode, [], None
          IdentifierType: ['code_int']
      Decl: maxmaxcode, [], [], [], []
        TypeDecl: maxmaxcode, [], None
          IdentifierType: ['code_int']
      Decl: n_bits, [], [], [], []
        TypeDecl: n_bits, [], None
          IdentifierType: ['int']
      Decl: rsize, [], [], [], []
        TypeDecl: rsize, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: i___0, [], [], ['register'], []
        TypeDecl: i___0, [], None
          IdentifierType: ['int']
      Decl: e, [], [], [], []
        TypeDecl: e, [], None
          IdentifierType: ['int']
      Decl: o, [], [], [], []
        TypeDecl: o, [], None
          IdentifierType: ['int']
      Decl: p, [], [], ['register'], []
        PtrDecl: []
          TypeDecl: p, [], None
            IdentifierType: ['char_type']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, ['const'], [], [], []
        PtrDecl: []
          TypeDecl: tmp___2, ['const'], None
            IdentifierType: ['char']
      Decl: i___1, [], [], ['register'], []
        TypeDecl: i___1, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp27, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp27, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp28, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp28, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp29, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp29, [], None
            IdentifierType: ['char']
      Compound: 
        If: 
          BinaryOp: <
            ID: inptr
            ID: insize
          Compound: 
            Assignment: =
              ID: tmp
              ID: inptr
            UnaryOp: p++
              ID: inptr
            Assignment: =
              ID: maxbits
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ArrayRef: 
                  ID: inbuf
                  ID: tmp
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___0
                FuncCall: 
                  ID: fill_inbuf
                  ExprList: 
                    Constant: int, 0
              Assignment: =
                ID: maxbits
                ID: tmp___0
        Assignment: =
          ID: block_mode
          BinaryOp: &
            ID: maxbits
            Constant: int, 128
        If: 
          BinaryOp: !=
            BinaryOp: &
              ID: maxbits
              Constant: int, 96
            Constant: int, 0
          Compound: 
            If: 
              UnaryOp: !
                ID: quiet
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "\n%s: %s: warning, unknown flags 0x%x\n"
                      ID: progname
                      ID: ifname
                      BinaryOp: &
                        ID: maxbits
                        Constant: int, 96
            If: 
              BinaryOp: ==
                ID: exit_code
                Constant: int, 0
              Compound: 
                Assignment: =
                  ID: exit_code
                  Constant: int, 2
        Assignment: &=
          ID: maxbits
          Constant: int, 31
        Assignment: =
          ID: maxmaxcode
          BinaryOp: <<
            Constant: long int, 1L
            ID: maxbits
        If: 
          BinaryOp: >
            ID: maxbits
            Constant: int, 16
          Compound: 
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "\n%s: %s: compressed with %d bits, can only handle %d bits\n"
                  ID: progname
                  ID: ifname
                  ID: maxbits
                  Constant: int, 16
              Assignment: =
                ID: exit_code
                Constant: int, 1
            Return: 
              Constant: int, 1
        Assignment: =
          ID: rsize
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            ID: insize
        Assignment: =
          ID: n_bits
          Constant: int, 9
        Assignment: =
          ID: maxcode
          BinaryOp: -
            BinaryOp: <<
              Constant: long int, 1L
              ID: n_bits
            Constant: long int, 1L
        Assignment: =
          ID: bitmask
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            BinaryOp: -
              BinaryOp: <<
                Constant: int, 1
                ID: n_bits
              Constant: int, 1
        Assignment: =
          ID: oldcode
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['code_int']
            UnaryOp: -
              Constant: int, 1
        Assignment: =
          ID: finchar
          Constant: int, 0
        Assignment: =
          ID: outpos
          Constant: int, 0
        Assignment: =
          ID: posbits
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['long']
            BinaryOp: <<
              ID: inptr
              Constant: int, 3
        If: 
          ID: block_mode
          Compound: 
            Assignment: =
              ID: free_ent
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['code_int']
                Constant: int, 257
          Compound: 
            Assignment: =
              ID: free_ent
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['code_int']
                Constant: int, 256
        Compound: 
          FuncCall: 
            ID: memset
            ExprList: 
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['voidp']
                ID: prev
              Constant: int, 0
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['size_t']
                Constant: int, 256
          Assignment: =
            ID: code
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['code_int']
              Constant: int, 255
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: >=
                    ID: code
                    Constant: long int, 0L
                Compound: 
                  Goto: while_break
              Assignment: =
                ArrayRef: 
                  ID: window
                  ID: code
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['char_type']
                  ID: code
              UnaryOp: p--
                ID: code
          Label: while_break
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              Label: resetbuf
                Assignment: =
                  ID: o
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    BinaryOp: >>
                      ID: posbits
                      Constant: int, 3
              Assignment: =
                ID: e
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  BinaryOp: -
                    ID: insize
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: o
              Assignment: =
                ID: i___0
                Constant: int, 0
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___1
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: <
                          ID: i___0
                          ID: e
                      Compound: 
                        Goto: while_break___1
                    Assignment: =
                      ArrayRef: 
                        ID: inbuf
                        ID: i___0
                      ArrayRef: 
                        ID: inbuf
                        BinaryOp: +
                          ID: i___0
                          ID: o
                    UnaryOp: p++
                      ID: i___0
                Label: while_break___1
                  EmptyStatement: 
              Assignment: =
                ID: insize
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  ID: e
              Assignment: =
                ID: posbits
                Constant: long int, 0L
              If: 
                BinaryOp: <
                  ID: insize
                  Constant: unsigned int, 64U
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: rsize
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        FuncCall: 
                          ID: read
                          ExprList: 
                            ID: in
                            Cast: 
                              Typename: None, [], None
                                PtrDecl: []
                                  TypeDecl: None, [], None
                                    IdentifierType: ['void']
                              BinaryOp: +
                                Cast: 
                                  Typename: None, [], None
                                    PtrDecl: []
                                      TypeDecl: None, [], None
                                        IdentifierType: ['char']
                                  ID: inbuf
                                ID: insize
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['size_t']
                              Constant: int, 32768
                  If: 
                    BinaryOp: ==
                      ID: rsize
                      UnaryOp: -
                        Constant: int, 1
                    Compound: 
                      Compound: 
                        FuncCall: 
                          ID: read_error
                  Assignment: +=
                    ID: insize
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: rsize
                  Assignment: =
                    ID: bytes_in
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['long']
                      BinaryOp: +
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          ID: bytes_in
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          ID: rsize
              If: 
                BinaryOp: !=
                  ID: rsize
                  Constant: int, 0
                Compound: 
                  Assignment: =
                    ID: inbits
                    BinaryOp: <<
                      BinaryOp: -
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['long']
                          ID: insize
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['long']
                          BinaryOp: %
                            ID: insize
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              ID: n_bits
                      Constant: int, 3
                Compound: 
                  Assignment: =
                    ID: inbits
                    BinaryOp: -
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['long']
                          ID: insize
                        Constant: int, 3
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['long']
                        BinaryOp: -
                          ID: n_bits
                          Constant: int, 1
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___2
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: >
                          ID: inbits
                          ID: posbits
                      Compound: 
                        Goto: while_break___2
                    If: 
                      BinaryOp: >
                        ID: free_ent
                        ID: maxcode
                      Compound: 
                        Assignment: =
                          ID: posbits
                          BinaryOp: +
                            BinaryOp: -
                              ID: posbits
                              Constant: long int, 1L
                            BinaryOp: -
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['long']
                                BinaryOp: <<
                                  ID: n_bits
                                  Constant: int, 3
                              BinaryOp: %
                                BinaryOp: +
                                  BinaryOp: -
                                    ID: posbits
                                    Constant: long int, 1L
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['long']
                                    BinaryOp: <<
                                      ID: n_bits
                                      Constant: int, 3
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['long']
                                  BinaryOp: <<
                                    ID: n_bits
                                    Constant: int, 3
                        UnaryOp: p++
                          ID: n_bits
                        If: 
                          BinaryOp: ==
                            ID: n_bits
                            ID: maxbits
                          Compound: 
                            Assignment: =
                              ID: maxcode
                              ID: maxmaxcode
                          Compound: 
                            Assignment: =
                              ID: maxcode
                              BinaryOp: -
                                BinaryOp: <<
                                  Constant: long int, 1L
                                  ID: n_bits
                                Constant: long int, 1L
                        Assignment: =
                          ID: bitmask
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'int']
                            BinaryOp: -
                              BinaryOp: <<
                                Constant: int, 1
                                ID: n_bits
                              Constant: int, 1
                        Goto: resetbuf
                    Assignment: =
                      ID: p
                      UnaryOp: &
                        ArrayRef: 
                          ID: inbuf
                          BinaryOp: >>
                            ID: posbits
                            Constant: int, 3
                    Assignment: =
                      ID: code
                      BinaryOp: &
                        BinaryOp: >>
                          BinaryOp: |
                            BinaryOp: |
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['long']
                                UnaryOp: *
                                  BinaryOp: +
                                    ID: p
                                    Constant: int, 0
                              BinaryOp: <<
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['long']
                                  UnaryOp: *
                                    BinaryOp: +
                                      ID: p
                                      Constant: int, 1
                                Constant: int, 8
                            BinaryOp: <<
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['long']
                                UnaryOp: *
                                  BinaryOp: +
                                    ID: p
                                    Constant: int, 2
                              Constant: int, 16
                          BinaryOp: &
                            ID: posbits
                            Constant: long int, 7L
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['long']
                          ID: bitmask
                    Assignment: +=
                      ID: posbits
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['long']
                        ID: n_bits
                    If: 
                      BinaryOp: ==
                        ID: oldcode
                        UnaryOp: -
                          Constant: long int, 1L
                      Compound: 
                        If: 
                          BinaryOp: >=
                            ID: code
                            Constant: long int, 256L
                          Compound: 
                            Compound: 
                              FuncCall: 
                                ID: error
                                ExprList: 
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['char']
                                    Constant: string, "corrupt input."
                        Assignment: =
                          ID: tmp___1
                          ID: outpos
                        UnaryOp: p++
                          ID: outpos
                        Assignment: =
                          ID: oldcode
                          ID: code
                        Assignment: =
                          ID: finchar
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ID: oldcode
                        Assignment: =
                          ArrayRef: 
                            ID: outbuf
                            ID: tmp___1
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['char_type']
                            ID: finchar
                        Goto: while_continue___2
                    If: 
                      BinaryOp: ==
                        ID: code
                        Constant: long int, 256L
                      Compound: 
                        If: 
                          ID: block_mode
                          Compound: 
                            Compound: 
                              FuncCall: 
                                ID: memset
                                ExprList: 
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['voidp']
                                    ID: prev
                                  Constant: int, 0
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['size_t']
                                    Constant: int, 256
                              Assignment: =
                                ID: free_ent
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['code_int']
                                  Constant: int, 256
                              Assignment: =
                                ID: posbits
                                BinaryOp: +
                                  BinaryOp: -
                                    ID: posbits
                                    Constant: long int, 1L
                                  BinaryOp: -
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['long']
                                      BinaryOp: <<
                                        ID: n_bits
                                        Constant: int, 3
                                    BinaryOp: %
                                      BinaryOp: +
                                        BinaryOp: -
                                          ID: posbits
                                          Constant: long int, 1L
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['long']
                                          BinaryOp: <<
                                            ID: n_bits
                                            Constant: int, 3
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['long']
                                        BinaryOp: <<
                                          ID: n_bits
                                          Constant: int, 3
                              Assignment: =
                                ID: n_bits
                                Constant: int, 9
                              Assignment: =
                                ID: maxcode
                                BinaryOp: -
                                  BinaryOp: <<
                                    Constant: long int, 1L
                                    ID: n_bits
                                  Constant: long int, 1L
                              Assignment: =
                                ID: bitmask
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['unsigned', 'int']
                                  BinaryOp: -
                                    BinaryOp: <<
                                      Constant: int, 1
                                      ID: n_bits
                                    Constant: int, 1
                            Goto: resetbuf
                    Assignment: =
                      ID: incode
                      ID: code
                    Assignment: =
                      ID: stackp
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char_type']
                        UnaryOp: &
                          ArrayRef: 
                            ID: d_buf
                            Constant: int, 32767
                    If: 
                      BinaryOp: >=
                        ID: code
                        ID: free_ent
                      Compound: 
                        If: 
                          BinaryOp: >
                            ID: code
                            ID: free_ent
                          Compound: 
                            If: 
                              UnaryOp: !
                                ID: test
                              Compound: 
                                If: 
                                  BinaryOp: >
                                    ID: outpos
                                    Constant: int, 0
                                  Compound: 
                                    Compound: 
                                      FuncCall: 
                                        ID: write_buf
                                        ExprList: 
                                          ID: out
                                          Cast: 
                                            Typename: None, [], None
                                              TypeDecl: None, [], None
                                                IdentifierType: ['voidp']
                                            Cast: 
                                              Typename: None, [], None
                                                PtrDecl: []
                                                  TypeDecl: None, [], None
                                                    IdentifierType: ['char']
                                              ID: outbuf
                                          Cast: 
                                            Typename: None, [], None
                                              TypeDecl: None, [], None
                                                IdentifierType: ['unsigned', 'int']
                                            ID: outpos
                                      Assignment: =
                                        ID: bytes_out
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['long']
                                          BinaryOp: +
                                            Cast: 
                                              Typename: None, [], None
                                                TypeDecl: None, [], None
                                                  IdentifierType: ['ulg']
                                              ID: bytes_out
                                            Cast: 
                                              Typename: None, [], None
                                                TypeDecl: None, [], None
                                                  IdentifierType: ['ulg']
                                              ID: outpos
                            If: 
                              ID: to_stdout
                              Compound: 
                                Assignment: =
                                  ID: tmp___2
                                  Constant: string, "corrupt input."
                              Compound: 
                                Assignment: =
                                  ID: tmp___2
                                  Constant: string, "corrupt input. Use zcat to recover some data."
                            Compound: 
                              FuncCall: 
                                ID: error
                                ExprList: 
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['char']
                                    ID: tmp___2
                        UnaryOp: p--
                          ID: stackp
                        Assignment: =
                          UnaryOp: *
                            ID: stackp
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['char_type']
                            ID: finchar
                        Assignment: =
                          ID: code
                          ID: oldcode
                    Compound: 
                      While: 
                        Constant: int, 1
                        Compound: 
                          Label: while_continue___3
                            EmptyStatement: 
                          If: 
                            UnaryOp: !
                              BinaryOp: >=
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['cmp_code_int']
                                  ID: code
                                Constant: unsigned long int, 256UL
                            Compound: 
                              Goto: while_break___3
                          UnaryOp: p--
                            ID: stackp
                          Assignment: =
                            UnaryOp: *
                              ID: stackp
                            ArrayRef: 
                              ID: window
                              ID: code
                          Assignment: =
                            ID: code
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['code_int']
                              ArrayRef: 
                                ID: prev
                                ID: code
                      Label: while_break___3
                        EmptyStatement: 
                    UnaryOp: p--
                      ID: stackp
                    Assignment: =
                      ID: finchar
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: window
                          ID: code
                    Assignment: =
                      UnaryOp: *
                        ID: stackp
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['char_type']
                        ID: finchar
                    Assignment: =
                      ID: i___1
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        BinaryOp: -
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char_type']
                            UnaryOp: &
                              ArrayRef: 
                                ID: d_buf
                                Constant: int, 32767
                          ID: stackp
                    If: 
                      BinaryOp: >=
                        BinaryOp: +
                          ID: outpos
                          ID: i___1
                        Constant: int, 16384
                      Compound: 
                        Compound: 
                          While: 
                            Constant: int, 1
                            Compound: 
                              Label: while_continue___4
                                EmptyStatement: 
                              If: 
                                BinaryOp: >
                                  ID: i___1
                                  BinaryOp: -
                                    Constant: int, 16384
                                    ID: outpos
                                Compound: 
                                  Assignment: =
                                    ID: i___1
                                    BinaryOp: -
                                      Constant: int, 16384
                                      ID: outpos
                              If: 
                                BinaryOp: >
                                  ID: i___1
                                  Constant: int, 0
                                Compound: 
                                  Compound: 
                                    FuncCall: 
                                      ID: memcpy
                                      ExprList: 
                                        Cast: 
                                          Typename: None, [], None
                                            PtrDecl: []
                                              TypeDecl: None, [], None
                                                IdentifierType: ['void']
                                          BinaryOp: +
                                            ID: outbuf
                                            ID: outpos
                                        Cast: 
                                          Typename: None, ['const'], None
                                            PtrDecl: []
                                              TypeDecl: None, ['const'], None
                                                IdentifierType: ['void']
                                          ID: stackp
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['size_t']
                                          ID: i___1
                                    Assignment: +=
                                      ID: outpos
                                      ID: i___1
                              If: 
                                BinaryOp: >=
                                  ID: outpos
                                  Constant: int, 16384
                                Compound: 
                                  If: 
                                    UnaryOp: !
                                      ID: test
                                    Compound: 
                                      Compound: 
                                        FuncCall: 
                                          ID: write_buf
                                          ExprList: 
                                            ID: out
                                            Cast: 
                                              Typename: None, [], None
                                                TypeDecl: None, [], None
                                                  IdentifierType: ['voidp']
                                              Cast: 
                                                Typename: None, [], None
                                                  PtrDecl: []
                                                    TypeDecl: None, [], None
                                                      IdentifierType: ['char']
                                                ID: outbuf
                                            Cast: 
                                              Typename: None, [], None
                                                TypeDecl: None, [], None
                                                  IdentifierType: ['unsigned', 'int']
                                              ID: outpos
                                        Assignment: =
                                          ID: bytes_out
                                          Cast: 
                                            Typename: None, [], None
                                              TypeDecl: None, [], None
                                                IdentifierType: ['long']
                                            BinaryOp: +
                                              Cast: 
                                                Typename: None, [], None
                                                  TypeDecl: None, [], None
                                                    IdentifierType: ['ulg']
                                                ID: bytes_out
                                              Cast: 
                                                Typename: None, [], None
                                                  TypeDecl: None, [], None
                                                    IdentifierType: ['ulg']
                                                ID: outpos
                                  Assignment: =
                                    ID: outpos
                                    Constant: int, 0
                              Assignment: +=
                                ID: stackp
                                ID: i___1
                              Assignment: =
                                ID: i___1
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  BinaryOp: -
                                    Cast: 
                                      Typename: None, [], None
                                        PtrDecl: []
                                          TypeDecl: None, [], None
                                            IdentifierType: ['char_type']
                                      UnaryOp: &
                                        ArrayRef: 
                                          ID: d_buf
                                          Constant: int, 32767
                                    ID: stackp
                              If: 
                                UnaryOp: !
                                  BinaryOp: >
                                    ID: i___1
                                    Constant: int, 0
                                Compound: 
                                  Goto: while_break___4
                          Label: while_break___4
                            EmptyStatement: 
                      Compound: 
                        Compound: 
                          FuncCall: 
                            ID: memcpy
                            ExprList: 
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['void']
                                BinaryOp: +
                                  ID: outbuf
                                  ID: outpos
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['void']
                                ID: stackp
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['size_t']
                                ID: i___1
                          Assignment: +=
                            ID: outpos
                            ID: i___1
                    Assignment: =
                      ID: code
                      ID: free_ent
                    If: 
                      BinaryOp: <
                        ID: code
                        ID: maxmaxcode
                      Compound: 
                        Assignment: =
                          ArrayRef: 
                            ID: prev
                            ID: code
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'short']
                            ID: oldcode
                        Assignment: =
                          ArrayRef: 
                            ID: window
                            ID: code
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['char_type']
                            ID: finchar
                        Assignment: =
                          ID: free_ent
                          BinaryOp: +
                            ID: code
                            Constant: long int, 1L
                    Assignment: =
                      ID: oldcode
                      ID: incode
                Label: while_break___2
                  EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    ID: rsize
                    Constant: int, 0
                Compound: 
                  Goto: while_break___0
          Label: while_break___0
            EmptyStatement: 
        If: 
          UnaryOp: !
            ID: test
          Compound: 
            If: 
              BinaryOp: >
                ID: outpos
                Constant: int, 0
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: write_buf
                    ExprList: 
                      ID: out
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['voidp']
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                          ID: outbuf
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        ID: outpos
                  Assignment: =
                    ID: bytes_out
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['long']
                      BinaryOp: +
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          ID: bytes_out
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          ID: outpos
        Return: 
          Constant: int, 0
  Decl: lzw, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: in, [], [], [], []
          TypeDecl: in, [], None
            IdentifierType: ['int']
        Decl: out, [], [], [], []
          TypeDecl: out, [], None
            IdentifierType: ['int']
      TypeDecl: lzw, [], None
        IdentifierType: ['int']
  Decl: msg_done, [], [], ['static'], []
    TypeDecl: msg_done, [], None
      IdentifierType: ['int']
    Constant: int, 0
  FuncDef: 
    Decl: lzw, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: in, [], [], [], []
            TypeDecl: in, [], None
              IdentifierType: ['int']
          Decl: out, [], [], [], []
            TypeDecl: out, [], None
              IdentifierType: ['int']
        TypeDecl: lzw, [], None
          IdentifierType: ['int']
    Compound: 
      Compound: 
        If: 
          ID: msg_done
          Compound: 
            Return: 
              Constant: int, 1
        Compound: 
          Assignment: =
            ID: msg_done
            Constant: int, 1
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "output in compress .Z format not supported\n"
        If: 
          BinaryOp: !=
            ID: in
            ID: out
          Compound: 
            Assignment: =
              ID: exit_code
              Constant: int, 1
        Return: 
          Constant: int, 1
  Decl: ofname, [], [], [], []
    ArrayDecl: []
      TypeDecl: ofname, [], None
        IdentifierType: ['char']
      Constant: int, 1024
  Decl: abort_gzip, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: abort_gzip, [], None
        IdentifierType: ['void']
  Decl: copy, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: in, [], [], [], []
          TypeDecl: in, [], None
            IdentifierType: ['int']
        Decl: out, [], [], [], []
          TypeDecl: out, [], None
            IdentifierType: ['int']
      TypeDecl: copy, [], None
        IdentifierType: ['int']
  Decl: updcrc, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: s, [], [], [], []
          PtrDecl: []
            TypeDecl: s, [], None
              IdentifierType: ['uch']
        Decl: n, [], [], [], []
          TypeDecl: n, [], None
            IdentifierType: ['unsigned', 'int']
      TypeDecl: updcrc, [], None
        IdentifierType: ['ulg']
  Decl: clear_bufs, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: clear_bufs, [], None
        IdentifierType: ['void']
  Decl: flush_outbuf, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: flush_outbuf, [], None
        IdentifierType: ['void']
  Decl: strlwr, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: s, [], [], [], []
          PtrDecl: []
            TypeDecl: s, [], None
              IdentifierType: ['char']
      PtrDecl: []
        TypeDecl: strlwr, [], None
          IdentifierType: ['char']
  Decl: basename, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: fname, [], [], [], []
          PtrDecl: []
            TypeDecl: fname, [], None
              IdentifierType: ['char']
      PtrDecl: []
        TypeDecl: basename, [], None
          IdentifierType: ['char']
  Decl: add_envopt, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: argcp, [], [], [], []
          PtrDecl: []
            TypeDecl: argcp, [], None
              IdentifierType: ['int']
        Decl: argvp, [], [], [], []
          PtrDecl: []
            PtrDecl: []
              PtrDecl: []
                TypeDecl: argvp, [], None
                  IdentifierType: ['char']
        Decl: env___0, [], [], [], []
          PtrDecl: []
            TypeDecl: env___0, [], None
              IdentifierType: ['char']
      PtrDecl: []
        TypeDecl: add_envopt, [], None
          IdentifierType: ['char']
  Decl: write_error, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: write_error, [], None
        IdentifierType: ['void']
  Decl: display_ratio, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: num, [], [], [], []
          TypeDecl: num, [], None
            IdentifierType: ['long']
        Decl: den, [], [], [], []
          TypeDecl: den, [], None
            IdentifierType: ['long']
        Decl: file, [], [], [], []
          PtrDecl: []
            TypeDecl: file, [], None
              IdentifierType: ['FILE']
      TypeDecl: display_ratio, [], None
        IdentifierType: ['void']
  Decl: xmalloc, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: size, [], [], [], []
          TypeDecl: size, [], None
            IdentifierType: ['unsigned', 'int']
      TypeDecl: xmalloc, [], None
        IdentifierType: ['voidp']
  Decl: crc_32_tab, [], [], [], []
    ArrayDecl: []
      TypeDecl: crc_32_tab, [], None
        IdentifierType: ['ulg']
      Constant: int, 256
  FuncDef: 
    Decl: copy, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: in, [], [], [], []
            TypeDecl: in, [], None
              IdentifierType: ['int']
          Decl: out, [], [], [], []
            TypeDecl: out, [], None
              IdentifierType: ['int']
        TypeDecl: copy, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: tmp, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp, [], None
            IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___0, [], None
            IdentifierType: ['int']
      Compound: 
        Compound: 
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: __errno_location
          Assignment: =
            UnaryOp: *
              ID: tmp
            Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                BinaryOp: !=
                  ID: insize
                  Constant: unsigned int, 0U
                Compound: 
                  If: 
                    UnaryOp: !
                      BinaryOp: !=
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          ID: insize
                        UnaryOp: -
                          Constant: int, 1
                    Compound: 
                      Goto: while_break
                Compound: 
                  Goto: while_break
              Compound: 
                FuncCall: 
                  ID: write_buf
                  ExprList: 
                    ID: out
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['voidp']
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        ID: inbuf
                    ID: insize
                Assignment: +=
                  ID: bytes_out
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['long']
                    ID: insize
                Assignment: =
                  ID: insize
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'int']
                    FuncCall: 
                      ID: read
                      ExprList: 
                        ID: in
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['void']
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char']
                            ID: inbuf
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['size_t']
                          Constant: int, 32768
          Label: while_break
            EmptyStatement: 
        If: 
          BinaryOp: ==
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              ID: insize
            UnaryOp: -
              Constant: int, 1
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___0
                FuncCall: 
                  ID: __errno_location
            If: 
              BinaryOp: !=
                UnaryOp: *
                  ID: tmp___0
                Constant: int, 0
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: read_error
        Assignment: =
          ID: bytes_in
          ID: bytes_out
        Return: 
          Constant: int, 0
  Decl: crc, [], [], ['static'], []
    TypeDecl: crc, [], None
      IdentifierType: ['ulg']
    Cast: 
      Typename: None, [], None
        TypeDecl: None, [], None
          IdentifierType: ['ulg']
      Constant: long int, 4294967295L
  FuncDef: 
    Decl: updcrc, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: s, [], [], [], []
            PtrDecl: []
              TypeDecl: s, [], None
                IdentifierType: ['uch']
          Decl: n, [], [], [], []
            TypeDecl: n, [], None
              IdentifierType: ['unsigned', 'int']
        TypeDecl: updcrc, [], None
          IdentifierType: ['ulg']
    Compound: 
      Decl: c, [], [], ['register'], []
        TypeDecl: c, [], None
          IdentifierType: ['ulg']
      Decl: tmp, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp, [], None
            IdentifierType: ['uch']
      Compound: 
        If: 
          BinaryOp: ==
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: s
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Assignment: =
              ID: c
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ulg']
                Constant: long int, 4294967295L
          Compound: 
            Assignment: =
              ID: c
              ID: crc
            If: 
              ID: n
              Compound: 
                Compound: 
                  While: 
                    Constant: int, 1
                    Compound: 
                      Label: while_continue
                        EmptyStatement: 
                      Assignment: =
                        ID: tmp
                        ID: s
                      UnaryOp: p++
                        ID: s
                      Assignment: =
                        ID: c
                        BinaryOp: ^
                          ArrayRef: 
                            ID: crc_32_tab
                            BinaryOp: &
                              BinaryOp: ^
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  ID: c
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  UnaryOp: *
                                    ID: tmp
                              Constant: int, 255
                          BinaryOp: >>
                            ID: c
                            Constant: int, 8
                      UnaryOp: p--
                        ID: n
                      If: 
                        UnaryOp: !
                          ID: n
                        Compound: 
                          Goto: while_break
                  Label: while_break
                    EmptyStatement: 
        Assignment: =
          ID: crc
          ID: c
        Return: 
          BinaryOp: ^
            ID: c
            Constant: unsigned long int, 4294967295UL
  FuncDef: 
    Decl: clear_bufs, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: clear_bufs, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        Assignment: =
          ID: outcnt
          Constant: unsigned int, 0U
        Assignment: =
          ID: inptr
          Constant: unsigned int, 0U
        Assignment: =
          ID: insize
          ID: inptr
        Assignment: =
          ID: bytes_out
          Constant: long int, 0L
        Assignment: =
          ID: bytes_in
          ID: bytes_out
        Return: 
  FuncDef: 
    Decl: fill_inbuf, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: eof_ok, [], [], [], []
            TypeDecl: eof_ok, [], None
              IdentifierType: ['int']
        TypeDecl: fill_inbuf, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp, [], None
            IdentifierType: ['int']
      Compound: 
        Compound: 
          Assignment: =
            ID: insize
            Constant: unsigned int, 0U
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: __errno_location
          Assignment: =
            UnaryOp: *
              ID: tmp
            Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: len
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    FuncCall: 
                      ID: read
                      ExprList: 
                        ID: ifd
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['void']
                          BinaryOp: +
                            Cast: 
                              Typename: None, [], None
                                PtrDecl: []
                                  TypeDecl: None, [], None
                                    IdentifierType: ['char']
                              ID: inbuf
                            ID: insize
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['size_t']
                          BinaryOp: -
                            Constant: unsigned int, 32768U
                            ID: insize
              If: 
                BinaryOp: ==
                  ID: len
                  Constant: int, 0
                Compound: 
                  Goto: while_break
                Compound: 
                  If: 
                    BinaryOp: ==
                      ID: len
                      UnaryOp: -
                        Constant: int, 1
                    Compound: 
                      Goto: while_break
              Assignment: +=
                ID: insize
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  ID: len
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: insize
                    Constant: unsigned int, 32768U
                Compound: 
                  Goto: while_break
          Label: while_break
            EmptyStatement: 
        If: 
          BinaryOp: ==
            ID: insize
            Constant: unsigned int, 0U
          Compound: 
            If: 
              ID: eof_ok
              Compound: 
                Return: 
                  UnaryOp: -
                    Constant: int, 1
            Compound: 
              FuncCall: 
                ID: read_error
        Assignment: =
          ID: bytes_in
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['long']
            BinaryOp: +
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ulg']
                ID: bytes_in
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ulg']
                ID: insize
        Assignment: =
          ID: inptr
          Constant: unsigned int, 1U
        Return: 
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            ArrayRef: 
              ID: inbuf
              Constant: int, 0
  FuncDef: 
    Decl: flush_outbuf, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: flush_outbuf, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        If: 
          BinaryOp: ==
            ID: outcnt
            Constant: unsigned int, 0U
          Compound: 
            Return: 
        Compound: 
          FuncCall: 
            ID: write_buf
            ExprList: 
              ID: ofd
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['voidp']
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
                  ID: outbuf
              ID: outcnt
          Assignment: =
            ID: bytes_out
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['long']
              BinaryOp: +
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ulg']
                  ID: bytes_out
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ulg']
                  ID: outcnt
          Assignment: =
            ID: outcnt
            Constant: unsigned int, 0U
        Return: 
  FuncDef: 
    Decl: flush_window, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: flush_window, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        If: 
          BinaryOp: ==
            ID: outcnt
            Constant: unsigned int, 0U
          Compound: 
            Return: 
        Compound: 
          FuncCall: 
            ID: updcrc
            ExprList: 
              ID: window
              ID: outcnt
        If: 
          UnaryOp: !
            ID: test
          Compound: 
            Compound: 
              FuncCall: 
                ID: write_buf
                ExprList: 
                  ID: ofd
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['voidp']
                    Cast: 
                      Typename: None, [], None
                        PtrDecl: []
                          TypeDecl: None, [], None
                            IdentifierType: ['char']
                      ID: window
                  ID: outcnt
        Assignment: =
          ID: bytes_out
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['long']
            BinaryOp: +
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ulg']
                ID: bytes_out
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ulg']
                ID: outcnt
        Assignment: =
          ID: outcnt
          Constant: unsigned int, 0U
        Return: 
  FuncDef: 
    Decl: write_buf, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: fd, [], [], [], []
            TypeDecl: fd, [], None
              IdentifierType: ['int']
          Decl: buf, [], [], [], []
            TypeDecl: buf, [], None
              IdentifierType: ['voidp']
          Decl: cnt, [], [], [], []
            TypeDecl: cnt, [], None
              IdentifierType: ['unsigned', 'int']
        TypeDecl: write_buf, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: n
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'int']
                    FuncCall: 
                      ID: write
                      ExprList: 
                        ID: fd
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['void']
                          ID: buf
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['size_t']
                          ID: cnt
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    ID: n
                    ID: cnt
                Compound: 
                  Goto: while_break
              If: 
                BinaryOp: ==
                  ID: n
                  Constant: unsigned int, 4294967295U
                Compound: 
                  Compound: 
                    FuncCall: 
                      ID: write_error
              Assignment: -=
                ID: cnt
                ID: n
              Assignment: =
                ID: buf
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['voidp']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        PtrDecl: []
                          TypeDecl: None, [], None
                            IdentifierType: ['char']
                      ID: buf
                    ID: n
          Label: while_break
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: strlwr, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: s, [], [], [], []
            PtrDecl: []
              TypeDecl: s, [], None
                IdentifierType: ['char']
        PtrDecl: []
          TypeDecl: strlwr, [], None
            IdentifierType: ['char']
    Compound: 
      Decl: t, [], [], [], []
        PtrDecl: []
          TypeDecl: t, [], None
            IdentifierType: ['char']
      Decl: tmp___0, ['const'], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: tmp___0, ['const'], None
              IdentifierType: ['unsigned', 'short']
      Compound: 
        Assignment: =
          ID: t
          ID: s
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  UnaryOp: *
                    ID: t
                Compound: 
                  Goto: while_break
              Compound: 
                Assignment: =
                  ID: tmp___0
                  FuncCall: 
                    ID: __ctype_b_loc
              If: 
                BinaryOp: &
                  Cast: 
                    Typename: None, ['const'], None
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['int']
                    UnaryOp: *
                      BinaryOp: +
                        UnaryOp: *
                          ID: tmp___0
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          UnaryOp: *
                            ID: t
                  Constant: int, 256
                Compound: 
                  Assignment: =
                    UnaryOp: *
                      ID: t
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                      BinaryOp: +
                        BinaryOp: -
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            UnaryOp: *
                              ID: t
                          Constant: int, 65
                        Constant: int, 97
                Compound: 
                  Assignment: =
                    UnaryOp: *
                      ID: t
                    UnaryOp: *
                      ID: t
              UnaryOp: p++
                ID: t
          Label: while_break
            EmptyStatement: 
        Return: 
          ID: s
  FuncDef: 
    Decl: basename, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: fname, [], [], [], []
            PtrDecl: []
              TypeDecl: fname, [], None
                IdentifierType: ['char']
        PtrDecl: []
          TypeDecl: basename, [], None
            IdentifierType: ['char']
    Compound: 
      Decl: p, [], [], [], []
        PtrDecl: []
          TypeDecl: p, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: p
            FuncCall: 
              ID: strrchr
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: fname
                Constant: char, '/'
        If: 
          BinaryOp: !=
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: p
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Assignment: =
              ID: fname
              BinaryOp: +
                ID: p
                Constant: int, 1
        Return: 
          ID: fname
  FuncDef: 
    Decl: add_envopt, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: argcp, [], [], [], []
            PtrDecl: []
              TypeDecl: argcp, [], None
                IdentifierType: ['int']
          Decl: argvp, [], [], [], []
            PtrDecl: []
              PtrDecl: []
                PtrDecl: []
                  TypeDecl: argvp, [], None
                    IdentifierType: ['char']
          Decl: env___0, [], [], [], []
            PtrDecl: []
              TypeDecl: env___0, [], None
                IdentifierType: ['char']
        PtrDecl: []
          TypeDecl: add_envopt, [], None
            IdentifierType: ['char']
    Compound: 
      Decl: p, [], [], [], []
        PtrDecl: []
          TypeDecl: p, [], None
            IdentifierType: ['char']
      Decl: oargv, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: oargv, [], None
              IdentifierType: ['char']
      Decl: nargv, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: nargv, [], None
              IdentifierType: ['char']
      Decl: oargc, [], [], [], []
        TypeDecl: oargc, [], None
          IdentifierType: ['int']
      Decl: nargc, [], [], [], []
        TypeDecl: nargc, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp, [], None
            IdentifierType: ['char']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['size_t']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['size_t']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['size_t']
      Decl: tmp___4, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___4, [], None
            IdentifierType: ['char']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['int']
      Decl: tmp___7, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: tmp___7, [], None
              IdentifierType: ['char']
      Decl: tmp___8, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: tmp___8, [], None
              IdentifierType: ['char']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['size_t']
      Decl: tmp___10, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: tmp___10, [], None
              IdentifierType: ['char']
      Decl: tmp___11, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___11, [], None
            IdentifierType: ['char']
      Decl: tmp___12, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: tmp___12, [], None
              IdentifierType: ['char']
      Decl: tmp___13, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: tmp___13, [], None
              IdentifierType: ['char']
      Decl: tmp___14, [], [], [], []
        TypeDecl: tmp___14, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp25, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp25, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp26, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp26, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: oargc
            UnaryOp: *
              ID: argcp
          Assignment: =
            ID: nargc
            Constant: int, 0
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: getenv
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: env___0
          Assignment: =
            ID: env___0
            ID: tmp
        If: 
          BinaryOp: ==
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: env___0
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Return: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['void']
                  Constant: int, 0
        Compound: 
          Assignment: =
            ID: tmp___0
            FuncCall: 
              ID: strlen
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: env___0
          Assignment: =
            ID: p
            Cast: 
              Typename: None, [], None
                PtrDecl: []
                  TypeDecl: None, [], None
                    IdentifierType: ['char']
              FuncCall: 
                ID: xmalloc
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'int']
                    BinaryOp: +
                      ID: tmp___0
                      Constant: unsigned long int, 1UL
          Assignment: =
            ID: env___0
            FuncCall: 
              ID: strcpy
              ExprList: 
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
                  ID: p
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: env___0
          Assignment: =
            ID: p
            ID: env___0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  UnaryOp: *
                    ID: p
                Compound: 
                  Goto: while_break
              Compound: 
                Assignment: =
                  ID: tmp___2
                  FuncCall: 
                    ID: strspn
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: p
                      Constant: string, " \t"
                Assignment: +=
                  ID: p
                  ID: tmp___2
              If: 
                BinaryOp: ==
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    UnaryOp: *
                      ID: p
                  Constant: int, 0
                Compound: 
                  Goto: while_break
              Compound: 
                Assignment: =
                  ID: tmp___3
                  FuncCall: 
                    ID: strcspn
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: p
                      Constant: string, " \t"
                Assignment: +=
                  ID: p
                  ID: tmp___3
              If: 
                UnaryOp: *
                  ID: p
                Compound: 
                  Assignment: =
                    ID: tmp___4
                    ID: p
                  UnaryOp: p++
                    ID: p
                  Assignment: =
                    UnaryOp: *
                      ID: tmp___4
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                      Constant: char, '\000'
              UnaryOp: p++
                ID: nargc
          Label: while_break
            EmptyStatement: 
        If: 
          BinaryOp: ==
            ID: nargc
            Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: free
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    ID: env___0
            Return: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['void']
                  Constant: int, 0
        Compound: 
          Assignment: +=
            UnaryOp: *
              ID: argcp
            ID: nargc
          Assignment: =
            ID: nargv
            Cast: 
              Typename: None, [], None
                PtrDecl: []
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
              FuncCall: 
                ID: calloc
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['size_t']
                    BinaryOp: +
                      UnaryOp: *
                        ID: argcp
                      Constant: int, 1
                  UnaryOp: sizeof
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
        If: 
          BinaryOp: ==
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: nargv
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "out of memory"
        Assignment: =
          ID: oargv
          UnaryOp: *
            ID: argvp
        Assignment: =
          UnaryOp: *
            ID: argvp
          ID: nargv
        Assignment: =
          ID: tmp___6
          ID: oargc
        UnaryOp: p--
          ID: oargc
        If: 
          BinaryOp: <
            ID: tmp___6
            Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "argc<=0"
        Assignment: =
          ID: tmp___7
          ID: nargv
        UnaryOp: p++
          ID: nargv
        Assignment: =
          ID: tmp___8
          ID: oargv
        UnaryOp: p++
          ID: oargv
        Assignment: =
          UnaryOp: *
            ID: tmp___7
          UnaryOp: *
            ID: tmp___8
        Assignment: =
          ID: p
          ID: env___0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: >
                    ID: nargc
                    Constant: int, 0
                Compound: 
                  Goto: while_break___0
              Compound: 
                Assignment: =
                  ID: tmp___9
                  FuncCall: 
                    ID: strspn
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: p
                      Constant: string, " \t"
                Assignment: +=
                  ID: p
                  ID: tmp___9
                Assignment: =
                  ID: tmp___10
                  ID: nargv
                UnaryOp: p++
                  ID: nargv
                Assignment: =
                  UnaryOp: *
                    ID: tmp___10
                  ID: p
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___1
                      EmptyStatement: 
                    Assignment: =
                      ID: tmp___11
                      ID: p
                    UnaryOp: p++
                      ID: p
                    If: 
                      UnaryOp: !
                        UnaryOp: *
                          ID: tmp___11
                      Compound: 
                        Goto: while_break___1
                Label: while_break___1
                  EmptyStatement: 
              UnaryOp: p--
                ID: nargc
          Label: while_break___0
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___2
                EmptyStatement: 
              Assignment: =
                ID: tmp___14
                ID: oargc
              UnaryOp: p--
                ID: oargc
              If: 
                UnaryOp: !
                  ID: tmp___14
                Compound: 
                  Goto: while_break___2
              Assignment: =
                ID: tmp___12
                ID: nargv
              UnaryOp: p++
                ID: nargv
              Assignment: =
                ID: tmp___13
                ID: oargv
              UnaryOp: p++
                ID: oargv
              Assignment: =
                UnaryOp: *
                  ID: tmp___12
                UnaryOp: *
                  ID: tmp___13
          Label: while_break___2
            EmptyStatement: 
        Assignment: =
          UnaryOp: *
            ID: nargv
          Cast: 
            Typename: None, [], None
              PtrDecl: []
                TypeDecl: None, [], None
                  IdentifierType: ['char']
            Cast: 
              Typename: None, [], None
                PtrDecl: []
                  TypeDecl: None, [], None
                    IdentifierType: ['void']
              Constant: int, 0
        Return: 
          ID: env___0
  FuncDef: 
    Decl: error, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: m, [], [], [], []
            PtrDecl: []
              TypeDecl: m, [], None
                IdentifierType: ['char']
        TypeDecl: error, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        Compound: 
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "\n%s: %s: %s\n"
              ID: progname
              ID: ifname
              ID: m
          FuncCall: 
            ID: abort_gzip
        Return: 
  FuncDef: 
    Decl: read_error, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: read_error, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: tmp, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp, [], None
            IdentifierType: ['int']
      Compound: 
        Compound: 
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "\n%s: "
              ID: progname
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: __errno_location
        If: 
          BinaryOp: !=
            UnaryOp: *
              ID: tmp
            Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: perror
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: ifname
          Compound: 
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "%s: unexpected end of file\n"
                  ID: ifname
        Compound: 
          FuncCall: 
            ID: abort_gzip
        Return: 
  FuncDef: 
    Decl: write_error, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: write_error, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        Compound: 
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "\n%s: "
              ID: progname
          FuncCall: 
            ID: perror
            ExprList: 
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                ID: ofname
          FuncCall: 
            ID: abort_gzip
        Return: 
  FuncDef: 
    Decl: display_ratio, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: num, [], [], [], []
            TypeDecl: num, [], None
              IdentifierType: ['long']
          Decl: den, [], [], [], []
            TypeDecl: den, [], None
              IdentifierType: ['long']
          Decl: file, [], [], [], []
            PtrDecl: []
              TypeDecl: file, [], None
                IdentifierType: ['FILE']
        TypeDecl: display_ratio, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: ratio, [], [], [], []
        TypeDecl: ratio, [], None
          IdentifierType: ['long']
      Compound: 
        If: 
          BinaryOp: ==
            ID: den
            Constant: long int, 0L
          Compound: 
            Assignment: =
              ID: ratio
              Constant: long int, 0L
          Compound: 
            If: 
              BinaryOp: <
                ID: den
                Constant: long int, 2147483L
              Compound: 
                Assignment: =
                  ID: ratio
                  BinaryOp: /
                    BinaryOp: *
                      Constant: long int, 1000L
                      ID: num
                    ID: den
              Compound: 
                Assignment: =
                  ID: ratio
                  BinaryOp: /
                    ID: num
                    BinaryOp: /
                      ID: den
                      Constant: long int, 1000L
        If: 
          BinaryOp: <
            ID: ratio
            Constant: long int, 0L
          Compound: 
            Compound: 
              FuncCall: 
                ID: _IO_putc
                ExprList: 
                  Constant: char, '-'
                  ID: file
              Assignment: =
                ID: ratio
                UnaryOp: -
                  ID: ratio
          Compound: 
            Compound: 
              FuncCall: 
                ID: _IO_putc
                ExprList: 
                  Constant: char, ' '
                  ID: file
        Compound: 
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: file
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "%2ld.%1ld%%"
              BinaryOp: /
                ID: ratio
                Constant: long int, 10L
              BinaryOp: %
                ID: ratio
                Constant: long int, 10L
        Return: 
  FuncDef: 
    Decl: xmalloc, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: size, [], [], [], []
            TypeDecl: size, [], None
              IdentifierType: ['unsigned', 'int']
        TypeDecl: xmalloc, [], None
          IdentifierType: ['voidp']
    Compound: 
      Decl: cp, [], [], [], []
        TypeDecl: cp, [], None
          IdentifierType: ['voidp']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['voidp']
      Decl: __cil_tmp4, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp4, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: malloc
              ExprList: 
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['size_t']
                  ID: size
          Assignment: =
            ID: cp
            ID: tmp
        If: 
          BinaryOp: ==
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: cp
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "out of memory"
        Return: 
          ID: cp
  Decl: crc_32_tab, [], [], [], []
    ArrayDecl: []
      TypeDecl: crc_32_tab, [], None
        IdentifierType: ['ulg']
      Constant: int, 256
    InitList: 
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 0L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1996959894L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3993919788L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2567524794L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 124634137L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1886057615L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3915621685L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2657392035L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 249268274L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2044508324L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3772115230L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2547177864L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 162941995L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2125561021L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3887607047L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2428444049L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 498536548L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1789927666L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4089016648L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2227061214L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 450548861L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1843258603L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4107580753L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2211677639L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 325883990L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1684777152L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4251122042L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2321926636L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 335633487L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1661365465L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4195302755L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2366115317L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 997073096L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1281953886L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3579855332L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2724688242L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1006888145L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1258607687L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3524101629L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2768942443L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 901097722L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1119000684L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3686517206L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2898065728L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 853044451L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1172266101L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3705015759L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2882616665L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 651767980L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1373503546L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3369554304L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3218104598L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 565507253L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1454621731L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3485111705L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3099436303L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 671266974L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1594198024L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3322730930L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2970347812L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 795835527L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1483230225L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3244367275L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3060149565L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1994146192L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 31158534L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2563907772L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4023717930L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1907459465L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 112637215L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2680153253L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3904427059L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2013776290L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 251722036L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2517215374L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3775830040L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2137656763L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 141376813L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2439277719L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3865271297L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1802195444L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 476864866L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2238001368L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4066508878L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1812370925L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 453092731L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2181625025L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4111451223L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1706088902L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 314042704L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2344532202L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4240017532L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1658658271L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 366619977L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2362670323L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4224994405L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1303535960L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 984961486L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2747007092L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3569037538L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1256170817L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1037604311L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2765210733L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3554079995L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1131014506L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 879679996L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2909243462L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3663771856L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1141124467L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 855842277L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2852801631L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3708648649L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1342533948L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 654459306L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3188396048L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3373015174L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1466479909L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 544179635L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3110523913L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3462522015L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1591671054L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 702138776L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2966460450L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3352799412L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1504918807L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 783551873L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3082640443L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3233442989L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3988292384L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2596254646L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 62317068L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1957810842L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3939845945L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2647816111L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 81470997L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1943803523L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3814918930L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2489596804L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 225274430L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2053790376L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3826175755L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2466906013L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 167816743L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2097651377L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4027552580L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2265490386L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 503444072L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1762050814L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4150417245L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2154129355L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 426522225L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1852507879L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4275313526L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2312317920L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 282753626L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1742555852L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4189708143L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2394877945L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 397917763L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1622183637L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3604390888L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2714866558L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 953729732L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1340076626L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3518719985L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2797360999L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1068828381L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1219638859L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3624741850L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2936675148L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 906185462L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1090812512L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3747672003L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2825379669L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 829329135L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1181335161L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3412177804L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3160834842L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 628085408L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1382605366L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3423369109L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3138078467L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 570562233L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1426400815L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3317316542L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2998733608L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 733239954L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1555261956L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3268935591L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3050360625L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 752459403L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1541320221L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2607071920L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3965973030L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1969922972L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 40735498L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2617837225L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3943577151L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1913087877L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 83908371L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2512341634L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3803740692L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2075208622L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 213261112L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2463272603L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3855990285L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2094854071L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 198958881L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2262029012L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4057260610L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1759359992L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 534414190L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2176718541L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4139329115L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1873836001L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 414664567L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2282248934L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4279200368L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1711684554L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 285281116L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2405801727L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 4167216745L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1634467795L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 376229701L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2685067896L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3608007406L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1308918612L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 956543938L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2808555105L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3495958263L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1231636301L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1047427035L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2932959818L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3654703836L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1088359270L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 936918000L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 2847714899L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3736837829L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1202900863L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 817233897L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3183342108L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3401237130L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1404277552L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 615818150L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3134207493L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3453421203L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1423857449L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 601450431L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3009837614L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3294710456L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1567103746L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 711928724L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3020668471L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 3272380065L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 1510334235L
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ulg']
        Constant: long int, 755167117L
  Decl: inflate, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: inflate, [], None
        IdentifierType: ['int']
  Decl: huft_build, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: b, [], [], [], []
          PtrDecl: []
            TypeDecl: b, [], None
              IdentifierType: ['unsigned', 'int']
        Decl: n, [], [], [], []
          TypeDecl: n, [], None
            IdentifierType: ['unsigned', 'int']
        Decl: s, [], [], [], []
          TypeDecl: s, [], None
            IdentifierType: ['unsigned', 'int']
        Decl: d, [], [], [], []
          PtrDecl: []
            TypeDecl: d, [], None
              IdentifierType: ['ush']
        Decl: e, [], [], [], []
          PtrDecl: []
            TypeDecl: e, [], None
              IdentifierType: ['ush']
        Decl: t, [], [], [], []
          PtrDecl: []
            PtrDecl: []
              TypeDecl: t, [], None
                Struct: huft
        Decl: m, [], [], [], []
          PtrDecl: []
            TypeDecl: m, [], None
              IdentifierType: ['int']
      TypeDecl: huft_build, [], None
        IdentifierType: ['int']
  Decl: huft_free, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: t, [], [], [], []
          PtrDecl: []
            TypeDecl: t, [], None
              Struct: huft
      TypeDecl: huft_free, [], None
        IdentifierType: ['int']
  Decl: inflate_codes, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: tl, [], [], [], []
          PtrDecl: []
            TypeDecl: tl, [], None
              Struct: huft
        Decl: td, [], [], [], []
          PtrDecl: []
            TypeDecl: td, [], None
              Struct: huft
        Decl: bl, [], [], [], []
          TypeDecl: bl, [], None
            IdentifierType: ['int']
        Decl: bd, [], [], [], []
          TypeDecl: bd, [], None
            IdentifierType: ['int']
      TypeDecl: inflate_codes, [], None
        IdentifierType: ['int']
  Decl: inflate_stored, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: inflate_stored, [], None
        IdentifierType: ['int']
  Decl: inflate_fixed, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: inflate_fixed, [], None
        IdentifierType: ['int']
  Decl: inflate_dynamic, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: inflate_dynamic, [], None
        IdentifierType: ['int']
  Decl: inflate_block, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: e, [], [], [], []
          PtrDecl: []
            TypeDecl: e, [], None
              IdentifierType: ['int']
      TypeDecl: inflate_block, [], None
        IdentifierType: ['int']
  Decl: border, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: border, [], None
        IdentifierType: ['unsigned', 'int']
      Constant: int, 19
    InitList: 
      Constant: unsigned int, 16U
      Constant: unsigned int, 17U
      Constant: unsigned int, 18U
      Constant: unsigned int, 0U
      Constant: unsigned int, 8U
      Constant: unsigned int, 7U
      Constant: unsigned int, 9U
      Constant: unsigned int, 6U
      Constant: unsigned int, 10U
      Constant: unsigned int, 5U
      Constant: unsigned int, 11U
      Constant: unsigned int, 4U
      Constant: unsigned int, 12U
      Constant: unsigned int, 3U
      Constant: unsigned int, 13U
      Constant: unsigned int, 2U
      Constant: unsigned int, 14U
      Constant: unsigned int, 1U
      Constant: unsigned int, 15U
  Decl: cplens, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: cplens, [], None
        IdentifierType: ['ush']
      Constant: int, 31
    InitList: 
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 5
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 6
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 7
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 8
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 9
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 10
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 11
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 13
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 15
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 17
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 19
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 23
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 27
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 31
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 35
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 43
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 51
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 59
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 67
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 83
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 99
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 115
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 131
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 163
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 195
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 227
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 258
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
  Decl: cplext, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: cplext, [], None
        IdentifierType: ['ush']
      Constant: int, 31
    InitList: 
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 2
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 2
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 2
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 2
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 5
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 5
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 5
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 5
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 99
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 99
  Decl: cpdist, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: cpdist, [], None
        IdentifierType: ['ush']
      Constant: int, 30
    InitList: 
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 2
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 5
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 7
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 9
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 13
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 17
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 25
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 33
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 49
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 65
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 97
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 129
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 193
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 257
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 385
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 513
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 769
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1025
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1537
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 2049
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3073
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4097
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 6145
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 8193
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 12289
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 16385
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 24577
  Decl: cpdext, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: cpdext, [], None
        IdentifierType: ['ush']
      Constant: int, 30
    InitList: 
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 2
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 2
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 5
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 5
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 6
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 6
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 7
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 7
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 8
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 8
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 9
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 9
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 10
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 10
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 11
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 11
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 12
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 12
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 13
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 13
  Decl: bb, [], [], [], []
    TypeDecl: bb, [], None
      IdentifierType: ['ulg']
  Decl: bk, [], [], [], []
    TypeDecl: bk, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: mask_bits, [], [], [], []
    ArrayDecl: []
      TypeDecl: mask_bits, [], None
        IdentifierType: ['ush']
      Constant: int, 17
    InitList: 
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 7
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 15
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 31
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 63
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 127
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 255
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 511
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 1023
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 2047
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 4095
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 8191
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 16383
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 32767
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['ush']
        Constant: int, 65535
  Decl: lbits, [], [], [], []
    TypeDecl: lbits, [], None
      IdentifierType: ['int']
    Constant: int, 9
  Decl: dbits, [], [], [], []
    TypeDecl: dbits, [], None
      IdentifierType: ['int']
    Constant: int, 6
  Decl: hufts, [], [], [], []
    TypeDecl: hufts, [], None
      IdentifierType: ['unsigned', 'int']
  FuncDef: 
    Decl: huft_build, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: b, [], [], [], []
            PtrDecl: []
              TypeDecl: b, [], None
                IdentifierType: ['unsigned', 'int']
          Decl: n, [], [], [], []
            TypeDecl: n, [], None
              IdentifierType: ['unsigned', 'int']
          Decl: s, [], [], [], []
            TypeDecl: s, [], None
              IdentifierType: ['unsigned', 'int']
          Decl: d, [], [], [], []
            PtrDecl: []
              TypeDecl: d, [], None
                IdentifierType: ['ush']
          Decl: e, [], [], [], []
            PtrDecl: []
              TypeDecl: e, [], None
                IdentifierType: ['ush']
          Decl: t, [], [], [], []
            PtrDecl: []
              PtrDecl: []
                TypeDecl: t, [], None
                  Struct: huft
          Decl: m, [], [], [], []
            PtrDecl: []
              TypeDecl: m, [], None
                IdentifierType: ['int']
        TypeDecl: huft_build, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: a, [], [], [], []
        TypeDecl: a, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: c, [], [], [], []
        ArrayDecl: []
          TypeDecl: c, [], None
            IdentifierType: ['unsigned', 'int']
          Constant: int, 17
      Decl: f, [], [], [], []
        TypeDecl: f, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: g, [], [], [], []
        TypeDecl: g, [], None
          IdentifierType: ['int']
      Decl: h, [], [], [], []
        TypeDecl: h, [], None
          IdentifierType: ['int']
      Decl: i___0, [], [], ['register'], []
        TypeDecl: i___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: j___0, [], [], ['register'], []
        TypeDecl: j___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: k, [], [], ['register'], []
        TypeDecl: k, [], None
          IdentifierType: ['int']
      Decl: l, [], [], [], []
        TypeDecl: l, [], None
          IdentifierType: ['int']
      Decl: p, [], [], ['register'], []
        PtrDecl: []
          TypeDecl: p, [], None
            IdentifierType: ['unsigned', 'int']
      Decl: q, [], [], ['register'], []
        PtrDecl: []
          TypeDecl: q, [], None
            Struct: huft
      Decl: r, [], [], [], []
        TypeDecl: r, [], None
          Struct: huft
      Decl: u, [], [], [], []
        ArrayDecl: []
          PtrDecl: []
            TypeDecl: u, [], None
              Struct: huft
          Constant: int, 16
      Decl: v, [], [], [], []
        ArrayDecl: []
          TypeDecl: v, [], None
            IdentifierType: ['unsigned', 'int']
          Constant: int, 288
      Decl: w, [], [], ['register'], []
        TypeDecl: w, [], None
          IdentifierType: ['int']
      Decl: x, [], [], [], []
        ArrayDecl: []
          TypeDecl: x, [], None
            IdentifierType: ['unsigned', 'int']
          Constant: int, 17
      Decl: xp, [], [], [], []
        PtrDecl: []
          TypeDecl: xp, [], None
            IdentifierType: ['unsigned', 'int']
      Decl: y, [], [], [], []
        TypeDecl: y, [], None
          IdentifierType: ['int']
      Decl: z, [], [], [], []
        TypeDecl: z, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp, [], None
            IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___0, [], None
            IdentifierType: ['unsigned', 'int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___2, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___2, [], None
            IdentifierType: ['unsigned', 'int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___5, [], None
            IdentifierType: ['unsigned', 'int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp36, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp36, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp37, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp37, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp38, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp38, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp39, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp39, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp40, [], [], [], []
        TypeDecl: __cil_tmp40, [], None
          IdentifierType: ['int']
      Compound: 
        Compound: 
          FuncCall: 
            ID: memset
            ExprList: 
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['voidp']
                ID: c
              Constant: int, 0
              UnaryOp: sizeof
                ID: c
          Assignment: =
            ID: p
            ID: b
          Assignment: =
            ID: i___0
            ID: n
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              UnaryOp: p++
                ArrayRef: 
                  ID: c
                  UnaryOp: *
                    ID: p
              UnaryOp: p++
                ID: p
              UnaryOp: p--
                ID: i___0
              If: 
                UnaryOp: !
                  ID: i___0
                Compound: 
                  Goto: while_break
          Label: while_break
            EmptyStatement: 
        If: 
          BinaryOp: ==
            ArrayRef: 
              ID: c
              Constant: int, 0
            ID: n
          Compound: 
            Assignment: =
              UnaryOp: *
                ID: t
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      Struct: huft
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['void']
                  Constant: int, 0
            Assignment: =
              UnaryOp: *
                ID: m
              Constant: int, 0
            Return: 
              Constant: int, 0
        Assignment: =
          ID: l
          UnaryOp: *
            ID: m
        Assignment: =
          ID: j___0
          Constant: unsigned int, 1U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: j___0
                    Constant: unsigned int, 16U
                Compound: 
                  Goto: while_break___0
              If: 
                ArrayRef: 
                  ID: c
                  ID: j___0
                Compound: 
                  Goto: while_break___0
              UnaryOp: p++
                ID: j___0
          Label: while_break___0
            EmptyStatement: 
        Assignment: =
          ID: k
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            ID: j___0
        If: 
          BinaryOp: <
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              ID: l
            ID: j___0
          Compound: 
            Assignment: =
              ID: l
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ID: j___0
        Assignment: =
          ID: i___0
          Constant: unsigned int, 16U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              If: 
                UnaryOp: !
                  ID: i___0
                Compound: 
                  Goto: while_break___1
              If: 
                ArrayRef: 
                  ID: c
                  ID: i___0
                Compound: 
                  Goto: while_break___1
              UnaryOp: p--
                ID: i___0
          Label: while_break___1
            EmptyStatement: 
        Assignment: =
          ID: g
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            ID: i___0
        If: 
          BinaryOp: >
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              ID: l
            ID: i___0
          Compound: 
            Assignment: =
              ID: l
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ID: i___0
        Assignment: =
          UnaryOp: *
            ID: m
          ID: l
        Assignment: =
          ID: y
          BinaryOp: <<
            Constant: int, 1
            ID: j___0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___2
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: j___0
                    ID: i___0
                Compound: 
                  Goto: while_break___2
              Assignment: =
                ID: y
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: y
                    ArrayRef: 
                      ID: c
                      ID: j___0
              If: 
                BinaryOp: <
                  ID: y
                  Constant: int, 0
                Compound: 
                  Return: 
                    Constant: int, 2
              UnaryOp: p++
                ID: j___0
              Assignment: <<=
                ID: y
                Constant: int, 1
          Label: while_break___2
            EmptyStatement: 
        Assignment: =
          ID: y
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            BinaryOp: -
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'int']
                ID: y
              ArrayRef: 
                ID: c
                ID: i___0
        If: 
          BinaryOp: <
            ID: y
            Constant: int, 0
          Compound: 
            Return: 
              Constant: int, 2
        Assignment: +=
          ArrayRef: 
            ID: c
            ID: i___0
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            ID: y
        Assignment: =
          ID: j___0
          Constant: unsigned int, 0U
        Assignment: =
          ArrayRef: 
            ID: x
            Constant: int, 1
          ID: j___0
        Assignment: =
          ID: p
          BinaryOp: +
            ID: c
            Constant: int, 1
        Assignment: =
          ID: xp
          BinaryOp: +
            ID: x
            Constant: int, 2
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___3
                EmptyStatement: 
              UnaryOp: p--
                ID: i___0
              If: 
                UnaryOp: !
                  ID: i___0
                Compound: 
                  Goto: while_break___3
              Assignment: =
                ID: tmp
                ID: xp
              UnaryOp: p++
                ID: xp
              Assignment: =
                ID: tmp___0
                ID: p
              UnaryOp: p++
                ID: p
              Assignment: +=
                ID: j___0
                UnaryOp: *
                  ID: tmp___0
              Assignment: =
                UnaryOp: *
                  ID: tmp
                ID: j___0
          Label: while_break___3
            EmptyStatement: 
        Assignment: =
          ID: p
          ID: b
        Assignment: =
          ID: i___0
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___4
                EmptyStatement: 
              Assignment: =
                ID: tmp___2
                ID: p
              UnaryOp: p++
                ID: p
              Assignment: =
                ID: j___0
                UnaryOp: *
                  ID: tmp___2
              If: 
                BinaryOp: !=
                  ID: j___0
                  Constant: unsigned int, 0U
                Compound: 
                  Assignment: =
                    ID: tmp___1
                    ArrayRef: 
                      ID: x
                      ID: j___0
                  UnaryOp: p++
                    ArrayRef: 
                      ID: x
                      ID: j___0
                  Assignment: =
                    ArrayRef: 
                      ID: v
                      ID: tmp___1
                    ID: i___0
              UnaryOp: p++
                ID: i___0
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: i___0
                    ID: n
                Compound: 
                  Goto: while_break___4
          Label: while_break___4
            EmptyStatement: 
        Assignment: =
          ID: i___0
          Constant: unsigned int, 0U
        Assignment: =
          ArrayRef: 
            ID: x
            Constant: int, 0
          ID: i___0
        Assignment: =
          ID: p
          ID: v
        Assignment: =
          ID: h
          UnaryOp: -
            Constant: int, 1
        Assignment: =
          ID: w
          UnaryOp: -
            ID: l
        Assignment: =
          ArrayRef: 
            ID: u
            Constant: int, 0
          Cast: 
            Typename: None, [], None
              PtrDecl: []
                TypeDecl: None, [], None
                  Struct: huft
            Cast: 
              Typename: None, [], None
                PtrDecl: []
                  TypeDecl: None, [], None
                    IdentifierType: ['void']
              Constant: int, 0
        Assignment: =
          ID: q
          Cast: 
            Typename: None, [], None
              PtrDecl: []
                TypeDecl: None, [], None
                  Struct: huft
            Cast: 
              Typename: None, [], None
                PtrDecl: []
                  TypeDecl: None, [], None
                    IdentifierType: ['void']
              Constant: int, 0
        Assignment: =
          ID: z
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___5
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: k
                    ID: g
                Compound: 
                  Goto: while_break___5
              Assignment: =
                ID: a
                ArrayRef: 
                  ID: c
                  ID: k
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___6
                      EmptyStatement: 
                    Assignment: =
                      ID: tmp___6
                      ID: a
                    UnaryOp: p--
                      ID: a
                    If: 
                      UnaryOp: !
                        ID: tmp___6
                      Compound: 
                        Goto: while_break___6
                    Compound: 
                      While: 
                        Constant: int, 1
                        Compound: 
                          Label: while_continue___7
                            EmptyStatement: 
                          If: 
                            UnaryOp: !
                              BinaryOp: >
                                ID: k
                                BinaryOp: +
                                  ID: w
                                  ID: l
                            Compound: 
                              Goto: while_break___7
                          UnaryOp: p++
                            ID: h
                          Assignment: +=
                            ID: w
                            ID: l
                          Assignment: =
                            ID: z
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              BinaryOp: -
                                ID: g
                                ID: w
                          If: 
                            BinaryOp: >
                              ID: z
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                ID: l
                            Compound: 
                              Assignment: =
                                ID: z
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['unsigned', 'int']
                                  ID: l
                            Compound: 
                              Assignment: =
                                ID: z
                                ID: z
                          Assignment: =
                            ID: j___0
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              BinaryOp: -
                                ID: k
                                ID: w
                          Assignment: =
                            ID: f
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              BinaryOp: <<
                                Constant: int, 1
                                ID: j___0
                          If: 
                            BinaryOp: >
                              ID: f
                              BinaryOp: +
                                ID: a
                                Constant: unsigned int, 1U
                            Compound: 
                              Assignment: -=
                                ID: f
                                BinaryOp: +
                                  ID: a
                                  Constant: unsigned int, 1U
                              Assignment: =
                                ID: xp
                                BinaryOp: +
                                  ID: c
                                  ID: k
                              Compound: 
                                While: 
                                  Constant: int, 1
                                  Compound: 
                                    Label: while_continue___8
                                      EmptyStatement: 
                                    UnaryOp: p++
                                      ID: j___0
                                    If: 
                                      UnaryOp: !
                                        BinaryOp: <
                                          ID: j___0
                                          ID: z
                                      Compound: 
                                        Goto: while_break___8
                                    Assignment: <<=
                                      ID: f
                                      Constant: int, 1
                                    UnaryOp: p++
                                      ID: xp
                                    If: 
                                      BinaryOp: <=
                                        ID: f
                                        UnaryOp: *
                                          ID: xp
                                      Compound: 
                                        Goto: while_break___8
                                    Assignment: -=
                                      ID: f
                                      UnaryOp: *
                                        ID: xp
                                Label: while_break___8
                                  EmptyStatement: 
                          Compound: 
                            Assignment: =
                              ID: z
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                BinaryOp: <<
                                  Constant: int, 1
                                  ID: j___0
                            Assignment: =
                              ID: q
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      Struct: huft
                                FuncCall: 
                                  ID: malloc
                                  ExprList: 
                                    BinaryOp: *
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['unsigned', 'long']
                                        BinaryOp: +
                                          ID: z
                                          Constant: unsigned int, 1U
                                      UnaryOp: sizeof
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            Struct: huft
                          If: 
                            BinaryOp: ==
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'long']
                                ID: q
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'long']
                                Cast: 
                                  Typename: None, [], None
                                    PtrDecl: []
                                      TypeDecl: None, [], None
                                        Struct: huft
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['void']
                                    Constant: int, 0
                            Compound: 
                              If: 
                                ID: h
                                Compound: 
                                  Compound: 
                                    FuncCall: 
                                      ID: huft_free
                                      ExprList: 
                                        ArrayRef: 
                                          ID: u
                                          Constant: int, 0
                              Return: 
                                Constant: int, 3
                          Assignment: +=
                            ID: hufts
                            BinaryOp: +
                              ID: z
                              Constant: unsigned int, 1U
                          Assignment: =
                            UnaryOp: *
                              ID: t
                            BinaryOp: +
                              ID: q
                              Constant: int, 1
                          Assignment: =
                            ID: t
                            UnaryOp: &
                              StructRef: .
                                StructRef: ->
                                  ID: q
                                  ID: v
                                ID: t
                          Assignment: =
                            UnaryOp: *
                              ID: t
                            Cast: 
                              Typename: None, [], None
                                PtrDecl: []
                                  TypeDecl: None, [], None
                                    Struct: huft
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['void']
                                Constant: int, 0
                          UnaryOp: p++
                            ID: q
                          Assignment: =
                            ArrayRef: 
                              ID: u
                              ID: h
                            ID: q
                          If: 
                            ID: h
                            Compound: 
                              Assignment: =
                                ArrayRef: 
                                  ID: x
                                  ID: h
                                ID: i___0
                              Assignment: =
                                StructRef: .
                                  ID: r
                                  ID: b
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['uch']
                                  ID: l
                              Assignment: =
                                StructRef: .
                                  ID: r
                                  ID: e
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['uch']
                                  BinaryOp: +
                                    Constant: unsigned int, 16U
                                    ID: j___0
                              Assignment: =
                                StructRef: .
                                  StructRef: .
                                    ID: r
                                    ID: v
                                  ID: t
                                ID: q
                              Assignment: =
                                ID: j___0
                                BinaryOp: >>
                                  ID: i___0
                                  BinaryOp: -
                                    ID: w
                                    ID: l
                              Assignment: =
                                UnaryOp: *
                                  BinaryOp: +
                                    ArrayRef: 
                                      ID: u
                                      BinaryOp: -
                                        ID: h
                                        Constant: int, 1
                                    ID: j___0
                                ID: r
                      Label: while_break___7
                        EmptyStatement: 
                    Assignment: =
                      StructRef: .
                        ID: r
                        ID: b
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['uch']
                        BinaryOp: -
                          ID: k
                          ID: w
                    If: 
                      BinaryOp: >=
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'long']
                          ID: p
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'long']
                          BinaryOp: +
                            ID: v
                            ID: n
                      Compound: 
                        Assignment: =
                          StructRef: .
                            ID: r
                            ID: e
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['uch']
                            Constant: int, 99
                      Compound: 
                        If: 
                          BinaryOp: <
                            UnaryOp: *
                              ID: p
                            ID: s
                          Compound: 
                            If: 
                              BinaryOp: <
                                UnaryOp: *
                                  ID: p
                                Constant: unsigned int, 256U
                              Compound: 
                                Assignment: =
                                  ID: tmp___4
                                  Constant: int, 16
                              Compound: 
                                Assignment: =
                                  ID: tmp___4
                                  Constant: int, 15
                            Assignment: =
                              StructRef: .
                                ID: r
                                ID: e
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['uch']
                                ID: tmp___4
                            Assignment: =
                              StructRef: .
                                StructRef: .
                                  ID: r
                                  ID: v
                                ID: n
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                UnaryOp: *
                                  ID: p
                            UnaryOp: p++
                              ID: p
                          Compound: 
                            Assignment: =
                              StructRef: .
                                ID: r
                                ID: e
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['uch']
                                UnaryOp: *
                                  BinaryOp: +
                                    ID: e
                                    BinaryOp: -
                                      UnaryOp: *
                                        ID: p
                                      ID: s
                            Assignment: =
                              ID: tmp___5
                              ID: p
                            UnaryOp: p++
                              ID: p
                            Assignment: =
                              StructRef: .
                                StructRef: .
                                  ID: r
                                  ID: v
                                ID: n
                              UnaryOp: *
                                BinaryOp: +
                                  ID: d
                                  BinaryOp: -
                                    UnaryOp: *
                                      ID: tmp___5
                                    ID: s
                    Assignment: =
                      ID: f
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        BinaryOp: <<
                          Constant: int, 1
                          BinaryOp: -
                            ID: k
                            ID: w
                    Assignment: =
                      ID: j___0
                      BinaryOp: >>
                        ID: i___0
                        ID: w
                    Compound: 
                      While: 
                        Constant: int, 1
                        Compound: 
                          Label: while_continue___9
                            EmptyStatement: 
                          If: 
                            UnaryOp: !
                              BinaryOp: <
                                ID: j___0
                                ID: z
                            Compound: 
                              Goto: while_break___9
                          Assignment: =
                            UnaryOp: *
                              BinaryOp: +
                                ID: q
                                ID: j___0
                            ID: r
                          Assignment: +=
                            ID: j___0
                            ID: f
                      Label: while_break___9
                        EmptyStatement: 
                    Assignment: =
                      ID: j___0
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        BinaryOp: <<
                          Constant: int, 1
                          BinaryOp: -
                            ID: k
                            Constant: int, 1
                    Compound: 
                      While: 
                        Constant: int, 1
                        Compound: 
                          Label: while_continue___10
                            EmptyStatement: 
                          If: 
                            UnaryOp: !
                              BinaryOp: &
                                ID: i___0
                                ID: j___0
                            Compound: 
                              Goto: while_break___10
                          Assignment: ^=
                            ID: i___0
                            ID: j___0
                          Assignment: >>=
                            ID: j___0
                            Constant: int, 1
                      Label: while_break___10
                        EmptyStatement: 
                    Assignment: ^=
                      ID: i___0
                      ID: j___0
                    Compound: 
                      While: 
                        Constant: int, 1
                        Compound: 
                          Label: while_continue___11
                            EmptyStatement: 
                          If: 
                            UnaryOp: !
                              BinaryOp: !=
                                BinaryOp: &
                                  ID: i___0
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['unsigned', 'int']
                                    BinaryOp: -
                                      BinaryOp: <<
                                        Constant: int, 1
                                        ID: w
                                      Constant: int, 1
                                ArrayRef: 
                                  ID: x
                                  ID: h
                            Compound: 
                              Goto: while_break___11
                          UnaryOp: p--
                            ID: h
                          Assignment: -=
                            ID: w
                            ID: l
                      Label: while_break___11
                        EmptyStatement: 
                Label: while_break___6
                  EmptyStatement: 
              UnaryOp: p++
                ID: k
          Label: while_break___5
            EmptyStatement: 
        If: 
          BinaryOp: !=
            ID: y
            Constant: int, 0
          Compound: 
            If: 
              BinaryOp: !=
                ID: g
                Constant: int, 1
              Compound: 
                Assignment: =
                  ID: tmp___7
                  Constant: int, 1
              Compound: 
                Assignment: =
                  ID: tmp___7
                  Constant: int, 0
          Compound: 
            Assignment: =
              ID: tmp___7
              Constant: int, 0
        Return: 
          ID: tmp___7
  FuncDef: 
    Decl: huft_free, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: t, [], [], [], []
            PtrDecl: []
              TypeDecl: t, [], None
                Struct: huft
        TypeDecl: huft_free, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: p, [], [], ['register'], []
        PtrDecl: []
          TypeDecl: p, [], None
            Struct: huft
      Decl: q, [], [], ['register'], []
        PtrDecl: []
          TypeDecl: q, [], None
            Struct: huft
      Compound: 
        Assignment: =
          ID: p
          ID: t
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      ID: p
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              Struct: huft
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['void']
                          Constant: int, 0
                Compound: 
                  Goto: while_break
              Compound: 
                UnaryOp: p--
                  ID: p
                Assignment: =
                  ID: q
                  StructRef: .
                    StructRef: ->
                      ID: p
                      ID: v
                    ID: t
                FuncCall: 
                  ID: free
                  ExprList: 
                    Cast: 
                      Typename: None, [], None
                        PtrDecl: []
                          TypeDecl: None, [], None
                            IdentifierType: ['void']
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        ID: p
                Assignment: =
                  ID: p
                  ID: q
          Label: while_break
            EmptyStatement: 
        Return: 
          Constant: int, 0
  FuncDef: 
    Decl: inflate_codes, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: tl, [], [], [], []
            PtrDecl: []
              TypeDecl: tl, [], None
                Struct: huft
          Decl: td, [], [], [], []
            PtrDecl: []
              TypeDecl: td, [], None
                Struct: huft
          Decl: bl, [], [], [], []
            TypeDecl: bl, [], None
              IdentifierType: ['int']
          Decl: bd, [], [], [], []
            TypeDecl: bd, [], None
              IdentifierType: ['int']
        TypeDecl: inflate_codes, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: e, [], [], ['register'], []
        TypeDecl: e, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: d, [], [], [], []
        TypeDecl: d, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: w, [], [], [], []
        TypeDecl: w, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: t, [], [], [], []
        PtrDecl: []
          TypeDecl: t, [], None
            Struct: huft
      Decl: ml, [], [], [], []
        TypeDecl: ml, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: md, [], [], [], []
        TypeDecl: md, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: b, [], [], ['register'], []
        TypeDecl: b, [], None
          IdentifierType: ['ulg']
      Decl: k, [], [], ['register'], []
        TypeDecl: k, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['int']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___10, [], [], [], []
        TypeDecl: tmp___10, [], None
          IdentifierType: ['int']
      Decl: tmp___11, [], [], [], []
        TypeDecl: tmp___11, [], None
          IdentifierType: ['int']
      Decl: tmp___12, [], [], [], []
        TypeDecl: tmp___12, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___13, [], [], [], []
        TypeDecl: tmp___13, [], None
          IdentifierType: ['int']
      Decl: tmp___14, [], [], [], []
        TypeDecl: tmp___14, [], None
          IdentifierType: ['int']
      Decl: tmp___15, [], [], [], []
        TypeDecl: tmp___15, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___16, [], [], [], []
        TypeDecl: tmp___16, [], None
          IdentifierType: ['int']
      Decl: tmp___17, [], [], [], []
        TypeDecl: tmp___17, [], None
          IdentifierType: ['int']
      Decl: tmp___19, [], [], [], []
        TypeDecl: tmp___19, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___20, [], [], [], []
        TypeDecl: tmp___20, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___21, [], [], [], []
        TypeDecl: tmp___21, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Assignment: =
          ID: b
          ID: bb
        Assignment: =
          ID: k
          ID: bk
        Assignment: =
          ID: w
          ID: outcnt
        Assignment: =
          ID: ml
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            ArrayRef: 
              ID: mask_bits
              ID: bl
        Assignment: =
          ID: md
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            ArrayRef: 
              ID: mask_bits
              ID: bd
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___0
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: <
                          ID: k
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'int']
                            ID: bl
                      Compound: 
                        Goto: while_break___0
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___1
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___0
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___1
                            ID: tmp___0
                    Assignment: |=
                      ID: b
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['uch']
                            ID: tmp___1
                        ID: k
                    Assignment: +=
                      ID: k
                      Constant: unsigned int, 8U
                Label: while_break___0
                  EmptyStatement: 
              Assignment: =
                ID: t
                BinaryOp: +
                  ID: tl
                  BinaryOp: &
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: b
                    ID: ml
              Assignment: =
                ID: e
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  StructRef: ->
                    ID: t
                    ID: e
              If: 
                BinaryOp: >
                  ID: e
                  Constant: unsigned int, 16U
                Compound: 
                  Compound: 
                    While: 
                      Constant: int, 1
                      Compound: 
                        Label: while_continue___1
                          EmptyStatement: 
                        If: 
                          BinaryOp: ==
                            ID: e
                            Constant: unsigned int, 99U
                          Compound: 
                            Return: 
                              Constant: int, 1
                        Assignment: >>=
                          ID: b
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            StructRef: ->
                              ID: t
                              ID: b
                        Assignment: -=
                          ID: k
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'int']
                            StructRef: ->
                              ID: t
                              ID: b
                        Assignment: -=
                          ID: e
                          Constant: unsigned int, 16U
                        Compound: 
                          While: 
                            Constant: int, 1
                            Compound: 
                              Label: while_continue___2
                                EmptyStatement: 
                              If: 
                                UnaryOp: !
                                  BinaryOp: <
                                    ID: k
                                    ID: e
                                Compound: 
                                  Goto: while_break___2
                              If: 
                                BinaryOp: <
                                  ID: inptr
                                  ID: insize
                                Compound: 
                                  Assignment: =
                                    ID: tmp___2
                                    ID: inptr
                                  UnaryOp: p++
                                    ID: inptr
                                  Assignment: =
                                    ID: tmp___4
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['int']
                                      ArrayRef: 
                                        ID: inbuf
                                        ID: tmp___2
                                Compound: 
                                  Compound: 
                                    Assignment: =
                                      ID: tmp___3
                                      FuncCall: 
                                        ID: fill_inbuf
                                        ExprList: 
                                          Constant: int, 0
                                    Assignment: =
                                      ID: tmp___4
                                      ID: tmp___3
                              Assignment: |=
                                ID: b
                                BinaryOp: <<
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ulg']
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['uch']
                                      ID: tmp___4
                                  ID: k
                              Assignment: +=
                                ID: k
                                Constant: unsigned int, 8U
                          Label: while_break___2
                            EmptyStatement: 
                        Assignment: =
                          ID: t
                          BinaryOp: +
                            StructRef: .
                              StructRef: ->
                                ID: t
                                ID: v
                              ID: t
                            BinaryOp: &
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                ID: b
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                ArrayRef: 
                                  ID: mask_bits
                                  ID: e
                        Assignment: =
                          ID: e
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'int']
                            StructRef: ->
                              ID: t
                              ID: e
                        If: 
                          UnaryOp: !
                            BinaryOp: >
                              ID: e
                              Constant: unsigned int, 16U
                          Compound: 
                            Goto: while_break___1
                    Label: while_break___1
                      EmptyStatement: 
              Assignment: >>=
                ID: b
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  StructRef: ->
                    ID: t
                    ID: b
              Assignment: -=
                ID: k
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  StructRef: ->
                    ID: t
                    ID: b
              If: 
                BinaryOp: ==
                  ID: e
                  Constant: unsigned int, 16U
                Compound: 
                  Assignment: =
                    ID: tmp___5
                    ID: w
                  UnaryOp: p++
                    ID: w
                  Assignment: =
                    ArrayRef: 
                      ID: window
                      ID: tmp___5
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      StructRef: .
                        StructRef: ->
                          ID: t
                          ID: v
                        ID: n
                  If: 
                    BinaryOp: ==
                      ID: w
                      Constant: unsigned int, 32768U
                    Compound: 
                      Compound: 
                        Assignment: =
                          ID: outcnt
                          ID: w
                        FuncCall: 
                          ID: flush_window
                        Assignment: =
                          ID: w
                          Constant: unsigned int, 0U
                Compound: 
                  If: 
                    BinaryOp: ==
                      ID: e
                      Constant: unsigned int, 15U
                    Compound: 
                      Goto: while_break
                  Compound: 
                    While: 
                      Constant: int, 1
                      Compound: 
                        Label: while_continue___3
                          EmptyStatement: 
                        If: 
                          UnaryOp: !
                            BinaryOp: <
                              ID: k
                              ID: e
                          Compound: 
                            Goto: while_break___3
                        If: 
                          BinaryOp: <
                            ID: inptr
                            ID: insize
                          Compound: 
                            Assignment: =
                              ID: tmp___6
                              ID: inptr
                            UnaryOp: p++
                              ID: inptr
                            Assignment: =
                              ID: tmp___8
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                ArrayRef: 
                                  ID: inbuf
                                  ID: tmp___6
                          Compound: 
                            Compound: 
                              Assignment: =
                                ID: tmp___7
                                FuncCall: 
                                  ID: fill_inbuf
                                  ExprList: 
                                    Constant: int, 0
                              Assignment: =
                                ID: tmp___8
                                ID: tmp___7
                        Assignment: |=
                          ID: b
                          BinaryOp: <<
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ulg']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['uch']
                                ID: tmp___8
                            ID: k
                        Assignment: +=
                          ID: k
                          Constant: unsigned int, 8U
                    Label: while_break___3
                      EmptyStatement: 
                  Assignment: =
                    ID: n
                    BinaryOp: +
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        StructRef: .
                          StructRef: ->
                            ID: t
                            ID: v
                          ID: n
                      BinaryOp: &
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ID: b
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ArrayRef: 
                            ID: mask_bits
                            ID: e
                  Assignment: >>=
                    ID: b
                    ID: e
                  Assignment: -=
                    ID: k
                    ID: e
                  Compound: 
                    While: 
                      Constant: int, 1
                      Compound: 
                        Label: while_continue___4
                          EmptyStatement: 
                        If: 
                          UnaryOp: !
                            BinaryOp: <
                              ID: k
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                ID: bd
                          Compound: 
                            Goto: while_break___4
                        If: 
                          BinaryOp: <
                            ID: inptr
                            ID: insize
                          Compound: 
                            Assignment: =
                              ID: tmp___9
                              ID: inptr
                            UnaryOp: p++
                              ID: inptr
                            Assignment: =
                              ID: tmp___11
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                ArrayRef: 
                                  ID: inbuf
                                  ID: tmp___9
                          Compound: 
                            Compound: 
                              Assignment: =
                                ID: tmp___10
                                FuncCall: 
                                  ID: fill_inbuf
                                  ExprList: 
                                    Constant: int, 0
                              Assignment: =
                                ID: tmp___11
                                ID: tmp___10
                        Assignment: |=
                          ID: b
                          BinaryOp: <<
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ulg']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['uch']
                                ID: tmp___11
                            ID: k
                        Assignment: +=
                          ID: k
                          Constant: unsigned int, 8U
                    Label: while_break___4
                      EmptyStatement: 
                  Assignment: =
                    ID: t
                    BinaryOp: +
                      ID: td
                      BinaryOp: &
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ID: b
                        ID: md
                  Assignment: =
                    ID: e
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      StructRef: ->
                        ID: t
                        ID: e
                  If: 
                    BinaryOp: >
                      ID: e
                      Constant: unsigned int, 16U
                    Compound: 
                      Compound: 
                        While: 
                          Constant: int, 1
                          Compound: 
                            Label: while_continue___5
                              EmptyStatement: 
                            If: 
                              BinaryOp: ==
                                ID: e
                                Constant: unsigned int, 99U
                              Compound: 
                                Return: 
                                  Constant: int, 1
                            Assignment: >>=
                              ID: b
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                StructRef: ->
                                  ID: t
                                  ID: b
                            Assignment: -=
                              ID: k
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                StructRef: ->
                                  ID: t
                                  ID: b
                            Assignment: -=
                              ID: e
                              Constant: unsigned int, 16U
                            Compound: 
                              While: 
                                Constant: int, 1
                                Compound: 
                                  Label: while_continue___6
                                    EmptyStatement: 
                                  If: 
                                    UnaryOp: !
                                      BinaryOp: <
                                        ID: k
                                        ID: e
                                    Compound: 
                                      Goto: while_break___6
                                  If: 
                                    BinaryOp: <
                                      ID: inptr
                                      ID: insize
                                    Compound: 
                                      Assignment: =
                                        ID: tmp___12
                                        ID: inptr
                                      UnaryOp: p++
                                        ID: inptr
                                      Assignment: =
                                        ID: tmp___14
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['int']
                                          ArrayRef: 
                                            ID: inbuf
                                            ID: tmp___12
                                    Compound: 
                                      Compound: 
                                        Assignment: =
                                          ID: tmp___13
                                          FuncCall: 
                                            ID: fill_inbuf
                                            ExprList: 
                                              Constant: int, 0
                                        Assignment: =
                                          ID: tmp___14
                                          ID: tmp___13
                                  Assignment: |=
                                    ID: b
                                    BinaryOp: <<
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['ulg']
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['uch']
                                          ID: tmp___14
                                      ID: k
                                  Assignment: +=
                                    ID: k
                                    Constant: unsigned int, 8U
                              Label: while_break___6
                                EmptyStatement: 
                            Assignment: =
                              ID: t
                              BinaryOp: +
                                StructRef: .
                                  StructRef: ->
                                    ID: t
                                    ID: v
                                  ID: t
                                BinaryOp: &
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['unsigned', 'int']
                                    ID: b
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['unsigned', 'int']
                                    ArrayRef: 
                                      ID: mask_bits
                                      ID: e
                            Assignment: =
                              ID: e
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                StructRef: ->
                                  ID: t
                                  ID: e
                            If: 
                              UnaryOp: !
                                BinaryOp: >
                                  ID: e
                                  Constant: unsigned int, 16U
                              Compound: 
                                Goto: while_break___5
                        Label: while_break___5
                          EmptyStatement: 
                  Assignment: >>=
                    ID: b
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      StructRef: ->
                        ID: t
                        ID: b
                  Assignment: -=
                    ID: k
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      StructRef: ->
                        ID: t
                        ID: b
                  Compound: 
                    While: 
                      Constant: int, 1
                      Compound: 
                        Label: while_continue___7
                          EmptyStatement: 
                        If: 
                          UnaryOp: !
                            BinaryOp: <
                              ID: k
                              ID: e
                          Compound: 
                            Goto: while_break___7
                        If: 
                          BinaryOp: <
                            ID: inptr
                            ID: insize
                          Compound: 
                            Assignment: =
                              ID: tmp___15
                              ID: inptr
                            UnaryOp: p++
                              ID: inptr
                            Assignment: =
                              ID: tmp___17
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                ArrayRef: 
                                  ID: inbuf
                                  ID: tmp___15
                          Compound: 
                            Compound: 
                              Assignment: =
                                ID: tmp___16
                                FuncCall: 
                                  ID: fill_inbuf
                                  ExprList: 
                                    Constant: int, 0
                              Assignment: =
                                ID: tmp___17
                                ID: tmp___16
                        Assignment: |=
                          ID: b
                          BinaryOp: <<
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ulg']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['uch']
                                ID: tmp___17
                            ID: k
                        Assignment: +=
                          ID: k
                          Constant: unsigned int, 8U
                    Label: while_break___7
                      EmptyStatement: 
                  Assignment: =
                    ID: d
                    BinaryOp: -
                      BinaryOp: -
                        ID: w
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          StructRef: .
                            StructRef: ->
                              ID: t
                              ID: v
                            ID: n
                      BinaryOp: &
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ID: b
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ArrayRef: 
                            ID: mask_bits
                            ID: e
                  Assignment: >>=
                    ID: b
                    ID: e
                  Assignment: -=
                    ID: k
                    ID: e
                  Compound: 
                    While: 
                      Constant: int, 1
                      Compound: 
                        Label: while_continue___8
                          EmptyStatement: 
                        Assignment: &=
                          ID: d
                          Constant: unsigned int, 32767U
                        If: 
                          BinaryOp: >
                            ID: d
                            ID: w
                          Compound: 
                            Assignment: =
                              ID: tmp___19
                              ID: d
                          Compound: 
                            Assignment: =
                              ID: tmp___19
                              ID: w
                        Assignment: =
                          ID: e
                          BinaryOp: -
                            Constant: unsigned int, 32768U
                            ID: tmp___19
                        If: 
                          BinaryOp: >
                            ID: e
                            ID: n
                          Compound: 
                            Assignment: =
                              ID: e
                              ID: n
                          Compound: 
                            Assignment: =
                              ID: e
                              ID: e
                        Assignment: -=
                          ID: n
                          ID: e
                        If: 
                          BinaryOp: >=
                            BinaryOp: -
                              ID: w
                              ID: d
                            ID: e
                          Compound: 
                            Compound: 
                              FuncCall: 
                                ID: memcpy
                                ExprList: 
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['void']
                                    BinaryOp: +
                                      ID: window
                                      ID: w
                                  Cast: 
                                    Typename: None, ['const'], None
                                      PtrDecl: []
                                        TypeDecl: None, ['const'], None
                                          IdentifierType: ['void']
                                    BinaryOp: +
                                      ID: window
                                      ID: d
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['size_t']
                                    ID: e
                              Assignment: +=
                                ID: w
                                ID: e
                              Assignment: +=
                                ID: d
                                ID: e
                          Compound: 
                            Compound: 
                              While: 
                                Constant: int, 1
                                Compound: 
                                  Label: while_continue___9
                                    EmptyStatement: 
                                  Assignment: =
                                    ID: tmp___20
                                    ID: w
                                  UnaryOp: p++
                                    ID: w
                                  Assignment: =
                                    ID: tmp___21
                                    ID: d
                                  UnaryOp: p++
                                    ID: d
                                  Assignment: =
                                    ArrayRef: 
                                      ID: window
                                      ID: tmp___20
                                    ArrayRef: 
                                      ID: window
                                      ID: tmp___21
                                  UnaryOp: p--
                                    ID: e
                                  If: 
                                    UnaryOp: !
                                      ID: e
                                    Compound: 
                                      Goto: while_break___9
                              Label: while_break___9
                                EmptyStatement: 
                        If: 
                          BinaryOp: ==
                            ID: w
                            Constant: unsigned int, 32768U
                          Compound: 
                            Compound: 
                              Assignment: =
                                ID: outcnt
                                ID: w
                              FuncCall: 
                                ID: flush_window
                              Assignment: =
                                ID: w
                                Constant: unsigned int, 0U
                        If: 
                          UnaryOp: !
                            ID: n
                          Compound: 
                            Goto: while_break___8
                    Label: while_break___8
                      EmptyStatement: 
          Label: while_break
            EmptyStatement: 
        Assignment: =
          ID: outcnt
          ID: w
        Assignment: =
          ID: bb
          ID: b
        Assignment: =
          ID: bk
          ID: k
        Return: 
          Constant: int, 0
  FuncDef: 
    Decl: inflate_stored, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: inflate_stored, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: w, [], [], [], []
        TypeDecl: w, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: b, [], [], ['register'], []
        TypeDecl: b, [], None
          IdentifierType: ['ulg']
      Decl: k, [], [], ['register'], []
        TypeDecl: k, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Assignment: =
          ID: b
          ID: bb
        Assignment: =
          ID: k
          ID: bk
        Assignment: =
          ID: w
          ID: outcnt
        Assignment: =
          ID: n
          BinaryOp: &
            ID: k
            Constant: unsigned int, 7U
        Assignment: >>=
          ID: b
          ID: n
        Assignment: -=
          ID: k
          ID: n
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: k
                    Constant: unsigned int, 16U
                Compound: 
                  Goto: while_break
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___1
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___0
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___1
                      ID: tmp___0
              Assignment: |=
                ID: b
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      ID: tmp___1
                  ID: k
              Assignment: +=
                ID: k
                Constant: unsigned int, 8U
          Label: while_break
            EmptyStatement: 
        Assignment: =
          ID: n
          BinaryOp: &
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              ID: b
            Constant: unsigned int, 65535U
        Assignment: >>=
          ID: b
          Constant: int, 16
        Assignment: -=
          ID: k
          Constant: unsigned int, 16U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: k
                    Constant: unsigned int, 16U
                Compound: 
                  Goto: while_break___0
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp___2
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___4
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp___2
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___3
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___4
                      ID: tmp___3
              Assignment: |=
                ID: b
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      ID: tmp___4
                  ID: k
              Assignment: +=
                ID: k
                Constant: unsigned int, 8U
          Label: while_break___0
            EmptyStatement: 
        If: 
          BinaryOp: !=
            ID: n
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              BinaryOp: &
                UnaryOp: ~
                  ID: b
                Constant: unsigned long int, 65535UL
          Compound: 
            Return: 
              Constant: int, 1
        Assignment: >>=
          ID: b
          Constant: int, 16
        Assignment: -=
          ID: k
          Constant: unsigned int, 16U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              Assignment: =
                ID: tmp___9
                ID: n
              UnaryOp: p--
                ID: n
              If: 
                UnaryOp: !
                  ID: tmp___9
                Compound: 
                  Goto: while_break___1
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___2
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: <
                          ID: k
                          Constant: unsigned int, 8U
                      Compound: 
                        Goto: while_break___2
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp___5
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___7
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp___5
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___6
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___7
                            ID: tmp___6
                    Assignment: |=
                      ID: b
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['uch']
                            ID: tmp___7
                        ID: k
                    Assignment: +=
                      ID: k
                      Constant: unsigned int, 8U
                Label: while_break___2
                  EmptyStatement: 
              Assignment: =
                ID: tmp___8
                ID: w
              UnaryOp: p++
                ID: w
              Assignment: =
                ArrayRef: 
                  ID: window
                  ID: tmp___8
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['uch']
                  ID: b
              If: 
                BinaryOp: ==
                  ID: w
                  Constant: unsigned int, 32768U
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: outcnt
                      ID: w
                    FuncCall: 
                      ID: flush_window
                    Assignment: =
                      ID: w
                      Constant: unsigned int, 0U
              Assignment: >>=
                ID: b
                Constant: int, 8
              Assignment: -=
                ID: k
                Constant: unsigned int, 8U
          Label: while_break___1
            EmptyStatement: 
        Assignment: =
          ID: outcnt
          ID: w
        Assignment: =
          ID: bb
          ID: b
        Assignment: =
          ID: bk
          ID: k
        Return: 
          Constant: int, 0
  FuncDef: 
    Decl: inflate_fixed, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: inflate_fixed, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: i___0, [], [], [], []
        TypeDecl: i___0, [], None
          IdentifierType: ['int']
      Decl: tl, [], [], [], []
        PtrDecl: []
          TypeDecl: tl, [], None
            Struct: huft
      Decl: td, [], [], [], []
        PtrDecl: []
          TypeDecl: td, [], None
            Struct: huft
      Decl: bl, [], [], [], []
        TypeDecl: bl, [], None
          IdentifierType: ['int']
      Decl: bd, [], [], [], []
        TypeDecl: bd, [], None
          IdentifierType: ['int']
      Decl: l, [], [], [], []
        ArrayDecl: []
          TypeDecl: l, [], None
            IdentifierType: ['unsigned', 'int']
          Constant: int, 288
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp8, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp8, [], None
            IdentifierType: ['void']
      Compound: 
        Assignment: =
          ID: i___0
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: i___0
                    Constant: int, 144
                Compound: 
                  Goto: while_break
              Assignment: =
                ArrayRef: 
                  ID: l
                  ID: i___0
                Constant: unsigned int, 8U
              UnaryOp: p++
                ID: i___0
          Label: while_break
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: i___0
                    Constant: int, 256
                Compound: 
                  Goto: while_break___0
              Assignment: =
                ArrayRef: 
                  ID: l
                  ID: i___0
                Constant: unsigned int, 9U
              UnaryOp: p++
                ID: i___0
          Label: while_break___0
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: i___0
                    Constant: int, 280
                Compound: 
                  Goto: while_break___1
              Assignment: =
                ArrayRef: 
                  ID: l
                  ID: i___0
                Constant: unsigned int, 7U
              UnaryOp: p++
                ID: i___0
          Label: while_break___1
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___2
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: i___0
                    Constant: int, 288
                Compound: 
                  Goto: while_break___2
              Assignment: =
                ArrayRef: 
                  ID: l
                  ID: i___0
                Constant: unsigned int, 8U
              UnaryOp: p++
                ID: i___0
          Label: while_break___2
            EmptyStatement: 
        Compound: 
          Assignment: =
            ID: bl
            Constant: int, 7
          Assignment: =
            ID: i___0
            FuncCall: 
              ID: huft_build
              ExprList: 
                ID: l
                Constant: unsigned int, 288U
                Constant: unsigned int, 257U
                ID: cplens
                ID: cplext
                UnaryOp: &
                  ID: tl
                UnaryOp: &
                  ID: bl
        If: 
          BinaryOp: !=
            ID: i___0
            Constant: int, 0
          Compound: 
            Return: 
              ID: i___0
        Assignment: =
          ID: i___0
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___3
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: i___0
                    Constant: int, 30
                Compound: 
                  Goto: while_break___3
              Assignment: =
                ArrayRef: 
                  ID: l
                  ID: i___0
                Constant: unsigned int, 5U
              UnaryOp: p++
                ID: i___0
          Label: while_break___3
            EmptyStatement: 
        Compound: 
          Assignment: =
            ID: bd
            Constant: int, 5
          Assignment: =
            ID: i___0
            FuncCall: 
              ID: huft_build
              ExprList: 
                ID: l
                Constant: unsigned int, 30U
                Constant: unsigned int, 0U
                ID: cpdist
                ID: cpdext
                UnaryOp: &
                  ID: td
                UnaryOp: &
                  ID: bd
        If: 
          BinaryOp: >
            ID: i___0
            Constant: int, 1
          Compound: 
            Compound: 
              FuncCall: 
                ID: huft_free
                ExprList: 
                  ID: tl
            Return: 
              ID: i___0
        Compound: 
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: inflate_codes
              ExprList: 
                ID: tl
                ID: td
                ID: bl
                ID: bd
        If: 
          ID: tmp
          Compound: 
            Return: 
              Constant: int, 1
        Compound: 
          FuncCall: 
            ID: huft_free
            ExprList: 
              ID: tl
          FuncCall: 
            ID: huft_free
            ExprList: 
              ID: td
        Return: 
          Constant: int, 0
  FuncDef: 
    Decl: inflate_dynamic, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: inflate_dynamic, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: i___0, [], [], [], []
        TypeDecl: i___0, [], None
          IdentifierType: ['int']
      Decl: j___0, [], [], [], []
        TypeDecl: j___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: l, [], [], [], []
        TypeDecl: l, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: m, [], [], [], []
        TypeDecl: m, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tl, [], [], [], []
        PtrDecl: []
          TypeDecl: tl, [], None
            Struct: huft
      Decl: td, [], [], [], []
        PtrDecl: []
          TypeDecl: td, [], None
            Struct: huft
      Decl: bl, [], [], [], []
        TypeDecl: bl, [], None
          IdentifierType: ['int']
      Decl: bd, [], [], [], []
        TypeDecl: bd, [], None
          IdentifierType: ['int']
      Decl: nb, [], [], [], []
        TypeDecl: nb, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: nl, [], [], [], []
        TypeDecl: nl, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: nd, [], [], [], []
        TypeDecl: nd, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: ll, [], [], [], []
        ArrayDecl: []
          TypeDecl: ll, [], None
            IdentifierType: ['unsigned', 'int']
          Constant: int, 316
      Decl: b, [], [], ['register'], []
        TypeDecl: b, [], None
          IdentifierType: ['ulg']
      Decl: k, [], [], ['register'], []
        TypeDecl: k, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['int']
      Decl: tmp___10, [], [], [], []
        TypeDecl: tmp___10, [], None
          IdentifierType: ['int']
      Decl: tmp___11, [], [], [], []
        TypeDecl: tmp___11, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___12, [], [], [], []
        TypeDecl: tmp___12, [], None
          IdentifierType: ['int']
      Decl: tmp___13, [], [], [], []
        TypeDecl: tmp___13, [], None
          IdentifierType: ['int']
      Decl: tmp___14, [], [], [], []
        TypeDecl: tmp___14, [], None
          IdentifierType: ['int']
      Decl: tmp___15, [], [], [], []
        TypeDecl: tmp___15, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___16, [], [], [], []
        TypeDecl: tmp___16, [], None
          IdentifierType: ['int']
      Decl: tmp___17, [], [], [], []
        TypeDecl: tmp___17, [], None
          IdentifierType: ['int']
      Decl: tmp___18, [], [], [], []
        TypeDecl: tmp___18, [], None
          IdentifierType: ['int']
      Decl: tmp___19, [], [], [], []
        TypeDecl: tmp___19, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___20, [], [], [], []
        TypeDecl: tmp___20, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___21, [], [], [], []
        TypeDecl: tmp___21, [], None
          IdentifierType: ['int']
      Decl: tmp___22, [], [], [], []
        TypeDecl: tmp___22, [], None
          IdentifierType: ['int']
      Decl: tmp___23, [], [], [], []
        TypeDecl: tmp___23, [], None
          IdentifierType: ['int']
      Decl: tmp___24, [], [], [], []
        TypeDecl: tmp___24, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___25, [], [], [], []
        TypeDecl: tmp___25, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___26, [], [], [], []
        TypeDecl: tmp___26, [], None
          IdentifierType: ['int']
      Decl: tmp___27, [], [], [], []
        TypeDecl: tmp___27, [], None
          IdentifierType: ['int']
      Decl: tmp___28, [], [], [], []
        TypeDecl: tmp___28, [], None
          IdentifierType: ['int']
      Decl: tmp___29, [], [], [], []
        TypeDecl: tmp___29, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___30, [], [], [], []
        TypeDecl: tmp___30, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp48, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp48, [], None
            IdentifierType: ['void']
      Compound: 
        Assignment: =
          ID: b
          ID: bb
        Assignment: =
          ID: k
          ID: bk
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: k
                    Constant: unsigned int, 5U
                Compound: 
                  Goto: while_break
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___1
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___0
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___1
                      ID: tmp___0
              Assignment: |=
                ID: b
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      ID: tmp___1
                  ID: k
              Assignment: +=
                ID: k
                Constant: unsigned int, 8U
          Label: while_break
            EmptyStatement: 
        Assignment: =
          ID: nl
          BinaryOp: +
            Constant: unsigned int, 257U
            BinaryOp: &
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'int']
                ID: b
              Constant: unsigned int, 31U
        Assignment: >>=
          ID: b
          Constant: int, 5
        Assignment: -=
          ID: k
          Constant: unsigned int, 5U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: k
                    Constant: unsigned int, 5U
                Compound: 
                  Goto: while_break___0
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp___2
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___4
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp___2
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___3
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___4
                      ID: tmp___3
              Assignment: |=
                ID: b
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      ID: tmp___4
                  ID: k
              Assignment: +=
                ID: k
                Constant: unsigned int, 8U
          Label: while_break___0
            EmptyStatement: 
        Assignment: =
          ID: nd
          BinaryOp: +
            Constant: unsigned int, 1U
            BinaryOp: &
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'int']
                ID: b
              Constant: unsigned int, 31U
        Assignment: >>=
          ID: b
          Constant: int, 5
        Assignment: -=
          ID: k
          Constant: unsigned int, 5U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: k
                    Constant: unsigned int, 4U
                Compound: 
                  Goto: while_break___1
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp___5
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___7
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp___5
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___6
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___7
                      ID: tmp___6
              Assignment: |=
                ID: b
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      ID: tmp___7
                  ID: k
              Assignment: +=
                ID: k
                Constant: unsigned int, 8U
          Label: while_break___1
            EmptyStatement: 
        Assignment: =
          ID: nb
          BinaryOp: +
            Constant: unsigned int, 4U
            BinaryOp: &
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'int']
                ID: b
              Constant: unsigned int, 15U
        Assignment: >>=
          ID: b
          Constant: int, 4
        Assignment: -=
          ID: k
          Constant: unsigned int, 4U
        If: 
          BinaryOp: >
            ID: nl
            Constant: unsigned int, 286U
          Compound: 
            Return: 
              Constant: int, 1
          Compound: 
            If: 
              BinaryOp: >
                ID: nd
                Constant: unsigned int, 30U
              Compound: 
                Return: 
                  Constant: int, 1
        Assignment: =
          ID: j___0
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___2
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: j___0
                    ID: nb
                Compound: 
                  Goto: while_break___2
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___3
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: <
                          ID: k
                          Constant: unsigned int, 3U
                      Compound: 
                        Goto: while_break___3
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp___8
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___10
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp___8
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___9
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___10
                            ID: tmp___9
                    Assignment: |=
                      ID: b
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['uch']
                            ID: tmp___10
                        ID: k
                    Assignment: +=
                      ID: k
                      Constant: unsigned int, 8U
                Label: while_break___3
                  EmptyStatement: 
              Assignment: =
                ArrayRef: 
                  ID: ll
                  ArrayRef: 
                    ID: border
                    ID: j___0
                BinaryOp: &
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'int']
                    ID: b
                  Constant: unsigned int, 7U
              Assignment: >>=
                ID: b
                Constant: int, 3
              Assignment: -=
                ID: k
                Constant: unsigned int, 3U
              UnaryOp: p++
                ID: j___0
          Label: while_break___2
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___4
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: j___0
                    Constant: unsigned int, 19U
                Compound: 
                  Goto: while_break___4
              Assignment: =
                ArrayRef: 
                  ID: ll
                  ArrayRef: 
                    ID: border
                    ID: j___0
                Constant: unsigned int, 0U
              UnaryOp: p++
                ID: j___0
          Label: while_break___4
            EmptyStatement: 
        Compound: 
          Assignment: =
            ID: bl
            Constant: int, 7
          Assignment: =
            ID: i___0
            FuncCall: 
              ID: huft_build
              ExprList: 
                ID: ll
                Constant: unsigned int, 19U
                Constant: unsigned int, 19U
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    Constant: int, 0
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    Constant: int, 0
                UnaryOp: &
                  ID: tl
                UnaryOp: &
                  ID: bl
        If: 
          BinaryOp: !=
            ID: i___0
            Constant: int, 0
          Compound: 
            If: 
              BinaryOp: ==
                ID: i___0
                Constant: int, 1
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: huft_free
                    ExprList: 
                      ID: tl
            Return: 
              ID: i___0
        Assignment: =
          ID: n
          BinaryOp: +
            ID: nl
            ID: nd
        Assignment: =
          ID: m
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            ArrayRef: 
              ID: mask_bits
              ID: bl
        Assignment: =
          ID: l
          Constant: unsigned int, 0U
        Assignment: =
          ID: i___0
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            ID: l
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___5
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: i___0
                    ID: n
                Compound: 
                  Goto: while_break___5
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___6
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: <
                          ID: k
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'int']
                            ID: bl
                      Compound: 
                        Goto: while_break___6
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp___11
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___13
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp___11
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___12
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___13
                            ID: tmp___12
                    Assignment: |=
                      ID: b
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['uch']
                            ID: tmp___13
                        ID: k
                    Assignment: +=
                      ID: k
                      Constant: unsigned int, 8U
                Label: while_break___6
                  EmptyStatement: 
              Assignment: =
                ID: td
                BinaryOp: +
                  ID: tl
                  BinaryOp: &
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: b
                    ID: m
              Assignment: =
                ID: j___0
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  StructRef: ->
                    ID: td
                    ID: b
              Assignment: >>=
                ID: b
                ID: j___0
              Assignment: -=
                ID: k
                ID: j___0
              Assignment: =
                ID: j___0
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  StructRef: .
                    StructRef: ->
                      ID: td
                      ID: v
                    ID: n
              If: 
                BinaryOp: <
                  ID: j___0
                  Constant: unsigned int, 16U
                Compound: 
                  Assignment: =
                    ID: tmp___14
                    ID: i___0
                  UnaryOp: p++
                    ID: i___0
                  Assignment: =
                    ID: l
                    ID: j___0
                  Assignment: =
                    ArrayRef: 
                      ID: ll
                      ID: tmp___14
                    ID: l
                Compound: 
                  If: 
                    BinaryOp: ==
                      ID: j___0
                      Constant: unsigned int, 16U
                    Compound: 
                      Compound: 
                        While: 
                          Constant: int, 1
                          Compound: 
                            Label: while_continue___7
                              EmptyStatement: 
                            If: 
                              UnaryOp: !
                                BinaryOp: <
                                  ID: k
                                  Constant: unsigned int, 2U
                              Compound: 
                                Goto: while_break___7
                            If: 
                              BinaryOp: <
                                ID: inptr
                                ID: insize
                              Compound: 
                                Assignment: =
                                  ID: tmp___15
                                  ID: inptr
                                UnaryOp: p++
                                  ID: inptr
                                Assignment: =
                                  ID: tmp___17
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    ArrayRef: 
                                      ID: inbuf
                                      ID: tmp___15
                              Compound: 
                                Compound: 
                                  Assignment: =
                                    ID: tmp___16
                                    FuncCall: 
                                      ID: fill_inbuf
                                      ExprList: 
                                        Constant: int, 0
                                  Assignment: =
                                    ID: tmp___17
                                    ID: tmp___16
                            Assignment: |=
                              ID: b
                              BinaryOp: <<
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['ulg']
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['uch']
                                    ID: tmp___17
                                ID: k
                            Assignment: +=
                              ID: k
                              Constant: unsigned int, 8U
                        Label: while_break___7
                          EmptyStatement: 
                      Assignment: =
                        ID: j___0
                        BinaryOp: +
                          Constant: unsigned int, 3U
                          BinaryOp: &
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              ID: b
                            Constant: unsigned int, 3U
                      Assignment: >>=
                        ID: b
                        Constant: int, 2
                      Assignment: -=
                        ID: k
                        Constant: unsigned int, 2U
                      If: 
                        BinaryOp: >
                          BinaryOp: +
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              ID: i___0
                            ID: j___0
                          ID: n
                        Compound: 
                          Return: 
                            Constant: int, 1
                      Compound: 
                        While: 
                          Constant: int, 1
                          Compound: 
                            Label: while_continue___8
                              EmptyStatement: 
                            Assignment: =
                              ID: tmp___19
                              ID: j___0
                            UnaryOp: p--
                              ID: j___0
                            If: 
                              UnaryOp: !
                                ID: tmp___19
                              Compound: 
                                Goto: while_break___8
                            Assignment: =
                              ID: tmp___18
                              ID: i___0
                            UnaryOp: p++
                              ID: i___0
                            Assignment: =
                              ArrayRef: 
                                ID: ll
                                ID: tmp___18
                              ID: l
                        Label: while_break___8
                          EmptyStatement: 
                    Compound: 
                      If: 
                        BinaryOp: ==
                          ID: j___0
                          Constant: unsigned int, 17U
                        Compound: 
                          Compound: 
                            While: 
                              Constant: int, 1
                              Compound: 
                                Label: while_continue___9
                                  EmptyStatement: 
                                If: 
                                  UnaryOp: !
                                    BinaryOp: <
                                      ID: k
                                      Constant: unsigned int, 3U
                                  Compound: 
                                    Goto: while_break___9
                                If: 
                                  BinaryOp: <
                                    ID: inptr
                                    ID: insize
                                  Compound: 
                                    Assignment: =
                                      ID: tmp___20
                                      ID: inptr
                                    UnaryOp: p++
                                      ID: inptr
                                    Assignment: =
                                      ID: tmp___22
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        ArrayRef: 
                                          ID: inbuf
                                          ID: tmp___20
                                  Compound: 
                                    Compound: 
                                      Assignment: =
                                        ID: tmp___21
                                        FuncCall: 
                                          ID: fill_inbuf
                                          ExprList: 
                                            Constant: int, 0
                                      Assignment: =
                                        ID: tmp___22
                                        ID: tmp___21
                                Assignment: |=
                                  ID: b
                                  BinaryOp: <<
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['ulg']
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['uch']
                                        ID: tmp___22
                                    ID: k
                                Assignment: +=
                                  ID: k
                                  Constant: unsigned int, 8U
                            Label: while_break___9
                              EmptyStatement: 
                          Assignment: =
                            ID: j___0
                            BinaryOp: +
                              Constant: unsigned int, 3U
                              BinaryOp: &
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['unsigned', 'int']
                                  ID: b
                                Constant: unsigned int, 7U
                          Assignment: >>=
                            ID: b
                            Constant: int, 3
                          Assignment: -=
                            ID: k
                            Constant: unsigned int, 3U
                          If: 
                            BinaryOp: >
                              BinaryOp: +
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['unsigned', 'int']
                                  ID: i___0
                                ID: j___0
                              ID: n
                            Compound: 
                              Return: 
                                Constant: int, 1
                          Compound: 
                            While: 
                              Constant: int, 1
                              Compound: 
                                Label: while_continue___10
                                  EmptyStatement: 
                                Assignment: =
                                  ID: tmp___24
                                  ID: j___0
                                UnaryOp: p--
                                  ID: j___0
                                If: 
                                  UnaryOp: !
                                    ID: tmp___24
                                  Compound: 
                                    Goto: while_break___10
                                Assignment: =
                                  ID: tmp___23
                                  ID: i___0
                                UnaryOp: p++
                                  ID: i___0
                                Assignment: =
                                  ArrayRef: 
                                    ID: ll
                                    ID: tmp___23
                                  Constant: unsigned int, 0U
                            Label: while_break___10
                              EmptyStatement: 
                          Assignment: =
                            ID: l
                            Constant: unsigned int, 0U
                        Compound: 
                          Compound: 
                            While: 
                              Constant: int, 1
                              Compound: 
                                Label: while_continue___11
                                  EmptyStatement: 
                                If: 
                                  UnaryOp: !
                                    BinaryOp: <
                                      ID: k
                                      Constant: unsigned int, 7U
                                  Compound: 
                                    Goto: while_break___11
                                If: 
                                  BinaryOp: <
                                    ID: inptr
                                    ID: insize
                                  Compound: 
                                    Assignment: =
                                      ID: tmp___25
                                      ID: inptr
                                    UnaryOp: p++
                                      ID: inptr
                                    Assignment: =
                                      ID: tmp___27
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        ArrayRef: 
                                          ID: inbuf
                                          ID: tmp___25
                                  Compound: 
                                    Compound: 
                                      Assignment: =
                                        ID: tmp___26
                                        FuncCall: 
                                          ID: fill_inbuf
                                          ExprList: 
                                            Constant: int, 0
                                      Assignment: =
                                        ID: tmp___27
                                        ID: tmp___26
                                Assignment: |=
                                  ID: b
                                  BinaryOp: <<
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['ulg']
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['uch']
                                        ID: tmp___27
                                    ID: k
                                Assignment: +=
                                  ID: k
                                  Constant: unsigned int, 8U
                            Label: while_break___11
                              EmptyStatement: 
                          Assignment: =
                            ID: j___0
                            BinaryOp: +
                              Constant: unsigned int, 11U
                              BinaryOp: &
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['unsigned', 'int']
                                  ID: b
                                Constant: unsigned int, 127U
                          Assignment: >>=
                            ID: b
                            Constant: int, 7
                          Assignment: -=
                            ID: k
                            Constant: unsigned int, 7U
                          If: 
                            BinaryOp: >
                              BinaryOp: +
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['unsigned', 'int']
                                  ID: i___0
                                ID: j___0
                              ID: n
                            Compound: 
                              Return: 
                                Constant: int, 1
                          Compound: 
                            While: 
                              Constant: int, 1
                              Compound: 
                                Label: while_continue___12
                                  EmptyStatement: 
                                Assignment: =
                                  ID: tmp___29
                                  ID: j___0
                                UnaryOp: p--
                                  ID: j___0
                                If: 
                                  UnaryOp: !
                                    ID: tmp___29
                                  Compound: 
                                    Goto: while_break___12
                                Assignment: =
                                  ID: tmp___28
                                  ID: i___0
                                UnaryOp: p++
                                  ID: i___0
                                Assignment: =
                                  ArrayRef: 
                                    ID: ll
                                    ID: tmp___28
                                  Constant: unsigned int, 0U
                            Label: while_break___12
                              EmptyStatement: 
                          Assignment: =
                            ID: l
                            Constant: unsigned int, 0U
          Label: while_break___5
            EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: huft_free
            ExprList: 
              ID: tl
          Assignment: =
            ID: bb
            ID: b
          Assignment: =
            ID: bk
            ID: k
          Assignment: =
            ID: bl
            ID: lbits
          Assignment: =
            ID: i___0
            FuncCall: 
              ID: huft_build
              ExprList: 
                ID: ll
                ID: nl
                Constant: unsigned int, 257U
                ID: cplens
                ID: cplext
                UnaryOp: &
                  ID: tl
                UnaryOp: &
                  ID: bl
        If: 
          BinaryOp: !=
            ID: i___0
            Constant: int, 0
          Compound: 
            If: 
              BinaryOp: ==
                ID: i___0
                Constant: int, 1
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, " incomplete literal tree\n"
                  FuncCall: 
                    ID: huft_free
                    ExprList: 
                      ID: tl
            Return: 
              ID: i___0
        Compound: 
          Assignment: =
            ID: bd
            ID: dbits
          Assignment: =
            ID: i___0
            FuncCall: 
              ID: huft_build
              ExprList: 
                BinaryOp: +
                  ID: ll
                  ID: nl
                ID: nd
                Constant: unsigned int, 0U
                ID: cpdist
                ID: cpdext
                UnaryOp: &
                  ID: td
                UnaryOp: &
                  ID: bd
        If: 
          BinaryOp: !=
            ID: i___0
            Constant: int, 0
          Compound: 
            If: 
              BinaryOp: ==
                ID: i___0
                Constant: int, 1
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, " incomplete distance tree\n"
                  FuncCall: 
                    ID: huft_free
                    ExprList: 
                      ID: td
            Compound: 
              FuncCall: 
                ID: huft_free
                ExprList: 
                  ID: tl
            Return: 
              ID: i___0
        Compound: 
          Assignment: =
            ID: tmp___30
            FuncCall: 
              ID: inflate_codes
              ExprList: 
                ID: tl
                ID: td
                ID: bl
                ID: bd
        If: 
          ID: tmp___30
          Compound: 
            Return: 
              Constant: int, 1
        Compound: 
          FuncCall: 
            ID: huft_free
            ExprList: 
              ID: tl
          FuncCall: 
            ID: huft_free
            ExprList: 
              ID: td
        Return: 
          Constant: int, 0
  FuncDef: 
    Decl: inflate_block, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: e, [], [], [], []
            PtrDecl: []
              TypeDecl: e, [], None
                IdentifierType: ['int']
        TypeDecl: inflate_block, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: t, [], [], [], []
        TypeDecl: t, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: b, [], [], ['register'], []
        TypeDecl: b, [], None
          IdentifierType: ['ulg']
      Decl: k, [], [], ['register'], []
        TypeDecl: k, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: b
          ID: bb
        Assignment: =
          ID: k
          ID: bk
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: k
                    Constant: unsigned int, 1U
                Compound: 
                  Goto: while_break
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___1
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___0
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___1
                      ID: tmp___0
              Assignment: |=
                ID: b
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      ID: tmp___1
                  ID: k
              Assignment: +=
                ID: k
                Constant: unsigned int, 8U
          Label: while_break
            EmptyStatement: 
        Assignment: =
          UnaryOp: *
            ID: e
          BinaryOp: &
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              ID: b
            Constant: int, 1
        Assignment: >>=
          ID: b
          Constant: int, 1
        UnaryOp: p--
          ID: k
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: k
                    Constant: unsigned int, 2U
                Compound: 
                  Goto: while_break___0
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp___2
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___4
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp___2
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___3
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___4
                      ID: tmp___3
              Assignment: |=
                ID: b
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      ID: tmp___4
                  ID: k
              Assignment: +=
                ID: k
                Constant: unsigned int, 8U
          Label: while_break___0
            EmptyStatement: 
        Assignment: =
          ID: t
          BinaryOp: &
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              ID: b
            Constant: unsigned int, 3U
        Assignment: >>=
          ID: b
          Constant: int, 2
        Assignment: -=
          ID: k
          Constant: unsigned int, 2U
        Assignment: =
          ID: bb
          ID: b
        Assignment: =
          ID: bk
          ID: k
        If: 
          BinaryOp: ==
            ID: t
            Constant: unsigned int, 2U
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___5
                FuncCall: 
                  ID: inflate_dynamic
            Return: 
              ID: tmp___5
        If: 
          BinaryOp: ==
            ID: t
            Constant: unsigned int, 0U
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___6
                FuncCall: 
                  ID: inflate_stored
            Return: 
              ID: tmp___6
        If: 
          BinaryOp: ==
            ID: t
            Constant: unsigned int, 1U
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___7
                FuncCall: 
                  ID: inflate_fixed
            Return: 
              ID: tmp___7
        Return: 
          Constant: int, 2
  FuncDef: 
    Decl: inflate, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: inflate, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: e, [], [], [], []
        TypeDecl: e, [], None
          IdentifierType: ['int']
      Decl: r, [], [], [], []
        TypeDecl: r, [], None
          IdentifierType: ['int']
      Decl: h, [], [], [], []
        TypeDecl: h, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Assignment: =
          ID: outcnt
          Constant: unsigned int, 0U
        Assignment: =
          ID: bk
          Constant: unsigned int, 0U
        Assignment: =
          ID: bb
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ulg']
            Constant: int, 0
        Assignment: =
          ID: h
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: hufts
                  Constant: unsigned int, 0U
                Assignment: =
                  ID: r
                  FuncCall: 
                    ID: inflate_block
                    ExprList: 
                      UnaryOp: &
                        ID: e
              If: 
                BinaryOp: !=
                  ID: r
                  Constant: int, 0
                Compound: 
                  Return: 
                    ID: r
              If: 
                BinaryOp: >
                  ID: hufts
                  ID: h
                Compound: 
                  Assignment: =
                    ID: h
                    ID: hufts
              If: 
                UnaryOp: !
                  UnaryOp: !
                    ID: e
                Compound: 
                  Goto: while_break
          Label: while_break
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: >=
                    ID: bk
                    Constant: unsigned int, 8U
                Compound: 
                  Goto: while_break___0
              Assignment: -=
                ID: bk
                Constant: unsigned int, 8U
              UnaryOp: p--
                ID: inptr
          Label: while_break___0
            EmptyStatement: 
        Compound: 
          Assignment: =
            ID: outcnt
            ID: outcnt
          FuncCall: 
            ID: flush_window
        Return: 
          Constant: int, 0
  Decl: method, [], [], [], []
    TypeDecl: method, [], None
      IdentifierType: ['int']
  Decl: decrypt, [], [], [], []
    TypeDecl: decrypt, [], None
      IdentifierType: ['int']
  Decl: unzip, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: in, [], [], [], []
          TypeDecl: in, [], None
            IdentifierType: ['int']
        Decl: out, [], [], [], []
          TypeDecl: out, [], None
            IdentifierType: ['int']
      TypeDecl: unzip, [], None
        IdentifierType: ['int']
  Decl: check_zipfile, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: in, [], [], [], []
          TypeDecl: in, [], None
            IdentifierType: ['int']
      TypeDecl: check_zipfile, [], None
        IdentifierType: ['int']
  Decl: key, [], [], [], []
    PtrDecl: []
      TypeDecl: key, [], None
        IdentifierType: ['char']
  Decl: pkzip, [], [], [], []
    TypeDecl: pkzip, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: ext_header, [], [], [], []
    TypeDecl: ext_header, [], None
      IdentifierType: ['int']
    Constant: int, 0
  FuncDef: 
    Decl: check_zipfile, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: in, [], [], [], []
            TypeDecl: in, [], None
              IdentifierType: ['int']
        TypeDecl: check_zipfile, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: h, [], [], [], []
        PtrDecl: []
          TypeDecl: h, [], None
            IdentifierType: ['uch']
      Compound: 
        Assignment: =
          ID: h
          BinaryOp: +
            ID: inbuf
            ID: inptr
        Assignment: =
          ID: ifd
          ID: in
        Assignment: +=
          ID: inptr
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            BinaryOp: +
              BinaryOp: +
                Constant: int, 30
                BinaryOp: |
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      UnaryOp: *
                        BinaryOp: +
                          BinaryOp: +
                            ID: h
                            Constant: int, 26
                          Constant: int, 0
                  BinaryOp: <<
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ush']
                        UnaryOp: *
                          BinaryOp: +
                            BinaryOp: +
                              ID: h
                              Constant: int, 26
                            Constant: int, 1
                    Constant: int, 8
              BinaryOp: |
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                    UnaryOp: *
                      BinaryOp: +
                        BinaryOp: +
                          ID: h
                          Constant: int, 28
                        Constant: int, 0
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      UnaryOp: *
                        BinaryOp: +
                          BinaryOp: +
                            ID: h
                            Constant: int, 28
                          Constant: int, 1
                  Constant: int, 8
        If: 
          BinaryOp: >
            ID: inptr
            ID: insize
          Compound: 
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "\n%s: %s: not a valid zip file\n"
                  ID: progname
                  ID: ifname
              Assignment: =
                ID: exit_code
                Constant: int, 1
            Return: 
              Constant: int, 1
          Compound: 
            If: 
              BinaryOp: !=
                BinaryOp: |
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    BinaryOp: |
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          UnaryOp: *
                            BinaryOp: +
                              ID: h
                              Constant: int, 0
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            UnaryOp: *
                              BinaryOp: +
                                ID: h
                                Constant: int, 1
                        Constant: int, 8
                  BinaryOp: <<
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      BinaryOp: |
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            UnaryOp: *
                              BinaryOp: +
                                BinaryOp: +
                                  ID: h
                                  Constant: int, 2
                                Constant: int, 0
                        BinaryOp: <<
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: h
                                    Constant: int, 2
                                  Constant: int, 1
                          Constant: int, 8
                    Constant: int, 16
                Constant: unsigned long int, 67324752UL
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "\n%s: %s: not a valid zip file\n"
                      ID: progname
                      ID: ifname
                  Assignment: =
                    ID: exit_code
                    Constant: int, 1
                Return: 
                  Constant: int, 1
        Assignment: =
          ID: method
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            UnaryOp: *
              BinaryOp: +
                ID: h
                Constant: int, 8
        If: 
          BinaryOp: !=
            ID: method
            Constant: int, 0
          Compound: 
            If: 
              BinaryOp: !=
                ID: method
                Constant: int, 8
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "\n%s: %s: first entry not deflated or stored -- use unzip\n"
                      ID: progname
                      ID: ifname
                  Assignment: =
                    ID: exit_code
                    Constant: int, 1
                Return: 
                  Constant: int, 1
        Assignment: =
          ID: decrypt
          BinaryOp: &
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              UnaryOp: *
                BinaryOp: +
                  ID: h
                  Constant: int, 6
            Constant: int, 1
        If: 
          BinaryOp: !=
            ID: decrypt
            Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "\n%s: %s: encrypted file -- use unzip\n"
                  ID: progname
                  ID: ifname
              Assignment: =
                ID: exit_code
                Constant: int, 1
            Return: 
              Constant: int, 1
        Assignment: =
          ID: ext_header
          BinaryOp: !=
            BinaryOp: &
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                UnaryOp: *
                  BinaryOp: +
                    ID: h
                    Constant: int, 6
              Constant: int, 8
            Constant: int, 0
        Assignment: =
          ID: pkzip
          Constant: int, 1
        Return: 
          Constant: int, 0
  FuncDef: 
    Decl: unzip, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: in, [], [], [], []
            TypeDecl: in, [], None
              IdentifierType: ['int']
          Decl: out, [], [], [], []
            TypeDecl: out, [], None
              IdentifierType: ['int']
        TypeDecl: unzip, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: orig_crc, [], [], [], []
        TypeDecl: orig_crc, [], None
          IdentifierType: ['ulg']
      Decl: orig_len___0, [], [], [], []
        TypeDecl: orig_len___0, [], None
          IdentifierType: ['ulg']
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: buf, [], [], [], []
        ArrayDecl: []
          TypeDecl: buf, [], None
            IdentifierType: ['uch']
          Constant: int, 16
      Decl: res, [], [], [], []
        TypeDecl: res, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: n___0, [], [], ['register'], []
        TypeDecl: n___0, [], None
          IdentifierType: ['ulg']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: c, [], [], [], []
        TypeDecl: c, [], None
          IdentifierType: ['uch']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['ulg']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['int']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___10, [], [], [], []
        TypeDecl: tmp___10, [], None
          IdentifierType: ['int']
      Decl: tmp___11, [], [], [], []
        TypeDecl: tmp___11, [], None
          IdentifierType: ['int']
      Decl: tmp___12, [], [], [], []
        TypeDecl: tmp___12, [], None
          IdentifierType: ['ulg']
      Decl: __cil_tmp24, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp24, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp25, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp25, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp26, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp26, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp27, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp27, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp28, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp28, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp29, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp29, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp30, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp30, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp31, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp31, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: orig_crc
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['ulg']
              Constant: int, 0
          Assignment: =
            ID: orig_len___0
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['ulg']
              Constant: int, 0
          Assignment: =
            ID: ifd
            ID: in
          Assignment: =
            ID: ofd
            ID: out
          FuncCall: 
            ID: updcrc
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['uch']
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['void']
                  Constant: int, 0
              Constant: unsigned int, 0U
        If: 
          ID: pkzip
          Compound: 
            If: 
              UnaryOp: !
                ID: ext_header
              Compound: 
                Assignment: =
                  ID: orig_crc
                  BinaryOp: |
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      BinaryOp: |
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            UnaryOp: *
                              BinaryOp: +
                                BinaryOp: +
                                  ID: inbuf
                                  Constant: int, 14
                                Constant: int, 0
                        BinaryOp: <<
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: inbuf
                                    Constant: int, 14
                                  Constant: int, 1
                          Constant: int, 8
                    BinaryOp: <<
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ulg']
                        BinaryOp: |
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    BinaryOp: +
                                      ID: inbuf
                                      Constant: int, 14
                                    Constant: int, 2
                                  Constant: int, 0
                          BinaryOp: <<
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                UnaryOp: *
                                  BinaryOp: +
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: inbuf
                                        Constant: int, 14
                                      Constant: int, 2
                                    Constant: int, 1
                            Constant: int, 8
                      Constant: int, 16
                Assignment: =
                  ID: orig_len___0
                  BinaryOp: |
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      BinaryOp: |
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            UnaryOp: *
                              BinaryOp: +
                                BinaryOp: +
                                  ID: inbuf
                                  Constant: int, 22
                                Constant: int, 0
                        BinaryOp: <<
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: inbuf
                                    Constant: int, 22
                                  Constant: int, 1
                          Constant: int, 8
                    BinaryOp: <<
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ulg']
                        BinaryOp: |
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    BinaryOp: +
                                      ID: inbuf
                                      Constant: int, 22
                                    Constant: int, 2
                                  Constant: int, 0
                          BinaryOp: <<
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                UnaryOp: *
                                  BinaryOp: +
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: inbuf
                                        Constant: int, 22
                                      Constant: int, 2
                                    Constant: int, 1
                            Constant: int, 8
                      Constant: int, 16
        If: 
          BinaryOp: ==
            ID: method
            Constant: int, 8
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp
                FuncCall: 
                  ID: inflate
              Assignment: =
                ID: res
                ID: tmp
            If: 
              BinaryOp: ==
                ID: res
                Constant: int, 3
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: error
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        Constant: string, "out of memory"
              Compound: 
                If: 
                  BinaryOp: !=
                    ID: res
                    Constant: int, 0
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: error
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char']
                            Constant: string, "invalid compressed data--format violated"
          Compound: 
            If: 
              ID: pkzip
              Compound: 
                If: 
                  BinaryOp: ==
                    ID: method
                    Constant: int, 0
                  Compound: 
                    Assignment: =
                      ID: n___0
                      BinaryOp: |
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          BinaryOp: |
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                UnaryOp: *
                                  BinaryOp: +
                                    BinaryOp: +
                                      ID: inbuf
                                      Constant: int, 22
                                    Constant: int, 0
                            BinaryOp: <<
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['ush']
                                  UnaryOp: *
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: inbuf
                                        Constant: int, 22
                                      Constant: int, 1
                              Constant: int, 8
                        BinaryOp: <<
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ulg']
                            BinaryOp: |
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['ush']
                                  UnaryOp: *
                                    BinaryOp: +
                                      BinaryOp: +
                                        BinaryOp: +
                                          ID: inbuf
                                          Constant: int, 22
                                        Constant: int, 2
                                      Constant: int, 0
                              BinaryOp: <<
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ush']
                                    UnaryOp: *
                                      BinaryOp: +
                                        BinaryOp: +
                                          BinaryOp: +
                                            ID: inbuf
                                            Constant: int, 22
                                          Constant: int, 2
                                        Constant: int, 1
                                Constant: int, 8
                          Constant: int, 16
                    If: 
                      ID: decrypt
                      Compound: 
                        Assignment: =
                          ID: tmp___0
                          Constant: int, 12
                      Compound: 
                        Assignment: =
                          ID: tmp___0
                          Constant: int, 0
                    If: 
                      BinaryOp: !=
                        ID: n___0
                        BinaryOp: -
                          BinaryOp: |
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ulg']
                              BinaryOp: |
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ush']
                                    UnaryOp: *
                                      BinaryOp: +
                                        BinaryOp: +
                                          ID: inbuf
                                          Constant: int, 18
                                        Constant: int, 0
                                BinaryOp: <<
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['ush']
                                      UnaryOp: *
                                        BinaryOp: +
                                          BinaryOp: +
                                            ID: inbuf
                                            Constant: int, 18
                                          Constant: int, 1
                                  Constant: int, 8
                            BinaryOp: <<
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ulg']
                                BinaryOp: |
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['ush']
                                      UnaryOp: *
                                        BinaryOp: +
                                          BinaryOp: +
                                            BinaryOp: +
                                              ID: inbuf
                                              Constant: int, 18
                                            Constant: int, 2
                                          Constant: int, 0
                                  BinaryOp: <<
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['int']
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['ush']
                                        UnaryOp: *
                                          BinaryOp: +
                                            BinaryOp: +
                                              BinaryOp: +
                                                ID: inbuf
                                                Constant: int, 18
                                              Constant: int, 2
                                            Constant: int, 1
                                    Constant: int, 8
                              Constant: int, 16
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'long']
                            ID: tmp___0
                      Compound: 
                        Compound: 
                          FuncCall: 
                            ID: fprintf
                            ExprList: 
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['FILE']
                                ID: stderr
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['char']
                                Constant: string, "len %ld, siz %ld\n"
                              ID: n___0
                              BinaryOp: |
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['ulg']
                                  BinaryOp: |
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['int']
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['ush']
                                        UnaryOp: *
                                          BinaryOp: +
                                            BinaryOp: +
                                              ID: inbuf
                                              Constant: int, 18
                                            Constant: int, 0
                                    BinaryOp: <<
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['ush']
                                          UnaryOp: *
                                            BinaryOp: +
                                              BinaryOp: +
                                                ID: inbuf
                                                Constant: int, 18
                                              Constant: int, 1
                                      Constant: int, 8
                                BinaryOp: <<
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ulg']
                                    BinaryOp: |
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['ush']
                                          UnaryOp: *
                                            BinaryOp: +
                                              BinaryOp: +
                                                BinaryOp: +
                                                  ID: inbuf
                                                  Constant: int, 18
                                                Constant: int, 2
                                              Constant: int, 0
                                      BinaryOp: <<
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['int']
                                          Cast: 
                                            Typename: None, [], None
                                              TypeDecl: None, [], None
                                                IdentifierType: ['ush']
                                            UnaryOp: *
                                              BinaryOp: +
                                                BinaryOp: +
                                                  BinaryOp: +
                                                    ID: inbuf
                                                    Constant: int, 18
                                                  Constant: int, 2
                                                Constant: int, 1
                                        Constant: int, 8
                                  Constant: int, 16
                          FuncCall: 
                            ID: error
                            ExprList: 
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['char']
                                Constant: string, "invalid compressed data--length mismatch"
                    Compound: 
                      While: 
                        Constant: int, 1
                        Compound: 
                          Label: while_continue
                            EmptyStatement: 
                          Assignment: =
                            ID: tmp___5
                            ID: n___0
                          UnaryOp: p--
                            ID: n___0
                          If: 
                            UnaryOp: !
                              ID: tmp___5
                            Compound: 
                              Goto: while_break
                          If: 
                            BinaryOp: <
                              ID: inptr
                              ID: insize
                            Compound: 
                              Assignment: =
                                ID: tmp___1
                                ID: inptr
                              UnaryOp: p++
                                ID: inptr
                              Assignment: =
                                ID: tmp___3
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  ArrayRef: 
                                    ID: inbuf
                                    ID: tmp___1
                            Compound: 
                              Compound: 
                                Assignment: =
                                  ID: tmp___2
                                  FuncCall: 
                                    ID: fill_inbuf
                                    ExprList: 
                                      Constant: int, 0
                                Assignment: =
                                  ID: tmp___3
                                  ID: tmp___2
                          Assignment: =
                            ID: c
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['uch']
                              ID: tmp___3
                          Assignment: =
                            ID: tmp___4
                            ID: outcnt
                          UnaryOp: p++
                            ID: outcnt
                          Assignment: =
                            ArrayRef: 
                              ID: window
                              ID: tmp___4
                            ID: c
                          If: 
                            BinaryOp: ==
                              ID: outcnt
                              Constant: unsigned int, 32768U
                            Compound: 
                              Compound: 
                                FuncCall: 
                                  ID: flush_window
                      Label: while_break
                        EmptyStatement: 
                    Compound: 
                      FuncCall: 
                        ID: flush_window
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: error
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char']
                            Constant: string, "internal error, invalid method"
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: error
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        Constant: string, "internal error, invalid method"
        If: 
          UnaryOp: !
            ID: pkzip
          Compound: 
            Assignment: =
              ID: n
              Constant: int, 0
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___0
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: n
                        Constant: int, 8
                    Compound: 
                      Goto: while_break___0
                  If: 
                    BinaryOp: <
                      ID: inptr
                      ID: insize
                    Compound: 
                      Assignment: =
                        ID: tmp___6
                        ID: inptr
                      UnaryOp: p++
                        ID: inptr
                      Assignment: =
                        ID: tmp___8
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          ArrayRef: 
                            ID: inbuf
                            ID: tmp___6
                    Compound: 
                      Compound: 
                        Assignment: =
                          ID: tmp___7
                          FuncCall: 
                            ID: fill_inbuf
                            ExprList: 
                              Constant: int, 0
                        Assignment: =
                          ID: tmp___8
                          ID: tmp___7
                  Assignment: =
                    ArrayRef: 
                      ID: buf
                      ID: n
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      ID: tmp___8
                  UnaryOp: p++
                    ID: n
              Label: while_break___0
                EmptyStatement: 
            Assignment: =
              ID: orig_crc
              BinaryOp: |
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ulg']
                  BinaryOp: |
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ush']
                        ArrayRef: 
                          ID: buf
                          Constant: int, 0
                    BinaryOp: <<
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          ArrayRef: 
                            ID: buf
                            Constant: int, 1
                      Constant: int, 8
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    BinaryOp: |
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          UnaryOp: *
                            BinaryOp: +
                              BinaryOp: +
                                ID: buf
                                Constant: int, 2
                              Constant: int, 0
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            UnaryOp: *
                              BinaryOp: +
                                BinaryOp: +
                                  ID: buf
                                  Constant: int, 2
                                Constant: int, 1
                        Constant: int, 8
                  Constant: int, 16
            Assignment: =
              ID: orig_len___0
              BinaryOp: |
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ulg']
                  BinaryOp: |
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ush']
                        UnaryOp: *
                          BinaryOp: +
                            BinaryOp: +
                              ID: buf
                              Constant: int, 4
                            Constant: int, 0
                    BinaryOp: <<
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          UnaryOp: *
                            BinaryOp: +
                              BinaryOp: +
                                ID: buf
                                Constant: int, 4
                              Constant: int, 1
                      Constant: int, 8
                BinaryOp: <<
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    BinaryOp: |
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          UnaryOp: *
                            BinaryOp: +
                              BinaryOp: +
                                BinaryOp: +
                                  ID: buf
                                  Constant: int, 4
                                Constant: int, 2
                              Constant: int, 0
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            UnaryOp: *
                              BinaryOp: +
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: buf
                                    Constant: int, 4
                                  Constant: int, 2
                                Constant: int, 1
                        Constant: int, 8
                  Constant: int, 16
          Compound: 
            If: 
              ID: ext_header
              Compound: 
                Assignment: =
                  ID: n
                  Constant: int, 0
                Compound: 
                  While: 
                    Constant: int, 1
                    Compound: 
                      Label: while_continue___1
                        EmptyStatement: 
                      If: 
                        UnaryOp: !
                          BinaryOp: <
                            ID: n
                            Constant: int, 16
                        Compound: 
                          Goto: while_break___1
                      If: 
                        BinaryOp: <
                          ID: inptr
                          ID: insize
                        Compound: 
                          Assignment: =
                            ID: tmp___9
                            ID: inptr
                          UnaryOp: p++
                            ID: inptr
                          Assignment: =
                            ID: tmp___11
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              ArrayRef: 
                                ID: inbuf
                                ID: tmp___9
                        Compound: 
                          Compound: 
                            Assignment: =
                              ID: tmp___10
                              FuncCall: 
                                ID: fill_inbuf
                                ExprList: 
                                  Constant: int, 0
                            Assignment: =
                              ID: tmp___11
                              ID: tmp___10
                      Assignment: =
                        ArrayRef: 
                          ID: buf
                          ID: n
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['uch']
                          ID: tmp___11
                      UnaryOp: p++
                        ID: n
                  Label: while_break___1
                    EmptyStatement: 
                Assignment: =
                  ID: orig_crc
                  BinaryOp: |
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      BinaryOp: |
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            UnaryOp: *
                              BinaryOp: +
                                BinaryOp: +
                                  ID: buf
                                  Constant: int, 4
                                Constant: int, 0
                        BinaryOp: <<
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: buf
                                    Constant: int, 4
                                  Constant: int, 1
                          Constant: int, 8
                    BinaryOp: <<
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ulg']
                        BinaryOp: |
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    BinaryOp: +
                                      ID: buf
                                      Constant: int, 4
                                    Constant: int, 2
                                  Constant: int, 0
                          BinaryOp: <<
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                UnaryOp: *
                                  BinaryOp: +
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: buf
                                        Constant: int, 4
                                      Constant: int, 2
                                    Constant: int, 1
                            Constant: int, 8
                      Constant: int, 16
                Assignment: =
                  ID: orig_len___0
                  BinaryOp: |
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      BinaryOp: |
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            UnaryOp: *
                              BinaryOp: +
                                BinaryOp: +
                                  ID: buf
                                  Constant: int, 12
                                Constant: int, 0
                        BinaryOp: <<
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: buf
                                    Constant: int, 12
                                  Constant: int, 1
                          Constant: int, 8
                    BinaryOp: <<
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ulg']
                        BinaryOp: |
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    BinaryOp: +
                                      ID: buf
                                      Constant: int, 12
                                    Constant: int, 2
                                  Constant: int, 0
                          BinaryOp: <<
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                UnaryOp: *
                                  BinaryOp: +
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: buf
                                        Constant: int, 12
                                      Constant: int, 2
                                    Constant: int, 1
                            Constant: int, 8
                      Constant: int, 16
        Compound: 
          Assignment: =
            ID: tmp___12
            FuncCall: 
              ID: updcrc
              ExprList: 
                ID: outbuf
                Constant: unsigned int, 0U
        If: 
          BinaryOp: !=
            ID: orig_crc
            ID: tmp___12
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "invalid compressed data--crc error"
        If: 
          BinaryOp: !=
            ID: orig_len___0
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['ulg']
              ID: bytes_out
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "invalid compressed data--length error"
        If: 
          ID: pkzip
          Compound: 
            If: 
              BinaryOp: <
                BinaryOp: +
                  ID: inptr
                  Constant: unsigned int, 4U
                ID: insize
              Compound: 
                If: 
                  BinaryOp: ==
                    BinaryOp: |
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ulg']
                        BinaryOp: |
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ush']
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: inbuf
                                    ID: inptr
                                  Constant: int, 0
                          BinaryOp: <<
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                UnaryOp: *
                                  BinaryOp: +
                                    BinaryOp: +
                                      ID: inbuf
                                      ID: inptr
                                    Constant: int, 1
                            Constant: int, 8
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          BinaryOp: |
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                UnaryOp: *
                                  BinaryOp: +
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: inbuf
                                        ID: inptr
                                      Constant: int, 2
                                    Constant: int, 0
                            BinaryOp: <<
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['ush']
                                  UnaryOp: *
                                    BinaryOp: +
                                      BinaryOp: +
                                        BinaryOp: +
                                          ID: inbuf
                                          ID: inptr
                                        Constant: int, 2
                                      Constant: int, 1
                              Constant: int, 8
                        Constant: int, 16
                    Constant: unsigned long int, 67324752UL
                  Compound: 
                    If: 
                      ID: to_stdout
                      Compound: 
                        If: 
                          UnaryOp: !
                            ID: quiet
                          Compound: 
                            Compound: 
                              FuncCall: 
                                ID: fprintf
                                ExprList: 
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['FILE']
                                    ID: stderr
                                  Cast: 
                                    Typename: None, ['const'], None
                                      PtrDecl: []
                                        TypeDecl: None, ['const'], None
                                          IdentifierType: ['char']
                                    Constant: string, "%s: %s has more than one entry--rest ignored\n"
                                  ID: progname
                                  ID: ifname
                        If: 
                          BinaryOp: ==
                            ID: exit_code
                            Constant: int, 0
                          Compound: 
                            Assignment: =
                              ID: exit_code
                              Constant: int, 2
                      Compound: 
                        Compound: 
                          FuncCall: 
                            ID: fprintf
                            ExprList: 
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['FILE']
                                ID: stderr
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['char']
                                Constant: string, "%s: %s has more than one entry -- unchanged\n"
                              ID: progname
                              ID: ifname
                          Assignment: =
                            ID: exit_code
                            Constant: int, 1
                          Assignment: =
                            ID: pkzip
                            Constant: int, 0
                          Assignment: =
                            ID: ext_header
                            ID: pkzip
                        Return: 
                          Constant: int, 1
        Assignment: =
          ID: pkzip
          Constant: int, 0
        Assignment: =
          ID: ext_header
          ID: pkzip
        Return: 
          Constant: int, 0
  Decl: file_read, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: buf, [], [], [], []
          PtrDecl: []
            TypeDecl: buf, [], None
              IdentifierType: ['char']
        Decl: size, [], [], [], []
          TypeDecl: size, [], None
            IdentifierType: ['unsigned', 'int']
      TypeDecl: file_read, [], None
        IdentifierType: ['int']
  Decl: bi_init, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: zipfile, [], [], [], []
          TypeDecl: zipfile, [], None
            IdentifierType: ['file_t']
      TypeDecl: bi_init, [], None
        IdentifierType: ['void']
  Decl: send_bits, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: value, [], [], [], []
          TypeDecl: value, [], None
            IdentifierType: ['int']
        Decl: length, [], [], [], []
          TypeDecl: length, [], None
            IdentifierType: ['int']
      TypeDecl: send_bits, [], None
        IdentifierType: ['void']
  Decl: bi_reverse, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: code, [], [], [], []
          TypeDecl: code, [], None
            IdentifierType: ['unsigned', 'int']
        Decl: len, [], [], [], []
          TypeDecl: len, [], None
            IdentifierType: ['int']
      TypeDecl: bi_reverse, [], None
        IdentifierType: ['unsigned', 'int']
  Decl: bi_windup, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: bi_windup, [], None
        IdentifierType: ['void']
  Decl: copy_block, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: buf, [], [], [], []
          PtrDecl: []
            TypeDecl: buf, [], None
              IdentifierType: ['char']
        Decl: len, [], [], [], []
          TypeDecl: len, [], None
            IdentifierType: ['unsigned', 'int']
        Decl: header, [], [], [], []
          TypeDecl: header, [], None
            IdentifierType: ['int']
      TypeDecl: copy_block, [], None
        IdentifierType: ['void']
  Decl: read_buf, [], [], [], []
    PtrDecl: []
      FuncDecl: 
        ParamList: 
          Decl: buf, [], [], [], []
            PtrDecl: []
              TypeDecl: buf, [], None
                IdentifierType: ['char']
          Decl: size, [], [], [], []
            TypeDecl: size, [], None
              IdentifierType: ['unsigned', 'int']
        TypeDecl: read_buf, [], None
          IdentifierType: ['int']
  Decl: zfile, [], [], ['static'], []
    TypeDecl: zfile, [], None
      IdentifierType: ['file_t']
  Decl: bi_buf, [], [], ['static'], []
    TypeDecl: bi_buf, [], None
      IdentifierType: ['unsigned', 'short']
  Decl: bi_valid, [], [], ['static'], []
    TypeDecl: bi_valid, [], None
      IdentifierType: ['int']
  FuncDef: 
    Decl: bi_init, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: zipfile, [], [], [], []
            TypeDecl: zipfile, [], None
              IdentifierType: ['file_t']
        TypeDecl: bi_init, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        Assignment: =
          ID: zfile
          ID: zipfile
        Assignment: =
          ID: bi_buf
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'short']
            Constant: int, 0
        Assignment: =
          ID: bi_valid
          Constant: int, 0
        If: 
          BinaryOp: !=
            ID: zfile
            UnaryOp: -
              Constant: int, 1
          Compound: 
            Assignment: =
              ID: read_buf
              UnaryOp: &
                ID: file_read
        Return: 
  FuncDef: 
    Decl: send_bits, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: value, [], [], [], []
            TypeDecl: value, [], None
              IdentifierType: ['int']
          Decl: length, [], [], [], []
            TypeDecl: length, [], None
              IdentifierType: ['int']
        TypeDecl: send_bits, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        If: 
          BinaryOp: >
            ID: bi_valid
            BinaryOp: -
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                BinaryOp: *
                  Constant: unsigned long int, 16UL
                  UnaryOp: sizeof
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
              ID: length
          Compound: 
            Assignment: =
              ID: bi_buf
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'short']
                BinaryOp: |
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ID: bi_buf
                  BinaryOp: <<
                    ID: value
                    ID: bi_valid
            If: 
              BinaryOp: <
                ID: outcnt
                Constant: unsigned int, 16382U
              Compound: 
                Assignment: =
                  ID: tmp
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: bi_buf
                      Constant: int, 255
                Assignment: =
                  ID: tmp___0
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: >>
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: bi_buf
                      Constant: int, 8
              Compound: 
                Assignment: =
                  ID: tmp___1
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___1
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: bi_buf
                      Constant: int, 255
                If: 
                  BinaryOp: ==
                    ID: outcnt
                    Constant: unsigned int, 16384U
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: flush_outbuf
                Assignment: =
                  ID: tmp___2
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___2
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: >>
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: bi_buf
                      Constant: int, 8
                If: 
                  BinaryOp: ==
                    ID: outcnt
                    Constant: unsigned int, 16384U
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: flush_outbuf
            Assignment: =
              ID: bi_buf
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'short']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      ID: value
                  BinaryOp: -
                    BinaryOp: *
                      Constant: unsigned long int, 16UL
                      UnaryOp: sizeof
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['char']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      ID: bi_valid
            Assignment: =
              ID: bi_valid
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                BinaryOp: +
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'long']
                    ID: bi_valid
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      ID: length
                    BinaryOp: *
                      Constant: unsigned long int, 16UL
                      UnaryOp: sizeof
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['char']
          Compound: 
            Assignment: =
              ID: bi_buf
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'short']
                BinaryOp: |
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ID: bi_buf
                  BinaryOp: <<
                    ID: value
                    ID: bi_valid
            Assignment: +=
              ID: bi_valid
              ID: length
        Return: 
  FuncDef: 
    Decl: bi_reverse, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: code, [], [], [], []
            TypeDecl: code, [], None
              IdentifierType: ['unsigned', 'int']
          Decl: len, [], [], [], []
            TypeDecl: len, [], None
              IdentifierType: ['int']
        TypeDecl: bi_reverse, [], None
          IdentifierType: ['unsigned', 'int']
    Compound: 
      Decl: res, [], [], ['register'], []
        TypeDecl: res, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Assignment: =
          ID: res
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Assignment: |=
                ID: res
                BinaryOp: &
                  ID: code
                  Constant: unsigned int, 1U
              Assignment: >>=
                ID: code
                Constant: int, 1
              Assignment: <<=
                ID: res
                Constant: int, 1
              UnaryOp: p--
                ID: len
              If: 
                UnaryOp: !
                  BinaryOp: >
                    ID: len
                    Constant: int, 0
                Compound: 
                  Goto: while_break
          Label: while_break
            EmptyStatement: 
        Return: 
          BinaryOp: >>
            ID: res
            Constant: int, 1
  FuncDef: 
    Decl: bi_windup, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: bi_windup, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        If: 
          BinaryOp: >
            ID: bi_valid
            Constant: int, 8
          Compound: 
            If: 
              BinaryOp: <
                ID: outcnt
                Constant: unsigned int, 16382U
              Compound: 
                Assignment: =
                  ID: tmp
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: bi_buf
                      Constant: int, 255
                Assignment: =
                  ID: tmp___0
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: >>
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: bi_buf
                      Constant: int, 8
              Compound: 
                Assignment: =
                  ID: tmp___1
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___1
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: bi_buf
                      Constant: int, 255
                If: 
                  BinaryOp: ==
                    ID: outcnt
                    Constant: unsigned int, 16384U
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: flush_outbuf
                Assignment: =
                  ID: tmp___2
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___2
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: >>
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: bi_buf
                      Constant: int, 8
                If: 
                  BinaryOp: ==
                    ID: outcnt
                    Constant: unsigned int, 16384U
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: flush_outbuf
          Compound: 
            If: 
              BinaryOp: >
                ID: bi_valid
                Constant: int, 0
              Compound: 
                Assignment: =
                  ID: tmp___3
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___3
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    ID: bi_buf
                If: 
                  BinaryOp: ==
                    ID: outcnt
                    Constant: unsigned int, 16384U
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: flush_outbuf
        Assignment: =
          ID: bi_buf
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'short']
            Constant: int, 0
        Assignment: =
          ID: bi_valid
          Constant: int, 0
        Return: 
  FuncDef: 
    Decl: copy_block, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: buf, [], [], [], []
            PtrDecl: []
              TypeDecl: buf, [], None
                IdentifierType: ['char']
          Decl: len, [], [], [], []
            TypeDecl: len, [], None
              IdentifierType: ['unsigned', 'int']
          Decl: header, [], [], [], []
            TypeDecl: header, [], None
              IdentifierType: ['int']
        TypeDecl: copy_block, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___8, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___8, [], None
            IdentifierType: ['char']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Compound: 
          FuncCall: 
            ID: bi_windup
        If: 
          ID: header
          Compound: 
            If: 
              BinaryOp: <
                ID: outcnt
                Constant: unsigned int, 16382U
              Compound: 
                Assignment: =
                  ID: tmp
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          ID: len
                      Constant: int, 255
                Assignment: =
                  ID: tmp___0
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: >>
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          ID: len
                      Constant: int, 8
              Compound: 
                Assignment: =
                  ID: tmp___1
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___1
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          ID: len
                      Constant: int, 255
                If: 
                  BinaryOp: ==
                    ID: outcnt
                    Constant: unsigned int, 16384U
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: flush_outbuf
                Assignment: =
                  ID: tmp___2
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___2
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: >>
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          ID: len
                      Constant: int, 8
                If: 
                  BinaryOp: ==
                    ID: outcnt
                    Constant: unsigned int, 16384U
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: flush_outbuf
            If: 
              BinaryOp: <
                ID: outcnt
                Constant: unsigned int, 16382U
              Compound: 
                Assignment: =
                  ID: tmp___3
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___3
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          UnaryOp: ~
                            ID: len
                      Constant: int, 255
                Assignment: =
                  ID: tmp___4
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___4
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: >>
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          UnaryOp: ~
                            ID: len
                      Constant: int, 8
              Compound: 
                Assignment: =
                  ID: tmp___5
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___5
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          UnaryOp: ~
                            ID: len
                      Constant: int, 255
                If: 
                  BinaryOp: ==
                    ID: outcnt
                    Constant: unsigned int, 16384U
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: flush_outbuf
                Assignment: =
                  ID: tmp___6
                  ID: outcnt
                UnaryOp: p++
                  ID: outcnt
                Assignment: =
                  ArrayRef: 
                    ID: outbuf
                    ID: tmp___6
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: >>
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ush']
                          UnaryOp: ~
                            ID: len
                      Constant: int, 8
                If: 
                  BinaryOp: ==
                    ID: outcnt
                    Constant: unsigned int, 16384U
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: flush_outbuf
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Assignment: =
                ID: tmp___9
                ID: len
              UnaryOp: p--
                ID: len
              If: 
                UnaryOp: !
                  ID: tmp___9
                Compound: 
                  Goto: while_break
              Assignment: =
                ID: tmp___7
                ID: outcnt
              UnaryOp: p++
                ID: outcnt
              Assignment: =
                ID: tmp___8
                ID: buf
              UnaryOp: p++
                ID: buf
              Assignment: =
                ArrayRef: 
                  ID: outbuf
                  ID: tmp___7
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['uch']
                  UnaryOp: *
                    ID: tmp___8
              If: 
                BinaryOp: ==
                  ID: outcnt
                  Constant: unsigned int, 16384U
                Compound: 
                  Compound: 
                    FuncCall: 
                      ID: flush_outbuf
          Label: while_break
            EmptyStatement: 
        Return: 
  Decl: level, [], [], [], []
    TypeDecl: level, [], None
      IdentifierType: ['int']
  Decl: ct_init, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: attr, [], [], [], []
          PtrDecl: []
            TypeDecl: attr, [], None
              IdentifierType: ['ush']
        Decl: methodp, [], [], [], []
          PtrDecl: []
            TypeDecl: methodp, [], None
              IdentifierType: ['int']
      TypeDecl: ct_init, [], None
        IdentifierType: ['void']
  Decl: ct_tally, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: dist, [], [], [], []
          TypeDecl: dist, [], None
            IdentifierType: ['int']
        Decl: lc, [], [], [], []
          TypeDecl: lc, [], None
            IdentifierType: ['int']
      TypeDecl: ct_tally, [], None
        IdentifierType: ['int']
  Decl: flush_block, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: buf, [], [], [], []
          PtrDecl: []
            TypeDecl: buf, [], None
              IdentifierType: ['char']
        Decl: stored_len, [], [], [], []
          TypeDecl: stored_len, [], None
            IdentifierType: ['ulg']
        Decl: eof, [], [], [], []
          TypeDecl: eof, [], None
            IdentifierType: ['int']
      TypeDecl: flush_block, [], None
        IdentifierType: ['ulg']
  Decl: extra_lbits, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: extra_lbits, [], None
        IdentifierType: ['int']
      Constant: int, 29
    InitList: 
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 1
      Constant: int, 1
      Constant: int, 1
      Constant: int, 1
      Constant: int, 2
      Constant: int, 2
      Constant: int, 2
      Constant: int, 2
      Constant: int, 3
      Constant: int, 3
      Constant: int, 3
      Constant: int, 3
      Constant: int, 4
      Constant: int, 4
      Constant: int, 4
      Constant: int, 4
      Constant: int, 5
      Constant: int, 5
      Constant: int, 5
      Constant: int, 5
      Constant: int, 0
  Decl: extra_dbits, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: extra_dbits, [], None
        IdentifierType: ['int']
      Constant: int, 30
    InitList: 
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 1
      Constant: int, 1
      Constant: int, 2
      Constant: int, 2
      Constant: int, 3
      Constant: int, 3
      Constant: int, 4
      Constant: int, 4
      Constant: int, 5
      Constant: int, 5
      Constant: int, 6
      Constant: int, 6
      Constant: int, 7
      Constant: int, 7
      Constant: int, 8
      Constant: int, 8
      Constant: int, 9
      Constant: int, 9
      Constant: int, 10
      Constant: int, 10
      Constant: int, 11
      Constant: int, 11
      Constant: int, 12
      Constant: int, 12
      Constant: int, 13
      Constant: int, 13
  Decl: extra_blbits, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: extra_blbits, [], None
        IdentifierType: ['int']
      Constant: int, 19
    InitList: 
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 0
      Constant: int, 2
      Constant: int, 3
      Constant: int, 7
  Decl: dyn_ltree, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: dyn_ltree, [], None
        IdentifierType: ['ct_data']
      Constant: int, 573
  Decl: dyn_dtree, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: dyn_dtree, [], None
        IdentifierType: ['ct_data']
      Constant: int, 61
  Decl: static_ltree, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: static_ltree, [], None
        IdentifierType: ['ct_data']
      Constant: int, 288
  Decl: static_dtree, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: static_dtree, [], None
        IdentifierType: ['ct_data']
      Constant: int, 30
  Decl: bl_tree, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: bl_tree, [], None
        IdentifierType: ['ct_data']
      Constant: int, 39
  Decl: l_desc, [], [], ['static'], []
    TypeDecl: l_desc, [], None
      IdentifierType: ['tree_desc']
    InitList: 
      ID: dyn_ltree
      ID: static_ltree
      ID: extra_lbits
      Constant: int, 257
      Constant: int, 286
      Constant: int, 15
      Constant: int, 0
  Decl: d_desc, [], [], ['static'], []
    TypeDecl: d_desc, [], None
      IdentifierType: ['tree_desc']
    InitList: 
      ID: dyn_dtree
      ID: static_dtree
      ID: extra_dbits
      Constant: int, 0
      Constant: int, 30
      Constant: int, 15
      Constant: int, 0
  Decl: bl_desc, [], [], ['static'], []
    TypeDecl: bl_desc, [], None
      IdentifierType: ['tree_desc']
    InitList: 
      ID: bl_tree
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['ct_data']
        Constant: int, 0
      ID: extra_blbits
      Constant: int, 0
      Constant: int, 19
      Constant: int, 7
      Constant: int, 0
  Decl: bl_count, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: bl_count, [], None
        IdentifierType: ['ush']
      Constant: int, 16
  Decl: bl_order, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: bl_order, [], None
        IdentifierType: ['uch']
      Constant: int, 19
    InitList: 
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 16
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 17
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 18
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 0
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 8
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 7
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 9
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 6
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 10
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 5
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 11
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 4
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 12
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 3
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 13
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 2
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 14
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 1
      Cast: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['uch']
        Constant: int, 15
  Decl: heap, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: heap, [], None
        IdentifierType: ['int']
      Constant: int, 573
  Decl: heap_len, [], [], ['static'], []
    TypeDecl: heap_len, [], None
      IdentifierType: ['int']
  Decl: heap_max, [], [], ['static'], []
    TypeDecl: heap_max, [], None
      IdentifierType: ['int']
  Decl: depth, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: depth, [], None
        IdentifierType: ['uch']
      Constant: int, 573
  Decl: length_code, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: length_code, [], None
        IdentifierType: ['uch']
      Constant: int, 256
  Decl: dist_code, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: dist_code, [], None
        IdentifierType: ['uch']
      Constant: int, 512
  Decl: base_length, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: base_length, [], None
        IdentifierType: ['int']
      Constant: int, 29
  Decl: base_dist, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: base_dist, [], None
        IdentifierType: ['int']
      Constant: int, 30
  Decl: flag_buf, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: flag_buf, [], None
        IdentifierType: ['uch']
      Constant: int, 4096
  Decl: last_lit, [], [], ['static'], []
    TypeDecl: last_lit, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: last_dist, [], [], ['static'], []
    TypeDecl: last_dist, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: last_flags, [], [], ['static'], []
    TypeDecl: last_flags, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: flags, [], [], ['static'], []
    TypeDecl: flags, [], None
      IdentifierType: ['uch']
  Decl: flag_bit, [], [], ['static'], []
    TypeDecl: flag_bit, [], None
      IdentifierType: ['uch']
  Decl: opt_len, [], [], ['static'], []
    TypeDecl: opt_len, [], None
      IdentifierType: ['ulg']
  Decl: static_len, [], [], ['static'], []
    TypeDecl: static_len, [], None
      IdentifierType: ['ulg']
  Decl: compressed_len, [], [], ['static'], []
    TypeDecl: compressed_len, [], None
      IdentifierType: ['ulg']
  Decl: input_len, [], [], ['static'], []
    TypeDecl: input_len, [], None
      IdentifierType: ['ulg']
  Decl: file_type, [], [], [], []
    PtrDecl: []
      TypeDecl: file_type, [], None
        IdentifierType: ['ush']
  Decl: file_method, [], [], [], []
    PtrDecl: []
      TypeDecl: file_method, [], None
        IdentifierType: ['int']
  Decl: block_start, [], [], [], []
    TypeDecl: block_start, [], None
      IdentifierType: ['long']
  Decl: strstart, [], [], [], []
    TypeDecl: strstart, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: init_block, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: init_block, [], None
        IdentifierType: ['void']
  Decl: pqdownheap, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: tree, [], [], [], []
          PtrDecl: []
            TypeDecl: tree, [], None
              IdentifierType: ['ct_data']
        Decl: k, [], [], [], []
          TypeDecl: k, [], None
            IdentifierType: ['int']
      TypeDecl: pqdownheap, [], None
        IdentifierType: ['void']
  Decl: gen_bitlen, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: desc, [], [], [], []
          PtrDecl: []
            TypeDecl: desc, [], None
              IdentifierType: ['tree_desc']
      TypeDecl: gen_bitlen, [], None
        IdentifierType: ['void']
  Decl: gen_codes, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: tree, [], [], [], []
          PtrDecl: []
            TypeDecl: tree, [], None
              IdentifierType: ['ct_data']
        Decl: max_code, [], [], [], []
          TypeDecl: max_code, [], None
            IdentifierType: ['int']
      TypeDecl: gen_codes, [], None
        IdentifierType: ['void']
  Decl: build_tree___0, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: desc, [], [], [], []
          PtrDecl: []
            TypeDecl: desc, [], None
              IdentifierType: ['tree_desc']
      TypeDecl: build_tree___0, [], None
        IdentifierType: ['void']
  Decl: scan_tree, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: tree, [], [], [], []
          PtrDecl: []
            TypeDecl: tree, [], None
              IdentifierType: ['ct_data']
        Decl: max_code, [], [], [], []
          TypeDecl: max_code, [], None
            IdentifierType: ['int']
      TypeDecl: scan_tree, [], None
        IdentifierType: ['void']
  Decl: send_tree, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: tree, [], [], [], []
          PtrDecl: []
            TypeDecl: tree, [], None
              IdentifierType: ['ct_data']
        Decl: max_code, [], [], [], []
          TypeDecl: max_code, [], None
            IdentifierType: ['int']
      TypeDecl: send_tree, [], None
        IdentifierType: ['void']
  Decl: build_bl_tree, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: build_bl_tree, [], None
        IdentifierType: ['int']
  Decl: send_all_trees, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: lcodes, [], [], [], []
          TypeDecl: lcodes, [], None
            IdentifierType: ['int']
        Decl: dcodes, [], [], [], []
          TypeDecl: dcodes, [], None
            IdentifierType: ['int']
        Decl: blcodes, [], [], [], []
          TypeDecl: blcodes, [], None
            IdentifierType: ['int']
      TypeDecl: send_all_trees, [], None
        IdentifierType: ['void']
  Decl: compress_block, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: ltree, [], [], [], []
          PtrDecl: []
            TypeDecl: ltree, [], None
              IdentifierType: ['ct_data']
        Decl: dtree, [], [], [], []
          PtrDecl: []
            TypeDecl: dtree, [], None
              IdentifierType: ['ct_data']
      TypeDecl: compress_block, [], None
        IdentifierType: ['void']
  Decl: set_file_type, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: set_file_type, [], None
        IdentifierType: ['void']
  FuncDef: 
    Decl: ct_init, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: attr, [], [], [], []
            PtrDecl: []
              TypeDecl: attr, [], None
                IdentifierType: ['ush']
          Decl: methodp, [], [], [], []
            PtrDecl: []
              TypeDecl: methodp, [], None
                IdentifierType: ['int']
        TypeDecl: ct_init, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: bits, [], [], [], []
        TypeDecl: bits, [], None
          IdentifierType: ['int']
      Decl: length, [], [], [], []
        TypeDecl: length, [], None
          IdentifierType: ['int']
      Decl: code, [], [], [], []
        TypeDecl: code, [], None
          IdentifierType: ['int']
      Decl: dist, [], [], [], []
        TypeDecl: dist, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: file_type
          ID: attr
        Assignment: =
          ID: file_method
          ID: methodp
        Assignment: =
          ID: input_len
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ulg']
            Constant: long int, 0L
        Assignment: =
          ID: compressed_len
          ID: input_len
        If: 
          BinaryOp: !=
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              StructRef: .
                StructRef: .
                  ArrayRef: 
                    ID: static_dtree
                    Constant: int, 0
                  ID: dl
                ID: len
            Constant: int, 0
          Compound: 
            Return: 
        Assignment: =
          ID: length
          Constant: int, 0
        Assignment: =
          ID: code
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: code
                    Constant: int, 28
                Compound: 
                  Goto: while_break
              Assignment: =
                ArrayRef: 
                  ID: base_length
                  ID: code
                ID: length
              Assignment: =
                ID: n
                Constant: int, 0
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___0
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: <
                          ID: n
                          BinaryOp: <<
                            Constant: int, 1
                            ArrayRef: 
                              ID: extra_lbits
                              ID: code
                      Compound: 
                        Goto: while_break___0
                    Assignment: =
                      ID: tmp
                      ID: length
                    UnaryOp: p++
                      ID: length
                    Assignment: =
                      ArrayRef: 
                        ID: length_code
                        ID: tmp
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['uch']
                        ID: code
                    UnaryOp: p++
                      ID: n
                Label: while_break___0
                  EmptyStatement: 
              UnaryOp: p++
                ID: code
          Label: while_break
            EmptyStatement: 
        Assignment: =
          ArrayRef: 
            ID: length_code
            BinaryOp: -
              ID: length
              Constant: int, 1
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            ID: code
        Assignment: =
          ID: dist
          Constant: int, 0
        Assignment: =
          ID: code
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: code
                    Constant: int, 16
                Compound: 
                  Goto: while_break___1
              Assignment: =
                ArrayRef: 
                  ID: base_dist
                  ID: code
                ID: dist
              Assignment: =
                ID: n
                Constant: int, 0
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___2
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: <
                          ID: n
                          BinaryOp: <<
                            Constant: int, 1
                            ArrayRef: 
                              ID: extra_dbits
                              ID: code
                      Compound: 
                        Goto: while_break___2
                    Assignment: =
                      ID: tmp___0
                      ID: dist
                    UnaryOp: p++
                      ID: dist
                    Assignment: =
                      ArrayRef: 
                        ID: dist_code
                        ID: tmp___0
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['uch']
                        ID: code
                    UnaryOp: p++
                      ID: n
                Label: while_break___2
                  EmptyStatement: 
              UnaryOp: p++
                ID: code
          Label: while_break___1
            EmptyStatement: 
        Assignment: >>=
          ID: dist
          Constant: int, 7
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___3
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: code
                    Constant: int, 30
                Compound: 
                  Goto: while_break___3
              Assignment: =
                ArrayRef: 
                  ID: base_dist
                  ID: code
                BinaryOp: <<
                  ID: dist
                  Constant: int, 7
              Assignment: =
                ID: n
                Constant: int, 0
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___4
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: <
                          ID: n
                          BinaryOp: <<
                            Constant: int, 1
                            BinaryOp: -
                              ArrayRef: 
                                ID: extra_dbits
                                ID: code
                              Constant: int, 7
                      Compound: 
                        Goto: while_break___4
                    Assignment: =
                      ID: tmp___1
                      ID: dist
                    UnaryOp: p++
                      ID: dist
                    Assignment: =
                      ArrayRef: 
                        ID: dist_code
                        BinaryOp: +
                          Constant: int, 256
                          ID: tmp___1
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['uch']
                        ID: code
                    UnaryOp: p++
                      ID: n
                Label: while_break___4
                  EmptyStatement: 
              UnaryOp: p++
                ID: code
          Label: while_break___3
            EmptyStatement: 
        Assignment: =
          ID: bits
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___5
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: bits
                    Constant: int, 15
                Compound: 
                  Goto: while_break___5
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  ID: bits
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 0
              UnaryOp: p++
                ID: bits
          Label: while_break___5
            EmptyStatement: 
        Assignment: =
          ID: n
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___6
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: n
                    Constant: int, 143
                Compound: 
                  Goto: while_break___6
              Assignment: =
                ID: tmp___2
                ID: n
              UnaryOp: p++
                ID: n
              Assignment: =
                StructRef: .
                  StructRef: .
                    ArrayRef: 
                      ID: static_ltree
                      ID: tmp___2
                    ID: dl
                  ID: len
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 8
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  Constant: int, 8
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: bl_count
                        Constant: int, 8
                    Constant: int, 1
          Label: while_break___6
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___7
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: n
                    Constant: int, 255
                Compound: 
                  Goto: while_break___7
              Assignment: =
                ID: tmp___3
                ID: n
              UnaryOp: p++
                ID: n
              Assignment: =
                StructRef: .
                  StructRef: .
                    ArrayRef: 
                      ID: static_ltree
                      ID: tmp___3
                    ID: dl
                  ID: len
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 9
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  Constant: int, 9
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: bl_count
                        Constant: int, 9
                    Constant: int, 1
          Label: while_break___7
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___8
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: n
                    Constant: int, 279
                Compound: 
                  Goto: while_break___8
              Assignment: =
                ID: tmp___4
                ID: n
              UnaryOp: p++
                ID: n
              Assignment: =
                StructRef: .
                  StructRef: .
                    ArrayRef: 
                      ID: static_ltree
                      ID: tmp___4
                    ID: dl
                  ID: len
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 7
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  Constant: int, 7
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: bl_count
                        Constant: int, 7
                    Constant: int, 1
          Label: while_break___8
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___9
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: n
                    Constant: int, 287
                Compound: 
                  Goto: while_break___9
              Assignment: =
                ID: tmp___5
                ID: n
              UnaryOp: p++
                ID: n
              Assignment: =
                StructRef: .
                  StructRef: .
                    ArrayRef: 
                      ID: static_ltree
                      ID: tmp___5
                    ID: dl
                  ID: len
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 8
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  Constant: int, 8
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: bl_count
                        Constant: int, 8
                    Constant: int, 1
          Label: while_break___9
            EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: gen_codes
            ExprList: 
              ID: static_ltree
              Constant: int, 287
          Assignment: =
            ID: n
            Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___10
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: n
                    Constant: int, 30
                Compound: 
                  Goto: while_break___10
              Compound: 
                Assignment: =
                  StructRef: .
                    StructRef: .
                      ArrayRef: 
                        ID: static_dtree
                        ID: n
                      ID: dl
                    ID: len
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                    Constant: int, 5
                Assignment: =
                  StructRef: .
                    StructRef: .
                      ArrayRef: 
                        ID: static_dtree
                        ID: n
                      ID: fc
                    ID: code
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                    FuncCall: 
                      ID: bi_reverse
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ID: n
                        Constant: int, 5
                UnaryOp: p++
                  ID: n
          Label: while_break___10
            EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: init_block
        Return: 
  FuncDef: 
    Decl: init_block, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: init_block, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: n
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: n
                    Constant: int, 286
                Compound: 
                  Goto: while_break
              Assignment: =
                StructRef: .
                  StructRef: .
                    ArrayRef: 
                      ID: dyn_ltree
                      ID: n
                    ID: fc
                  ID: freq
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 0
              UnaryOp: p++
                ID: n
          Label: while_break
            EmptyStatement: 
        Assignment: =
          ID: n
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: n
                    Constant: int, 30
                Compound: 
                  Goto: while_break___0
              Assignment: =
                StructRef: .
                  StructRef: .
                    ArrayRef: 
                      ID: dyn_dtree
                      ID: n
                    ID: fc
                  ID: freq
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 0
              UnaryOp: p++
                ID: n
          Label: while_break___0
            EmptyStatement: 
        Assignment: =
          ID: n
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: n
                    Constant: int, 19
                Compound: 
                  Goto: while_break___1
              Assignment: =
                StructRef: .
                  StructRef: .
                    ArrayRef: 
                      ID: bl_tree
                      ID: n
                    ID: fc
                  ID: freq
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 0
              UnaryOp: p++
                ID: n
          Label: while_break___1
            EmptyStatement: 
        Assignment: =
          StructRef: .
            StructRef: .
              ArrayRef: 
                ID: dyn_ltree
                Constant: int, 256
              ID: fc
            ID: freq
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ush']
            Constant: int, 1
        Assignment: =
          ID: static_len
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ulg']
            Constant: long int, 0L
        Assignment: =
          ID: opt_len
          ID: static_len
        Assignment: =
          ID: last_flags
          Constant: unsigned int, 0U
        Assignment: =
          ID: last_dist
          ID: last_flags
        Assignment: =
          ID: last_lit
          ID: last_dist
        Assignment: =
          ID: flags
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            Constant: int, 0
        Assignment: =
          ID: flag_bit
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            Constant: int, 1
        Return: 
  FuncDef: 
    Decl: pqdownheap, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: tree, [], [], [], []
            PtrDecl: []
              TypeDecl: tree, [], None
                IdentifierType: ['ct_data']
          Decl: k, [], [], [], []
            TypeDecl: k, [], None
              IdentifierType: ['int']
        TypeDecl: pqdownheap, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: v, [], [], [], []
        TypeDecl: v, [], None
          IdentifierType: ['int']
      Decl: j___0, [], [], [], []
        TypeDecl: j___0, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: v
          ArrayRef: 
            ID: heap
            ID: k
        Assignment: =
          ID: j___0
          BinaryOp: <<
            ID: k
            Constant: int, 1
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: j___0
                    ID: heap_len
                Compound: 
                  Goto: while_break
              If: 
                BinaryOp: <
                  ID: j___0
                  ID: heap_len
                Compound: 
                  If: 
                    BinaryOp: <
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        StructRef: .
                          StructRef: ->
                            BinaryOp: +
                              ID: tree
                              ArrayRef: 
                                ID: heap
                                BinaryOp: +
                                  ID: j___0
                                  Constant: int, 1
                            ID: fc
                          ID: freq
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        StructRef: .
                          StructRef: ->
                            BinaryOp: +
                              ID: tree
                              ArrayRef: 
                                ID: heap
                                ID: j___0
                            ID: fc
                          ID: freq
                    Compound: 
                      UnaryOp: p++
                        ID: j___0
                    Compound: 
                      If: 
                        BinaryOp: ==
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            StructRef: .
                              StructRef: ->
                                BinaryOp: +
                                  ID: tree
                                  ArrayRef: 
                                    ID: heap
                                    BinaryOp: +
                                      ID: j___0
                                      Constant: int, 1
                                ID: fc
                              ID: freq
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            StructRef: .
                              StructRef: ->
                                BinaryOp: +
                                  ID: tree
                                  ArrayRef: 
                                    ID: heap
                                    ID: j___0
                                ID: fc
                              ID: freq
                        Compound: 
                          If: 
                            BinaryOp: <=
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                ArrayRef: 
                                  ID: depth
                                  ArrayRef: 
                                    ID: heap
                                    BinaryOp: +
                                      ID: j___0
                                      Constant: int, 1
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                ArrayRef: 
                                  ID: depth
                                  ArrayRef: 
                                    ID: heap
                                    ID: j___0
                            Compound: 
                              UnaryOp: p++
                                ID: j___0
              If: 
                BinaryOp: <
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    StructRef: .
                      StructRef: ->
                        BinaryOp: +
                          ID: tree
                          ID: v
                        ID: fc
                      ID: freq
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    StructRef: .
                      StructRef: ->
                        BinaryOp: +
                          ID: tree
                          ArrayRef: 
                            ID: heap
                            ID: j___0
                        ID: fc
                      ID: freq
                Compound: 
                  Goto: while_break
                Compound: 
                  If: 
                    BinaryOp: ==
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        StructRef: .
                          StructRef: ->
                            BinaryOp: +
                              ID: tree
                              ID: v
                            ID: fc
                          ID: freq
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        StructRef: .
                          StructRef: ->
                            BinaryOp: +
                              ID: tree
                              ArrayRef: 
                                ID: heap
                                ID: j___0
                            ID: fc
                          ID: freq
                    Compound: 
                      If: 
                        BinaryOp: <=
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: depth
                              ID: v
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: depth
                              ArrayRef: 
                                ID: heap
                                ID: j___0
                        Compound: 
                          Goto: while_break
              Assignment: =
                ArrayRef: 
                  ID: heap
                  ID: k
                ArrayRef: 
                  ID: heap
                  ID: j___0
              Assignment: =
                ID: k
                ID: j___0
              Assignment: <<=
                ID: j___0
                Constant: int, 1
          Label: while_break
            EmptyStatement: 
        Assignment: =
          ArrayRef: 
            ID: heap
            ID: k
          ID: v
        Return: 
  FuncDef: 
    Decl: gen_bitlen, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: desc, [], [], [], []
            PtrDecl: []
              TypeDecl: desc, [], None
                IdentifierType: ['tree_desc']
        TypeDecl: gen_bitlen, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: tree, [], [], [], []
        PtrDecl: []
          TypeDecl: tree, [], None
            IdentifierType: ['ct_data']
      Decl: extra, [], [], [], []
        PtrDecl: []
          TypeDecl: extra, [], None
            IdentifierType: ['int']
      Decl: base, [], [], [], []
        TypeDecl: base, [], None
          IdentifierType: ['int']
      Decl: max_code, [], [], [], []
        TypeDecl: max_code, [], None
          IdentifierType: ['int']
      Decl: max_length, [], [], [], []
        TypeDecl: max_length, [], None
          IdentifierType: ['int']
      Decl: stree, [], [], [], []
        PtrDecl: []
          TypeDecl: stree, [], None
            IdentifierType: ['ct_data']
      Decl: h, [], [], [], []
        TypeDecl: h, [], None
          IdentifierType: ['int']
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: m, [], [], [], []
        TypeDecl: m, [], None
          IdentifierType: ['int']
      Decl: bits, [], [], [], []
        TypeDecl: bits, [], None
          IdentifierType: ['int']
      Decl: xbits, [], [], [], []
        TypeDecl: xbits, [], None
          IdentifierType: ['int']
      Decl: f, [], [], [], []
        TypeDecl: f, [], None
          IdentifierType: ['ush']
      Decl: overflow, [], [], [], []
        TypeDecl: overflow, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: tree
          StructRef: ->
            ID: desc
            ID: dyn_tree
        Assignment: =
          ID: extra
          StructRef: ->
            ID: desc
            ID: extra_bits
        Assignment: =
          ID: base
          StructRef: ->
            ID: desc
            ID: extra_base
        Assignment: =
          ID: max_code
          StructRef: ->
            ID: desc
            ID: max_code
        Assignment: =
          ID: max_length
          StructRef: ->
            ID: desc
            ID: max_length
        Assignment: =
          ID: stree
          StructRef: ->
            ID: desc
            ID: static_tree
        Assignment: =
          ID: overflow
          Constant: int, 0
        Assignment: =
          ID: bits
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: bits
                    Constant: int, 15
                Compound: 
                  Goto: while_break
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  ID: bits
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 0
              UnaryOp: p++
                ID: bits
          Label: while_break
            EmptyStatement: 
        Assignment: =
          StructRef: .
            StructRef: ->
              BinaryOp: +
                ID: tree
                ArrayRef: 
                  ID: heap
                  ID: heap_max
              ID: dl
            ID: len
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ush']
            Constant: int, 0
        Assignment: =
          ID: h
          BinaryOp: +
            ID: heap_max
            Constant: int, 1
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: h
                    Constant: int, 573
                Compound: 
                  Goto: while_break___0
              Assignment: =
                ID: n
                ArrayRef: 
                  ID: heap
                  ID: h
              Assignment: =
                ID: bits
                BinaryOp: +
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    StructRef: .
                      StructRef: ->
                        BinaryOp: +
                          ID: tree
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            StructRef: .
                              StructRef: ->
                                BinaryOp: +
                                  ID: tree
                                  ID: n
                                ID: dl
                              ID: dad
                        ID: dl
                      ID: len
                  Constant: int, 1
              If: 
                BinaryOp: >
                  ID: bits
                  ID: max_length
                Compound: 
                  Assignment: =
                    ID: bits
                    ID: max_length
                  UnaryOp: p++
                    ID: overflow
              Assignment: =
                StructRef: .
                  StructRef: ->
                    BinaryOp: +
                      ID: tree
                      ID: n
                    ID: dl
                  ID: len
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  ID: bits
              If: 
                BinaryOp: >
                  ID: n
                  ID: max_code
                Compound: 
                  Goto: __Cont
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  ID: bits
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: bl_count
                        ID: bits
                    Constant: int, 1
              Assignment: =
                ID: xbits
                Constant: int, 0
              If: 
                BinaryOp: >=
                  ID: n
                  ID: base
                Compound: 
                  Assignment: =
                    ID: xbits
                    UnaryOp: *
                      BinaryOp: +
                        ID: extra
                        BinaryOp: -
                          ID: n
                          ID: base
              Assignment: =
                ID: f
                StructRef: .
                  StructRef: ->
                    BinaryOp: +
                      ID: tree
                      ID: n
                    ID: fc
                  ID: freq
              Assignment: +=
                ID: opt_len
                BinaryOp: *
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    ID: f
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    BinaryOp: +
                      ID: bits
                      ID: xbits
              If: 
                ID: stree
                Compound: 
                  Assignment: +=
                    ID: static_len
                    BinaryOp: *
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ulg']
                        ID: f
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['ulg']
                        BinaryOp: +
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            StructRef: .
                              StructRef: ->
                                BinaryOp: +
                                  ID: stree
                                  ID: n
                                ID: dl
                              ID: len
                          ID: xbits
              Label: __Cont
                UnaryOp: p++
                  ID: h
          Label: while_break___0
            EmptyStatement: 
        If: 
          BinaryOp: ==
            ID: overflow
            Constant: int, 0
          Compound: 
            Return: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              Assignment: =
                ID: bits
                BinaryOp: -
                  ID: max_length
                  Constant: int, 1
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___2
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: ==
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: bl_count
                              ID: bits
                          Constant: int, 0
                      Compound: 
                        Goto: while_break___2
                    UnaryOp: p--
                      ID: bits
                Label: while_break___2
                  EmptyStatement: 
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  ID: bits
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: bl_count
                        ID: bits
                    Constant: int, 1
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  BinaryOp: +
                    ID: bits
                    Constant: int, 1
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: +
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: bl_count
                        BinaryOp: +
                          ID: bits
                          Constant: int, 1
                    Constant: int, 2
              Assignment: =
                ArrayRef: 
                  ID: bl_count
                  ID: max_length
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: bl_count
                        ID: max_length
                    Constant: int, 1
              Assignment: -=
                ID: overflow
                Constant: int, 2
              If: 
                UnaryOp: !
                  BinaryOp: >
                    ID: overflow
                    Constant: int, 0
                Compound: 
                  Goto: while_break___1
          Label: while_break___1
            EmptyStatement: 
        Assignment: =
          ID: bits
          ID: max_length
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___3
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    ID: bits
                    Constant: int, 0
                Compound: 
                  Goto: while_break___3
              Assignment: =
                ID: n
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  ArrayRef: 
                    ID: bl_count
                    ID: bits
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___4
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        BinaryOp: !=
                          ID: n
                          Constant: int, 0
                      Compound: 
                        Goto: while_break___4
                    UnaryOp: p--
                      ID: h
                    Assignment: =
                      ID: m
                      ArrayRef: 
                        ID: heap
                        ID: h
                    If: 
                      BinaryOp: >
                        ID: m
                        ID: max_code
                      Compound: 
                        Goto: while_continue___4
                    If: 
                      BinaryOp: !=
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          StructRef: .
                            StructRef: ->
                              BinaryOp: +
                                ID: tree
                                ID: m
                              ID: dl
                            ID: len
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ID: bits
                      Compound: 
                        Assignment: +=
                          ID: opt_len
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ulg']
                            BinaryOp: *
                              BinaryOp: -
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['long']
                                  ID: bits
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['long']
                                  StructRef: .
                                    StructRef: ->
                                      BinaryOp: +
                                        ID: tree
                                        ID: m
                                      ID: dl
                                    ID: len
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['long']
                                StructRef: .
                                  StructRef: ->
                                    BinaryOp: +
                                      ID: tree
                                      ID: m
                                    ID: fc
                                  ID: freq
                        Assignment: =
                          StructRef: .
                            StructRef: ->
                              BinaryOp: +
                                ID: tree
                                ID: m
                              ID: dl
                            ID: len
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            ID: bits
                    UnaryOp: p--
                      ID: n
                Label: while_break___4
                  EmptyStatement: 
              UnaryOp: p--
                ID: bits
          Label: while_break___3
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: gen_codes, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: tree, [], [], [], []
            PtrDecl: []
              TypeDecl: tree, [], None
                IdentifierType: ['ct_data']
          Decl: max_code, [], [], [], []
            TypeDecl: max_code, [], None
              IdentifierType: ['int']
        TypeDecl: gen_codes, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: next_code, [], [], [], []
        ArrayDecl: []
          TypeDecl: next_code, [], None
            IdentifierType: ['ush']
          Constant: int, 16
      Decl: code, [], [], [], []
        TypeDecl: code, [], None
          IdentifierType: ['ush']
      Decl: bits, [], [], [], []
        TypeDecl: bits, [], None
          IdentifierType: ['int']
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['ush']
      Decl: __cil_tmp10, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp10, [], None
            IdentifierType: ['void']
      Compound: 
        Assignment: =
          ID: code
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ush']
            Constant: int, 0
        Assignment: =
          ID: bits
          Constant: int, 1
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: bits
                    Constant: int, 15
                Compound: 
                  Goto: while_break
              Assignment: =
                ID: code
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  BinaryOp: <<
                    BinaryOp: +
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: code
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: bl_count
                          BinaryOp: -
                            ID: bits
                            Constant: int, 1
                    Constant: int, 1
              Assignment: =
                ArrayRef: 
                  ID: next_code
                  ID: bits
                ID: code
              UnaryOp: p++
                ID: bits
          Label: while_break
            EmptyStatement: 
        Assignment: =
          ID: n
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: n
                    ID: max_code
                Compound: 
                  Goto: while_break___0
              Assignment: =
                ID: len
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  StructRef: .
                    StructRef: ->
                      BinaryOp: +
                        ID: tree
                        ID: n
                      ID: dl
                    ID: len
              If: 
                BinaryOp: ==
                  ID: len
                  Constant: int, 0
                Compound: 
                  Goto: __Cont
              Compound: 
                Assignment: =
                  ID: tmp
                  ArrayRef: 
                    ID: next_code
                    ID: len
                Assignment: =
                  ArrayRef: 
                    ID: next_code
                    ID: len
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                    BinaryOp: +
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: next_code
                          ID: len
                      Constant: int, 1
                Assignment: =
                  StructRef: .
                    StructRef: ->
                      BinaryOp: +
                        ID: tree
                        ID: n
                      ID: fc
                    ID: code
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                    FuncCall: 
                      ID: bi_reverse
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ID: tmp
                        ID: len
              Label: __Cont
                UnaryOp: p++
                  ID: n
          Label: while_break___0
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: build_tree___0, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: desc, [], [], [], []
            PtrDecl: []
              TypeDecl: desc, [], None
                IdentifierType: ['tree_desc']
        TypeDecl: build_tree___0, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: tree, [], [], [], []
        PtrDecl: []
          TypeDecl: tree, [], None
            IdentifierType: ['ct_data']
      Decl: stree, [], [], [], []
        PtrDecl: []
          TypeDecl: stree, [], None
            IdentifierType: ['ct_data']
      Decl: elems, [], [], [], []
        TypeDecl: elems, [], None
          IdentifierType: ['int']
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: m, [], [], [], []
        TypeDecl: m, [], None
          IdentifierType: ['int']
      Decl: max_code, [], [], [], []
        TypeDecl: max_code, [], None
          IdentifierType: ['int']
      Decl: node, [], [], [], []
        TypeDecl: node, [], None
          IdentifierType: ['int']
      Decl: new, [], [], [], []
        TypeDecl: new, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['ush']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: tree
          StructRef: ->
            ID: desc
            ID: dyn_tree
        Assignment: =
          ID: stree
          StructRef: ->
            ID: desc
            ID: static_tree
        Assignment: =
          ID: elems
          StructRef: ->
            ID: desc
            ID: elems
        Assignment: =
          ID: max_code
          UnaryOp: -
            Constant: int, 1
        Assignment: =
          ID: node
          ID: elems
        Assignment: =
          ID: heap_len
          Constant: int, 0
        Assignment: =
          ID: heap_max
          Constant: int, 573
        Assignment: =
          ID: n
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: n
                    ID: elems
                Compound: 
                  Goto: while_break
              If: 
                BinaryOp: !=
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    StructRef: .
                      StructRef: ->
                        BinaryOp: +
                          ID: tree
                          ID: n
                        ID: fc
                      ID: freq
                  Constant: int, 0
                Compound: 
                  UnaryOp: p++
                    ID: heap_len
                  Assignment: =
                    ID: max_code
                    ID: n
                  Assignment: =
                    ArrayRef: 
                      ID: heap
                      ID: heap_len
                    ID: max_code
                  Assignment: =
                    ArrayRef: 
                      ID: depth
                      ID: n
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      Constant: int, 0
                Compound: 
                  Assignment: =
                    StructRef: .
                      StructRef: ->
                        BinaryOp: +
                          ID: tree
                          ID: n
                        ID: dl
                      ID: len
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      Constant: int, 0
              UnaryOp: p++
                ID: n
          Label: while_break
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: heap_len
                    Constant: int, 2
                Compound: 
                  Goto: while_break___0
              UnaryOp: p++
                ID: heap_len
              If: 
                BinaryOp: <
                  ID: max_code
                  Constant: int, 2
                Compound: 
                  UnaryOp: p++
                    ID: max_code
                  Assignment: =
                    ID: tmp
                    ID: max_code
                Compound: 
                  Assignment: =
                    ID: tmp
                    Constant: int, 0
              Assignment: =
                ArrayRef: 
                  ID: heap
                  ID: heap_len
                ID: tmp
              Assignment: =
                ID: new
                ID: tmp
              Assignment: =
                StructRef: .
                  StructRef: ->
                    BinaryOp: +
                      ID: tree
                      ID: new
                    ID: fc
                  ID: freq
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  Constant: int, 1
              Assignment: =
                ArrayRef: 
                  ID: depth
                  ID: new
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['uch']
                  Constant: int, 0
              UnaryOp: p--
                ID: opt_len
              If: 
                ID: stree
                Compound: 
                  Assignment: -=
                    ID: static_len
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      StructRef: .
                        StructRef: ->
                          BinaryOp: +
                            ID: stree
                            ID: new
                          ID: dl
                        ID: len
          Label: while_break___0
            EmptyStatement: 
        Assignment: =
          StructRef: ->
            ID: desc
            ID: max_code
          ID: max_code
        Assignment: =
          ID: n
          BinaryOp: /
            ID: heap_len
            Constant: int, 2
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: >=
                    ID: n
                    Constant: int, 1
                Compound: 
                  Goto: while_break___1
              Compound: 
                FuncCall: 
                  ID: pqdownheap
                  ExprList: 
                    ID: tree
                    ID: n
                UnaryOp: p--
                  ID: n
          Label: while_break___1
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___2
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: n
                  ArrayRef: 
                    ID: heap
                    Constant: int, 1
                Assignment: =
                  ID: tmp___0
                  ID: heap_len
                UnaryOp: p--
                  ID: heap_len
                Assignment: =
                  ArrayRef: 
                    ID: heap
                    Constant: int, 1
                  ArrayRef: 
                    ID: heap
                    ID: tmp___0
                FuncCall: 
                  ID: pqdownheap
                  ExprList: 
                    ID: tree
                    Constant: int, 1
                Assignment: =
                  ID: m
                  ArrayRef: 
                    ID: heap
                    Constant: int, 1
                UnaryOp: p--
                  ID: heap_max
                Assignment: =
                  ArrayRef: 
                    ID: heap
                    ID: heap_max
                  ID: n
                UnaryOp: p--
                  ID: heap_max
                Assignment: =
                  ArrayRef: 
                    ID: heap
                    ID: heap_max
                  ID: m
                Assignment: =
                  StructRef: .
                    StructRef: ->
                      BinaryOp: +
                        ID: tree
                        ID: node
                      ID: fc
                    ID: freq
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                    BinaryOp: +
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        StructRef: .
                          StructRef: ->
                            BinaryOp: +
                              ID: tree
                              ID: n
                            ID: fc
                          ID: freq
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        StructRef: .
                          StructRef: ->
                            BinaryOp: +
                              ID: tree
                              ID: m
                            ID: fc
                          ID: freq
              If: 
                BinaryOp: >=
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ArrayRef: 
                      ID: depth
                      ID: n
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ArrayRef: 
                      ID: depth
                      ID: m
                Compound: 
                  Assignment: =
                    ID: tmp___1
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: depth
                        ID: n
                Compound: 
                  Assignment: =
                    ID: tmp___1
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: depth
                        ID: m
              Compound: 
                Assignment: =
                  ArrayRef: 
                    ID: depth
                    ID: node
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    BinaryOp: +
                      ID: tmp___1
                      Constant: int, 1
                Assignment: =
                  ID: tmp___2
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                    ID: node
                Assignment: =
                  StructRef: .
                    StructRef: ->
                      BinaryOp: +
                        ID: tree
                        ID: m
                      ID: dl
                    ID: dad
                  ID: tmp___2
                Assignment: =
                  StructRef: .
                    StructRef: ->
                      BinaryOp: +
                        ID: tree
                        ID: n
                      ID: dl
                    ID: dad
                  ID: tmp___2
                Assignment: =
                  ID: tmp___3
                  ID: node
                UnaryOp: p++
                  ID: node
                Assignment: =
                  ArrayRef: 
                    ID: heap
                    Constant: int, 1
                  ID: tmp___3
                FuncCall: 
                  ID: pqdownheap
                  ExprList: 
                    ID: tree
                    Constant: int, 1
              If: 
                UnaryOp: !
                  BinaryOp: >=
                    ID: heap_len
                    Constant: int, 2
                Compound: 
                  Goto: while_break___2
          Label: while_break___2
            EmptyStatement: 
        Compound: 
          UnaryOp: p--
            ID: heap_max
          Assignment: =
            ArrayRef: 
              ID: heap
              ID: heap_max
            ArrayRef: 
              ID: heap
              Constant: int, 1
          FuncCall: 
            ID: gen_bitlen
            ExprList: 
              ID: desc
          FuncCall: 
            ID: gen_codes
            ExprList: 
              ID: tree
              ID: max_code
        Return: 
  FuncDef: 
    Decl: scan_tree, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: tree, [], [], [], []
            PtrDecl: []
              TypeDecl: tree, [], None
                IdentifierType: ['ct_data']
          Decl: max_code, [], [], [], []
            TypeDecl: max_code, [], None
              IdentifierType: ['int']
        TypeDecl: scan_tree, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: prevlen, [], [], [], []
        TypeDecl: prevlen, [], None
          IdentifierType: ['int']
      Decl: curlen, [], [], [], []
        TypeDecl: curlen, [], None
          IdentifierType: ['int']
      Decl: nextlen, [], [], [], []
        TypeDecl: nextlen, [], None
          IdentifierType: ['int']
      Decl: count, [], [], [], []
        TypeDecl: count, [], None
          IdentifierType: ['int']
      Decl: max_count, [], [], [], []
        TypeDecl: max_count, [], None
          IdentifierType: ['int']
      Decl: min_count, [], [], [], []
        TypeDecl: min_count, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: prevlen
          UnaryOp: -
            Constant: int, 1
        Assignment: =
          ID: nextlen
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            StructRef: .
              StructRef: ->
                BinaryOp: +
                  ID: tree
                  Constant: int, 0
                ID: dl
              ID: len
        Assignment: =
          ID: count
          Constant: int, 0
        Assignment: =
          ID: max_count
          Constant: int, 7
        Assignment: =
          ID: min_count
          Constant: int, 4
        If: 
          BinaryOp: ==
            ID: nextlen
            Constant: int, 0
          Compound: 
            Assignment: =
              ID: max_count
              Constant: int, 138
            Assignment: =
              ID: min_count
              Constant: int, 3
        Assignment: =
          StructRef: .
            StructRef: ->
              BinaryOp: +
                ID: tree
                BinaryOp: +
                  ID: max_code
                  Constant: int, 1
              ID: dl
            ID: len
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ush']
            Constant: int, 65535
        Assignment: =
          ID: n
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: n
                    ID: max_code
                Compound: 
                  Goto: while_break
              Assignment: =
                ID: curlen
                ID: nextlen
              Assignment: =
                ID: nextlen
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  StructRef: .
                    StructRef: ->
                      BinaryOp: +
                        ID: tree
                        BinaryOp: +
                          ID: n
                          Constant: int, 1
                      ID: dl
                    ID: len
              UnaryOp: p++
                ID: count
              If: 
                BinaryOp: <
                  ID: count
                  ID: max_count
                Compound: 
                  If: 
                    BinaryOp: ==
                      ID: curlen
                      ID: nextlen
                    Compound: 
                      Goto: __Cont
                    Compound: 
                      Goto: _L
                Compound: 
                  Label: _L
                    If: 
                      BinaryOp: <
                        ID: count
                        ID: min_count
                      Compound: 
                        Assignment: =
                          StructRef: .
                            StructRef: .
                              ArrayRef: 
                                ID: bl_tree
                                ID: curlen
                              ID: fc
                            ID: freq
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ush']
                            BinaryOp: +
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                StructRef: .
                                  StructRef: .
                                    ArrayRef: 
                                      ID: bl_tree
                                      ID: curlen
                                    ID: fc
                                  ID: freq
                              ID: count
                      Compound: 
                        If: 
                          BinaryOp: !=
                            ID: curlen
                            Constant: int, 0
                          Compound: 
                            If: 
                              BinaryOp: !=
                                ID: curlen
                                ID: prevlen
                              Compound: 
                                Assignment: =
                                  StructRef: .
                                    StructRef: .
                                      ArrayRef: 
                                        ID: bl_tree
                                        ID: curlen
                                      ID: fc
                                    ID: freq
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ush']
                                    BinaryOp: +
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        StructRef: .
                                          StructRef: .
                                            ArrayRef: 
                                              ID: bl_tree
                                              ID: curlen
                                            ID: fc
                                          ID: freq
                                      Constant: int, 1
                            Assignment: =
                              StructRef: .
                                StructRef: .
                                  ArrayRef: 
                                    ID: bl_tree
                                    Constant: int, 16
                                  ID: fc
                                ID: freq
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                BinaryOp: +
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    StructRef: .
                                      StructRef: .
                                        ArrayRef: 
                                          ID: bl_tree
                                          Constant: int, 16
                                        ID: fc
                                      ID: freq
                                  Constant: int, 1
                          Compound: 
                            If: 
                              BinaryOp: <=
                                ID: count
                                Constant: int, 10
                              Compound: 
                                Assignment: =
                                  StructRef: .
                                    StructRef: .
                                      ArrayRef: 
                                        ID: bl_tree
                                        Constant: int, 17
                                      ID: fc
                                    ID: freq
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ush']
                                    BinaryOp: +
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        StructRef: .
                                          StructRef: .
                                            ArrayRef: 
                                              ID: bl_tree
                                              Constant: int, 17
                                            ID: fc
                                          ID: freq
                                      Constant: int, 1
                              Compound: 
                                Assignment: =
                                  StructRef: .
                                    StructRef: .
                                      ArrayRef: 
                                        ID: bl_tree
                                        Constant: int, 18
                                      ID: fc
                                    ID: freq
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ush']
                                    BinaryOp: +
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        StructRef: .
                                          StructRef: .
                                            ArrayRef: 
                                              ID: bl_tree
                                              Constant: int, 18
                                            ID: fc
                                          ID: freq
                                      Constant: int, 1
              Assignment: =
                ID: count
                Constant: int, 0
              Assignment: =
                ID: prevlen
                ID: curlen
              If: 
                BinaryOp: ==
                  ID: nextlen
                  Constant: int, 0
                Compound: 
                  Assignment: =
                    ID: max_count
                    Constant: int, 138
                  Assignment: =
                    ID: min_count
                    Constant: int, 3
                Compound: 
                  If: 
                    BinaryOp: ==
                      ID: curlen
                      ID: nextlen
                    Compound: 
                      Assignment: =
                        ID: max_count
                        Constant: int, 6
                      Assignment: =
                        ID: min_count
                        Constant: int, 3
                    Compound: 
                      Assignment: =
                        ID: max_count
                        Constant: int, 7
                      Assignment: =
                        ID: min_count
                        Constant: int, 4
              Label: __Cont
                UnaryOp: p++
                  ID: n
          Label: while_break
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: send_tree, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: tree, [], [], [], []
            PtrDecl: []
              TypeDecl: tree, [], None
                IdentifierType: ['ct_data']
          Decl: max_code, [], [], [], []
            TypeDecl: max_code, [], None
              IdentifierType: ['int']
        TypeDecl: send_tree, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: prevlen, [], [], [], []
        TypeDecl: prevlen, [], None
          IdentifierType: ['int']
      Decl: curlen, [], [], [], []
        TypeDecl: curlen, [], None
          IdentifierType: ['int']
      Decl: nextlen, [], [], [], []
        TypeDecl: nextlen, [], None
          IdentifierType: ['int']
      Decl: count, [], [], [], []
        TypeDecl: count, [], None
          IdentifierType: ['int']
      Decl: max_count, [], [], [], []
        TypeDecl: max_count, [], None
          IdentifierType: ['int']
      Decl: min_count, [], [], [], []
        TypeDecl: min_count, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: prevlen
          UnaryOp: -
            Constant: int, 1
        Assignment: =
          ID: nextlen
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            StructRef: .
              StructRef: ->
                BinaryOp: +
                  ID: tree
                  Constant: int, 0
                ID: dl
              ID: len
        Assignment: =
          ID: count
          Constant: int, 0
        Assignment: =
          ID: max_count
          Constant: int, 7
        Assignment: =
          ID: min_count
          Constant: int, 4
        If: 
          BinaryOp: ==
            ID: nextlen
            Constant: int, 0
          Compound: 
            Assignment: =
              ID: max_count
              Constant: int, 138
            Assignment: =
              ID: min_count
              Constant: int, 3
        Assignment: =
          ID: n
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <=
                    ID: n
                    ID: max_code
                Compound: 
                  Goto: while_break
              Assignment: =
                ID: curlen
                ID: nextlen
              Assignment: =
                ID: nextlen
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  StructRef: .
                    StructRef: ->
                      BinaryOp: +
                        ID: tree
                        BinaryOp: +
                          ID: n
                          Constant: int, 1
                      ID: dl
                    ID: len
              UnaryOp: p++
                ID: count
              If: 
                BinaryOp: <
                  ID: count
                  ID: max_count
                Compound: 
                  If: 
                    BinaryOp: ==
                      ID: curlen
                      ID: nextlen
                    Compound: 
                      Goto: __Cont
                    Compound: 
                      Goto: _L
                Compound: 
                  Label: _L
                    If: 
                      BinaryOp: <
                        ID: count
                        ID: min_count
                      Compound: 
                        Compound: 
                          While: 
                            Constant: int, 1
                            Compound: 
                              Label: while_continue___0
                                EmptyStatement: 
                              Compound: 
                                FuncCall: 
                                  ID: send_bits
                                  ExprList: 
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['int']
                                      StructRef: .
                                        StructRef: .
                                          ArrayRef: 
                                            ID: bl_tree
                                            ID: curlen
                                          ID: fc
                                        ID: code
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['int']
                                      StructRef: .
                                        StructRef: .
                                          ArrayRef: 
                                            ID: bl_tree
                                            ID: curlen
                                          ID: dl
                                        ID: len
                                UnaryOp: p--
                                  ID: count
                              If: 
                                UnaryOp: !
                                  BinaryOp: !=
                                    ID: count
                                    Constant: int, 0
                                Compound: 
                                  Goto: while_break___0
                          Label: while_break___0
                            EmptyStatement: 
                      Compound: 
                        If: 
                          BinaryOp: !=
                            ID: curlen
                            Constant: int, 0
                          Compound: 
                            If: 
                              BinaryOp: !=
                                ID: curlen
                                ID: prevlen
                              Compound: 
                                Compound: 
                                  FuncCall: 
                                    ID: send_bits
                                    ExprList: 
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        StructRef: .
                                          StructRef: .
                                            ArrayRef: 
                                              ID: bl_tree
                                              ID: curlen
                                            ID: fc
                                          ID: code
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        StructRef: .
                                          StructRef: .
                                            ArrayRef: 
                                              ID: bl_tree
                                              ID: curlen
                                            ID: dl
                                          ID: len
                                  UnaryOp: p--
                                    ID: count
                            Compound: 
                              FuncCall: 
                                ID: send_bits
                                ExprList: 
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    StructRef: .
                                      StructRef: .
                                        ArrayRef: 
                                          ID: bl_tree
                                          Constant: int, 16
                                        ID: fc
                                      ID: code
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    StructRef: .
                                      StructRef: .
                                        ArrayRef: 
                                          ID: bl_tree
                                          Constant: int, 16
                                        ID: dl
                                      ID: len
                              FuncCall: 
                                ID: send_bits
                                ExprList: 
                                  BinaryOp: -
                                    ID: count
                                    Constant: int, 3
                                  Constant: int, 2
                          Compound: 
                            If: 
                              BinaryOp: <=
                                ID: count
                                Constant: int, 10
                              Compound: 
                                Compound: 
                                  FuncCall: 
                                    ID: send_bits
                                    ExprList: 
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        StructRef: .
                                          StructRef: .
                                            ArrayRef: 
                                              ID: bl_tree
                                              Constant: int, 17
                                            ID: fc
                                          ID: code
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        StructRef: .
                                          StructRef: .
                                            ArrayRef: 
                                              ID: bl_tree
                                              Constant: int, 17
                                            ID: dl
                                          ID: len
                                  FuncCall: 
                                    ID: send_bits
                                    ExprList: 
                                      BinaryOp: -
                                        ID: count
                                        Constant: int, 3
                                      Constant: int, 3
                              Compound: 
                                Compound: 
                                  FuncCall: 
                                    ID: send_bits
                                    ExprList: 
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        StructRef: .
                                          StructRef: .
                                            ArrayRef: 
                                              ID: bl_tree
                                              Constant: int, 18
                                            ID: fc
                                          ID: code
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['int']
                                        StructRef: .
                                          StructRef: .
                                            ArrayRef: 
                                              ID: bl_tree
                                              Constant: int, 18
                                            ID: dl
                                          ID: len
                                  FuncCall: 
                                    ID: send_bits
                                    ExprList: 
                                      BinaryOp: -
                                        ID: count
                                        Constant: int, 11
                                      Constant: int, 7
              Assignment: =
                ID: count
                Constant: int, 0
              Assignment: =
                ID: prevlen
                ID: curlen
              If: 
                BinaryOp: ==
                  ID: nextlen
                  Constant: int, 0
                Compound: 
                  Assignment: =
                    ID: max_count
                    Constant: int, 138
                  Assignment: =
                    ID: min_count
                    Constant: int, 3
                Compound: 
                  If: 
                    BinaryOp: ==
                      ID: curlen
                      ID: nextlen
                    Compound: 
                      Assignment: =
                        ID: max_count
                        Constant: int, 6
                      Assignment: =
                        ID: min_count
                        Constant: int, 3
                    Compound: 
                      Assignment: =
                        ID: max_count
                        Constant: int, 7
                      Assignment: =
                        ID: min_count
                        Constant: int, 4
              Label: __Cont
                UnaryOp: p++
                  ID: n
          Label: while_break
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: build_bl_tree, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: build_bl_tree, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: max_blindex, [], [], [], []
        TypeDecl: max_blindex, [], None
          IdentifierType: ['int']
      Compound: 
        Compound: 
          FuncCall: 
            ID: scan_tree
            ExprList: 
              ID: dyn_ltree
              StructRef: .
                ID: l_desc
                ID: max_code
          FuncCall: 
            ID: scan_tree
            ExprList: 
              ID: dyn_dtree
              StructRef: .
                ID: d_desc
                ID: max_code
          FuncCall: 
            ID: build_tree___0
            ExprList: 
              UnaryOp: &
                ID: bl_desc
          Assignment: =
            ID: max_blindex
            Constant: int, 18
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: >=
                    ID: max_blindex
                    Constant: int, 3
                Compound: 
                  Goto: while_break
              If: 
                BinaryOp: !=
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    StructRef: .
                      StructRef: .
                        ArrayRef: 
                          ID: bl_tree
                          ArrayRef: 
                            ID: bl_order
                            ID: max_blindex
                        ID: dl
                      ID: len
                  Constant: int, 0
                Compound: 
                  Goto: while_break
              UnaryOp: p--
                ID: max_blindex
          Label: while_break
            EmptyStatement: 
        Assignment: +=
          ID: opt_len
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ulg']
            BinaryOp: +
              BinaryOp: +
                BinaryOp: +
                  BinaryOp: *
                    Constant: int, 3
                    BinaryOp: +
                      ID: max_blindex
                      Constant: int, 1
                  Constant: int, 5
                Constant: int, 5
              Constant: int, 4
        Return: 
          ID: max_blindex
  FuncDef: 
    Decl: send_all_trees, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: lcodes, [], [], [], []
            TypeDecl: lcodes, [], None
              IdentifierType: ['int']
          Decl: dcodes, [], [], [], []
            TypeDecl: dcodes, [], None
              IdentifierType: ['int']
          Decl: blcodes, [], [], [], []
            TypeDecl: blcodes, [], None
              IdentifierType: ['int']
        TypeDecl: send_all_trees, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: rank, [], [], [], []
        TypeDecl: rank, [], None
          IdentifierType: ['int']
      Compound: 
        Compound: 
          FuncCall: 
            ID: send_bits
            ExprList: 
              BinaryOp: -
                ID: lcodes
                Constant: int, 257
              Constant: int, 5
          FuncCall: 
            ID: send_bits
            ExprList: 
              BinaryOp: -
                ID: dcodes
                Constant: int, 1
              Constant: int, 5
          FuncCall: 
            ID: send_bits
            ExprList: 
              BinaryOp: -
                ID: blcodes
                Constant: int, 4
              Constant: int, 4
          Assignment: =
            ID: rank
            Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: rank
                    ID: blcodes
                Compound: 
                  Goto: while_break
              Compound: 
                FuncCall: 
                  ID: send_bits
                  ExprList: 
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      StructRef: .
                        StructRef: .
                          ArrayRef: 
                            ID: bl_tree
                            ArrayRef: 
                              ID: bl_order
                              ID: rank
                          ID: dl
                        ID: len
                    Constant: int, 3
                UnaryOp: p++
                  ID: rank
          Label: while_break
            EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: send_tree
            ExprList: 
              ID: dyn_ltree
              BinaryOp: -
                ID: lcodes
                Constant: int, 1
          FuncCall: 
            ID: send_tree
            ExprList: 
              ID: dyn_dtree
              BinaryOp: -
                ID: dcodes
                Constant: int, 1
        Return: 
  FuncDef: 
    Decl: flush_block, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: buf, [], [], [], []
            PtrDecl: []
              TypeDecl: buf, [], None
                IdentifierType: ['char']
          Decl: stored_len, [], [], [], []
            TypeDecl: stored_len, [], None
              IdentifierType: ['ulg']
          Decl: eof, [], [], [], []
            TypeDecl: eof, [], None
              IdentifierType: ['int']
        TypeDecl: flush_block, [], None
          IdentifierType: ['ulg']
    Compound: 
      Decl: opt_lenb, [], [], [], []
        TypeDecl: opt_lenb, [], None
          IdentifierType: ['ulg']
      Decl: static_lenb, [], [], [], []
        TypeDecl: static_lenb, [], None
          IdentifierType: ['ulg']
      Decl: max_blindex, [], [], [], []
        TypeDecl: max_blindex, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ArrayRef: 
            ID: flag_buf
            ID: last_flags
          ID: flags
        If: 
          BinaryOp: ==
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              UnaryOp: *
                ID: file_type
            Constant: int, 65535
          Compound: 
            Compound: 
              FuncCall: 
                ID: set_file_type
        Compound: 
          FuncCall: 
            ID: build_tree___0
            ExprList: 
              UnaryOp: &
                ID: l_desc
          FuncCall: 
            ID: build_tree___0
            ExprList: 
              UnaryOp: &
                ID: d_desc
          Assignment: =
            ID: max_blindex
            FuncCall: 
              ID: build_bl_tree
          Assignment: =
            ID: opt_lenb
            BinaryOp: >>
              BinaryOp: +
                BinaryOp: +
                  ID: opt_len
                  Constant: unsigned long int, 3UL
                Constant: unsigned long int, 7UL
              Constant: int, 3
          Assignment: =
            ID: static_lenb
            BinaryOp: >>
              BinaryOp: +
                BinaryOp: +
                  ID: static_len
                  Constant: unsigned long int, 3UL
                Constant: unsigned long int, 7UL
              Constant: int, 3
          Assignment: +=
            ID: input_len
            ID: stored_len
        If: 
          BinaryOp: <=
            ID: static_lenb
            ID: opt_lenb
          Compound: 
            Assignment: =
              ID: opt_lenb
              ID: static_lenb
        If: 
          BinaryOp: <=
            ID: stored_len
            ID: opt_lenb
          Compound: 
            If: 
              ID: eof
              Compound: 
                If: 
                  BinaryOp: ==
                    ID: compressed_len
                    Constant: unsigned long int, 0UL
                  Compound: 
                    Goto: _L___2
                  Compound: 
                    Goto: _L___2
              Compound: 
                Goto: _L___2
          Compound: 
            Label: _L___2
              If: 
                BinaryOp: <=
                  BinaryOp: +
                    ID: stored_len
                    Constant: unsigned long int, 4UL
                  ID: opt_lenb
                Compound: 
                  If: 
                    BinaryOp: !=
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'long']
                        ID: buf
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'long']
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                          Constant: int, 0
                    Compound: 
                      Compound: 
                        FuncCall: 
                          ID: send_bits
                          ExprList: 
                            ID: eof
                            Constant: int, 3
                        Assignment: =
                          ID: compressed_len
                          BinaryOp: &
                            BinaryOp: +
                              BinaryOp: +
                                ID: compressed_len
                                Constant: unsigned long int, 3UL
                              Constant: unsigned long int, 7UL
                            Constant: unsigned long int, 0xfffffffffffffff8UL
                        Assignment: +=
                          ID: compressed_len
                          BinaryOp: <<
                            BinaryOp: +
                              ID: stored_len
                              Constant: unsigned long int, 4UL
                            Constant: int, 3
                        FuncCall: 
                          ID: copy_block
                          ExprList: 
                            ID: buf
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              ID: stored_len
                            Constant: int, 1
                    Compound: 
                      Goto: _L
                Compound: 
                  Label: _L
                    If: 
                      BinaryOp: ==
                        ID: static_lenb
                        ID: opt_lenb
                      Compound: 
                        Compound: 
                          FuncCall: 
                            ID: send_bits
                            ExprList: 
                              BinaryOp: +
                                BinaryOp: <<
                                  Constant: int, 1
                                  Constant: int, 1
                                ID: eof
                              Constant: int, 3
                          FuncCall: 
                            ID: compress_block
                            ExprList: 
                              ID: static_ltree
                              ID: static_dtree
                          Assignment: +=
                            ID: compressed_len
                            BinaryOp: +
                              Constant: unsigned long int, 3UL
                              ID: static_len
                      Compound: 
                        Compound: 
                          FuncCall: 
                            ID: send_bits
                            ExprList: 
                              BinaryOp: +
                                BinaryOp: <<
                                  Constant: int, 2
                                  Constant: int, 1
                                ID: eof
                              Constant: int, 3
                          FuncCall: 
                            ID: send_all_trees
                            ExprList: 
                              BinaryOp: +
                                StructRef: .
                                  ID: l_desc
                                  ID: max_code
                                Constant: int, 1
                              BinaryOp: +
                                StructRef: .
                                  ID: d_desc
                                  ID: max_code
                                Constant: int, 1
                              BinaryOp: +
                                ID: max_blindex
                                Constant: int, 1
                          FuncCall: 
                            ID: compress_block
                            ExprList: 
                              ID: dyn_ltree
                              ID: dyn_dtree
                          Assignment: +=
                            ID: compressed_len
                            BinaryOp: +
                              Constant: unsigned long int, 3UL
                              ID: opt_len
        Compound: 
          FuncCall: 
            ID: init_block
        If: 
          ID: eof
          Compound: 
            Compound: 
              FuncCall: 
                ID: bi_windup
              Assignment: +=
                ID: compressed_len
                Constant: unsigned long int, 7UL
        Return: 
          BinaryOp: >>
            ID: compressed_len
            Constant: int, 3
  FuncDef: 
    Decl: ct_tally, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: dist, [], [], [], []
            TypeDecl: dist, [], None
              IdentifierType: ['int']
          Decl: lc, [], [], [], []
            TypeDecl: lc, [], None
              IdentifierType: ['int']
        TypeDecl: ct_tally, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: out_length, [], [], [], []
        TypeDecl: out_length, [], None
          IdentifierType: ['ulg']
      Decl: in_length, [], [], [], []
        TypeDecl: in_length, [], None
          IdentifierType: ['ulg']
      Decl: dcode, [], [], [], []
        TypeDecl: dcode, [], None
          IdentifierType: ['int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: tmp
          ID: last_lit
        UnaryOp: p++
          ID: last_lit
        Assignment: =
          ArrayRef: 
            ID: inbuf
            ID: tmp
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            ID: lc
        If: 
          BinaryOp: ==
            ID: dist
            Constant: int, 0
          Compound: 
            Assignment: =
              StructRef: .
                StructRef: .
                  ArrayRef: 
                    ID: dyn_ltree
                    ID: lc
                  ID: fc
                ID: freq
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ush']
                BinaryOp: +
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    StructRef: .
                      StructRef: .
                        ArrayRef: 
                          ID: dyn_ltree
                          ID: lc
                        ID: fc
                      ID: freq
                  Constant: int, 1
          Compound: 
            UnaryOp: p--
              ID: dist
            Assignment: =
              StructRef: .
                StructRef: .
                  ArrayRef: 
                    ID: dyn_ltree
                    BinaryOp: +
                      BinaryOp: +
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          ArrayRef: 
                            ID: length_code
                            ID: lc
                        Constant: int, 256
                      Constant: int, 1
                  ID: fc
                ID: freq
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ush']
                BinaryOp: +
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    StructRef: .
                      StructRef: .
                        ArrayRef: 
                          ID: dyn_ltree
                          BinaryOp: +
                            BinaryOp: +
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                ArrayRef: 
                                  ID: length_code
                                  ID: lc
                              Constant: int, 256
                            Constant: int, 1
                        ID: fc
                      ID: freq
                  Constant: int, 1
            If: 
              BinaryOp: <
                ID: dist
                Constant: int, 256
              Compound: 
                Assignment: =
                  ID: tmp___0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ArrayRef: 
                      ID: dist_code
                      ID: dist
              Compound: 
                Assignment: =
                  ID: tmp___0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ArrayRef: 
                      ID: dist_code
                      BinaryOp: +
                        Constant: int, 256
                        BinaryOp: >>
                          ID: dist
                          Constant: int, 7
            Assignment: =
              StructRef: .
                StructRef: .
                  ArrayRef: 
                    ID: dyn_dtree
                    ID: tmp___0
                  ID: fc
                ID: freq
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ush']
                BinaryOp: +
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    StructRef: .
                      StructRef: .
                        ArrayRef: 
                          ID: dyn_dtree
                          ID: tmp___0
                        ID: fc
                      ID: freq
                  Constant: int, 1
            Assignment: =
              ID: tmp___1
              ID: last_dist
            UnaryOp: p++
              ID: last_dist
            Assignment: =
              ArrayRef: 
                ID: d_buf
                ID: tmp___1
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ush']
                ID: dist
            Assignment: =
              ID: flags
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: |
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ID: flags
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ID: flag_bit
        Assignment: =
          ID: flag_bit
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            BinaryOp: <<
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ID: flag_bit
              Constant: int, 1
        If: 
          BinaryOp: ==
            BinaryOp: &
              ID: last_lit
              Constant: unsigned int, 7U
            Constant: unsigned int, 0U
          Compound: 
            Assignment: =
              ID: tmp___2
              ID: last_flags
            UnaryOp: p++
              ID: last_flags
            Assignment: =
              ArrayRef: 
                ID: flag_buf
                ID: tmp___2
              ID: flags
            Assignment: =
              ID: flags
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                Constant: int, 0
            Assignment: =
              ID: flag_bit
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                Constant: int, 1
        If: 
          BinaryOp: >
            ID: level
            Constant: int, 2
          Compound: 
            If: 
              BinaryOp: ==
                BinaryOp: &
                  ID: last_lit
                  Constant: unsigned int, 4095U
                Constant: unsigned int, 0U
              Compound: 
                Assignment: =
                  ID: out_length
                  BinaryOp: *
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: last_lit
                    Constant: unsigned long int, 8UL
                Assignment: =
                  ID: in_length
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: strstart
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: block_start
                Assignment: =
                  ID: dcode
                  Constant: int, 0
                Compound: 
                  While: 
                    Constant: int, 1
                    Compound: 
                      Label: while_continue
                        EmptyStatement: 
                      If: 
                        UnaryOp: !
                          BinaryOp: <
                            ID: dcode
                            Constant: int, 30
                        Compound: 
                          Goto: while_break
                      Assignment: +=
                        ID: out_length
                        BinaryOp: *
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ulg']
                            StructRef: .
                              StructRef: .
                                ArrayRef: 
                                  ID: dyn_dtree
                                  ID: dcode
                                ID: fc
                              ID: freq
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ulg']
                            BinaryOp: +
                              Constant: long int, 5L
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['long']
                                ArrayRef: 
                                  ID: extra_dbits
                                  ID: dcode
                      UnaryOp: p++
                        ID: dcode
                  Label: while_break
                    EmptyStatement: 
                Assignment: >>=
                  ID: out_length
                  Constant: int, 3
                If: 
                  BinaryOp: <
                    ID: last_dist
                    BinaryOp: /
                      ID: last_lit
                      Constant: unsigned int, 2U
                  Compound: 
                    If: 
                      BinaryOp: <
                        ID: out_length
                        BinaryOp: /
                          ID: in_length
                          Constant: unsigned long int, 2UL
                      Compound: 
                        Return: 
                          Constant: int, 1
        If: 
          BinaryOp: ==
            ID: last_lit
            Constant: unsigned int, 32767U
          Compound: 
            Assignment: =
              ID: tmp___3
              Constant: int, 1
          Compound: 
            If: 
              BinaryOp: ==
                ID: last_dist
                Constant: unsigned int, 32768U
              Compound: 
                Assignment: =
                  ID: tmp___3
                  Constant: int, 1
              Compound: 
                Assignment: =
                  ID: tmp___3
                  Constant: int, 0
        Return: 
          ID: tmp___3
  FuncDef: 
    Decl: compress_block, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: ltree, [], [], [], []
            PtrDecl: []
              TypeDecl: ltree, [], None
                IdentifierType: ['ct_data']
          Decl: dtree, [], [], [], []
            PtrDecl: []
              TypeDecl: dtree, [], None
                IdentifierType: ['ct_data']
        TypeDecl: compress_block, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: dist, [], [], [], []
        TypeDecl: dist, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: lc, [], [], [], []
        TypeDecl: lc, [], None
          IdentifierType: ['int']
      Decl: lx, [], [], [], []
        TypeDecl: lx, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: dx, [], [], [], []
        TypeDecl: dx, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: fx, [], [], [], []
        TypeDecl: fx, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: flag, [], [], [], []
        TypeDecl: flag, [], None
          IdentifierType: ['uch']
      Decl: code, [], [], [], []
        TypeDecl: code, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: extra, [], [], [], []
        TypeDecl: extra, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Assignment: =
          ID: lx
          Constant: unsigned int, 0U
        Assignment: =
          ID: dx
          Constant: unsigned int, 0U
        Assignment: =
          ID: fx
          Constant: unsigned int, 0U
        Assignment: =
          ID: flag
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            Constant: int, 0
        If: 
          BinaryOp: !=
            ID: last_lit
            Constant: unsigned int, 0U
          Compound: 
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue
                    EmptyStatement: 
                  If: 
                    BinaryOp: ==
                      BinaryOp: &
                        ID: lx
                        Constant: unsigned int, 7U
                      Constant: unsigned int, 0U
                    Compound: 
                      Assignment: =
                        ID: tmp
                        ID: fx
                      UnaryOp: p++
                        ID: fx
                      Assignment: =
                        ID: flag
                        ArrayRef: 
                          ID: flag_buf
                          ID: tmp
                  Assignment: =
                    ID: tmp___0
                    ID: lx
                  UnaryOp: p++
                    ID: lx
                  Assignment: =
                    ID: lc
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp___0
                  If: 
                    BinaryOp: ==
                      BinaryOp: &
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          ID: flag
                        Constant: int, 1
                      Constant: int, 0
                    Compound: 
                      Compound: 
                        FuncCall: 
                          ID: send_bits
                          ExprList: 
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              StructRef: .
                                StructRef: ->
                                  BinaryOp: +
                                    ID: ltree
                                    ID: lc
                                  ID: fc
                                ID: code
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              StructRef: .
                                StructRef: ->
                                  BinaryOp: +
                                    ID: ltree
                                    ID: lc
                                  ID: dl
                                ID: len
                    Compound: 
                      Compound: 
                        Assignment: =
                          ID: code
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'int']
                            ArrayRef: 
                              ID: length_code
                              ID: lc
                        FuncCall: 
                          ID: send_bits
                          ExprList: 
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              StructRef: .
                                StructRef: ->
                                  BinaryOp: +
                                    ID: ltree
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: code
                                        Constant: unsigned int, 256U
                                      Constant: unsigned int, 1U
                                  ID: fc
                                ID: code
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              StructRef: .
                                StructRef: ->
                                  BinaryOp: +
                                    ID: ltree
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: code
                                        Constant: unsigned int, 256U
                                      Constant: unsigned int, 1U
                                  ID: dl
                                ID: len
                        Assignment: =
                          ID: extra
                          ArrayRef: 
                            ID: extra_lbits
                            ID: code
                      If: 
                        BinaryOp: !=
                          ID: extra
                          Constant: int, 0
                        Compound: 
                          Compound: 
                            Assignment: -=
                              ID: lc
                              ArrayRef: 
                                ID: base_length
                                ID: code
                            FuncCall: 
                              ID: send_bits
                              ExprList: 
                                ID: lc
                                ID: extra
                      Assignment: =
                        ID: tmp___1
                        ID: dx
                      UnaryOp: p++
                        ID: dx
                      Assignment: =
                        ID: dist
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ArrayRef: 
                            ID: d_buf
                            ID: tmp___1
                      If: 
                        BinaryOp: <
                          ID: dist
                          Constant: unsigned int, 256U
                        Compound: 
                          Assignment: =
                            ID: code
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              ArrayRef: 
                                ID: dist_code
                                ID: dist
                        Compound: 
                          Assignment: =
                            ID: code
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              ArrayRef: 
                                ID: dist_code
                                BinaryOp: +
                                  Constant: unsigned int, 256U
                                  BinaryOp: >>
                                    ID: dist
                                    Constant: int, 7
                      Compound: 
                        FuncCall: 
                          ID: send_bits
                          ExprList: 
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              StructRef: .
                                StructRef: ->
                                  BinaryOp: +
                                    ID: dtree
                                    ID: code
                                  ID: fc
                                ID: code
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              StructRef: .
                                StructRef: ->
                                  BinaryOp: +
                                    ID: dtree
                                    ID: code
                                  ID: dl
                                ID: len
                        Assignment: =
                          ID: extra
                          ArrayRef: 
                            ID: extra_dbits
                            ID: code
                      If: 
                        BinaryOp: !=
                          ID: extra
                          Constant: int, 0
                        Compound: 
                          Compound: 
                            Assignment: -=
                              ID: dist
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                ArrayRef: 
                                  ID: base_dist
                                  ID: code
                            FuncCall: 
                              ID: send_bits
                              ExprList: 
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  ID: dist
                                ID: extra
                  Assignment: =
                    ID: flag
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      BinaryOp: >>
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          ID: flag
                        Constant: int, 1
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: lx
                        ID: last_lit
                    Compound: 
                      Goto: while_break
              Label: while_break
                EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: send_bits
            ExprList: 
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                StructRef: .
                  StructRef: ->
                    BinaryOp: +
                      ID: ltree
                      Constant: int, 256
                    ID: fc
                  ID: code
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                StructRef: .
                  StructRef: ->
                    BinaryOp: +
                      ID: ltree
                      Constant: int, 256
                    ID: dl
                  ID: len
        Return: 
  FuncDef: 
    Decl: set_file_type, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: set_file_type, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: n, [], [], [], []
        TypeDecl: n, [], None
          IdentifierType: ['int']
      Decl: ascii_freq, [], [], [], []
        TypeDecl: ascii_freq, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: bin_freq, [], [], [], []
        TypeDecl: bin_freq, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Compound: 
        Assignment: =
          ID: n
          Constant: int, 0
        Assignment: =
          ID: ascii_freq
          Constant: unsigned int, 0U
        Assignment: =
          ID: bin_freq
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: n
                    Constant: int, 7
                Compound: 
                  Goto: while_break
              Assignment: =
                ID: tmp
                ID: n
              UnaryOp: p++
                ID: n
              Assignment: +=
                ID: bin_freq
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  StructRef: .
                    StructRef: .
                      ArrayRef: 
                        ID: dyn_ltree
                        ID: tmp
                      ID: fc
                    ID: freq
          Label: while_break
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: n
                    Constant: int, 128
                Compound: 
                  Goto: while_break___0
              Assignment: =
                ID: tmp___0
                ID: n
              UnaryOp: p++
                ID: n
              Assignment: +=
                ID: ascii_freq
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  StructRef: .
                    StructRef: .
                      ArrayRef: 
                        ID: dyn_ltree
                        ID: tmp___0
                      ID: fc
                    ID: freq
          Label: while_break___0
            EmptyStatement: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___1
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: n
                    Constant: int, 256
                Compound: 
                  Goto: while_break___1
              Assignment: =
                ID: tmp___1
                ID: n
              UnaryOp: p++
                ID: n
              Assignment: +=
                ID: bin_freq
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  StructRef: .
                    StructRef: .
                      ArrayRef: 
                        ID: dyn_ltree
                        ID: tmp___1
                      ID: fc
                    ID: freq
          Label: while_break___1
            EmptyStatement: 
        If: 
          BinaryOp: >
            ID: bin_freq
            BinaryOp: >>
              ID: ascii_freq
              Constant: int, 2
          Compound: 
            Assignment: =
              UnaryOp: *
                ID: file_type
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ush']
                Constant: int, 0
          Compound: 
            Assignment: =
              UnaryOp: *
                ID: file_type
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ush']
                Constant: int, 1
        Return: 
  Decl: lm_init, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: pack_level, [], [], [], []
          TypeDecl: pack_level, [], None
            IdentifierType: ['int']
        Decl: flags___0, [], [], [], []
          PtrDecl: []
            TypeDecl: flags___0, [], None
              IdentifierType: ['ush']
      TypeDecl: lm_init, [], None
        IdentifierType: ['void']
  Decl: deflate, [], [], [], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: deflate, [], None
        IdentifierType: ['ulg']
  Decl: window_size, [], [], [], []
    TypeDecl: window_size, [], None
      IdentifierType: ['ulg']
    Constant: unsigned long int, 65536UL
  Decl: ins_h, [], [], ['static'], []
    TypeDecl: ins_h, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: prev_length, [], [], [], []
    TypeDecl: prev_length, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: match_start, [], [], [], []
    TypeDecl: match_start, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: eofile, [], [], ['static'], []
    TypeDecl: eofile, [], None
      IdentifierType: ['int']
  Decl: lookahead, [], [], ['static'], []
    TypeDecl: lookahead, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: max_chain_length, [], [], [], []
    TypeDecl: max_chain_length, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: max_lazy_match, [], [], ['static'], []
    TypeDecl: max_lazy_match, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: compr_level, [], [], ['static'], []
    TypeDecl: compr_level, [], None
      IdentifierType: ['int']
  Decl: good_match, [], [], [], []
    TypeDecl: good_match, [], None
      IdentifierType: ['unsigned', 'int']
  Decl: nice_match, [], [], [], []
    TypeDecl: nice_match, [], None
      IdentifierType: ['int']
  Decl: configuration_table, [], [], ['static'], []
    ArrayDecl: []
      TypeDecl: configuration_table, [], None
        IdentifierType: ['config']
      Constant: int, 10
    InitList: 
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 0
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 0
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 0
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 0
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 4
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 4
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 8
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 4
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 4
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 5
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 16
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 8
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 4
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 6
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 32
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 32
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 4
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 4
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 16
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 16
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 8
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 16
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 32
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 32
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 8
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 16
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 128
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 128
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 8
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 32
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 128
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 256
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 32
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 128
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 258
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 1024
      InitList: 
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 32
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 258
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 258
        Cast: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['ush']
          Constant: int, 4096
  Decl: fill_window, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: fill_window, [], None
        IdentifierType: ['void']
  Decl: deflate_fast, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: deflate_fast, [], None
        IdentifierType: ['ulg']
  Decl: longest_match, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: cur_match, [], [], [], []
          TypeDecl: cur_match, [], None
            IdentifierType: ['IPos']
      TypeDecl: longest_match, [], None
        IdentifierType: ['int']
  FuncDef: 
    Decl: lm_init, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: pack_level, [], [], [], []
            TypeDecl: pack_level, [], None
              IdentifierType: ['int']
          Decl: flags___0, [], [], [], []
            PtrDecl: []
              TypeDecl: flags___0, [], None
                IdentifierType: ['ush']
        TypeDecl: lm_init, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: j___0, [], [], ['register'], []
        TypeDecl: j___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: __cil_tmp6, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp6, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp7, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp7, [], None
            IdentifierType: ['char']
      Compound: 
        If: 
          BinaryOp: <
            ID: pack_level
            Constant: int, 1
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "bad pack level"
          Compound: 
            If: 
              BinaryOp: >
                ID: pack_level
                Constant: int, 9
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: error
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        Constant: string, "bad pack level"
        Compound: 
          Assignment: =
            ID: compr_level
            ID: pack_level
          FuncCall: 
            ID: memset
            ExprList: 
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['voidp']
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
                  BinaryOp: +
                    ID: prev
                    Constant: int, 32768
              Constant: int, 0
              BinaryOp: *
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'long']
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'int']
                    BinaryOp: <<
                      Constant: int, 1
                      Constant: int, 15
                UnaryOp: sizeof
                  UnaryOp: *
                    BinaryOp: +
                      ID: prev
                      Constant: int, 32768
          Assignment: =
            ID: max_lazy_match
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              StructRef: .
                ArrayRef: 
                  ID: configuration_table
                  ID: pack_level
                ID: max_lazy
          Assignment: =
            ID: good_match
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              StructRef: .
                ArrayRef: 
                  ID: configuration_table
                  ID: pack_level
                ID: good_length
          Assignment: =
            ID: nice_match
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              StructRef: .
                ArrayRef: 
                  ID: configuration_table
                  ID: pack_level
                ID: nice_length
          Assignment: =
            ID: max_chain_length
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              StructRef: .
                ArrayRef: 
                  ID: configuration_table
                  ID: pack_level
                ID: max_chain
        If: 
          BinaryOp: ==
            ID: pack_level
            Constant: int, 1
          Compound: 
            Assignment: =
              UnaryOp: *
                ID: flags___0
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ush']
                BinaryOp: |
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    UnaryOp: *
                      ID: flags___0
                  Constant: int, 4
          Compound: 
            If: 
              BinaryOp: ==
                ID: pack_level
                Constant: int, 9
              Compound: 
                Assignment: =
                  UnaryOp: *
                    ID: flags___0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ush']
                    BinaryOp: |
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        UnaryOp: *
                          ID: flags___0
                      Constant: int, 2
        Assignment: =
          ID: strstart
          Constant: unsigned int, 0U
        Assignment: =
          ID: block_start
          Constant: long int, 0L
        If: 
          BinaryOp: <=
            UnaryOp: sizeof
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
            Constant: unsigned long int, 2UL
          Compound: 
            Assignment: =
              ID: tmp
              Constant: unsigned int, 32768U
          Compound: 
            Assignment: =
              ID: tmp
              Constant: unsigned int, 65536U
        Compound: 
          Assignment: =
            ID: lookahead
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              FuncCall: 
                UnaryOp: *
                  ID: read_buf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    ID: window
                  ID: tmp
        If: 
          BinaryOp: ==
            ID: lookahead
            Constant: unsigned int, 0U
          Compound: 
            Assignment: =
              ID: eofile
              Constant: int, 1
            Assignment: =
              ID: lookahead
              Constant: unsigned int, 0U
            Return: 
          Compound: 
            If: 
              BinaryOp: ==
                ID: lookahead
                Constant: unsigned int, 4294967295U
              Compound: 
                Assignment: =
                  ID: eofile
                  Constant: int, 1
                Assignment: =
                  ID: lookahead
                  Constant: unsigned int, 0U
                Return: 
        Assignment: =
          ID: eofile
          Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                BinaryOp: <
                  ID: lookahead
                  Constant: unsigned int, 262U
                Compound: 
                  If: 
                    UnaryOp: !
                      UnaryOp: !
                        ID: eofile
                    Compound: 
                      Goto: while_break
                Compound: 
                  Goto: while_break
              Compound: 
                FuncCall: 
                  ID: fill_window
          Label: while_break
            EmptyStatement: 
        Assignment: =
          ID: ins_h
          Constant: unsigned int, 0U
        Assignment: =
          ID: j___0
          Constant: unsigned int, 0U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue___0
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: <
                    ID: j___0
                    Constant: unsigned int, 2U
                Compound: 
                  Goto: while_break___0
              Assignment: =
                ID: ins_h
                BinaryOp: &
                  BinaryOp: ^
                    BinaryOp: <<
                      ID: ins_h
                      Constant: int, 5
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ArrayRef: 
                        ID: window
                        ID: j___0
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      BinaryOp: <<
                        Constant: int, 1
                        Constant: int, 15
                    Constant: unsigned int, 1U
              UnaryOp: p++
                ID: j___0
          Label: while_break___0
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: longest_match, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: cur_match, [], [], [], []
            TypeDecl: cur_match, [], None
              IdentifierType: ['IPos']
        TypeDecl: longest_match, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: chain_length, [], [], [], []
        TypeDecl: chain_length, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: scan, [], [], ['register'], []
        PtrDecl: []
          TypeDecl: scan, [], None
            IdentifierType: ['uch']
      Decl: match, [], [], ['register'], []
        PtrDecl: []
          TypeDecl: match, [], None
            IdentifierType: ['uch']
      Decl: len, [], [], ['register'], []
        TypeDecl: len, [], None
          IdentifierType: ['int']
      Decl: best_len, [], [], [], []
        TypeDecl: best_len, [], None
          IdentifierType: ['int']
      Decl: limit, [], [], [], []
        TypeDecl: limit, [], None
          IdentifierType: ['IPos']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: strend, [], [], ['register'], []
        PtrDecl: []
          TypeDecl: strend, [], None
            IdentifierType: ['uch']
      Decl: scan_end1, [], [], ['register'], []
        TypeDecl: scan_end1, [], None
          IdentifierType: ['uch']
      Decl: scan_end, [], [], ['register'], []
        TypeDecl: scan_end, [], None
          IdentifierType: ['uch']
      Compound: 
        Assignment: =
          ID: chain_length
          ID: max_chain_length
        Assignment: =
          ID: scan
          BinaryOp: +
            ID: window
            ID: strstart
        Assignment: =
          ID: best_len
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            ID: prev_length
        If: 
          BinaryOp: >
            ID: strstart
            Constant: unsigned int, 32506U
          Compound: 
            Assignment: =
              ID: tmp
              BinaryOp: -
                ID: strstart
                Constant: unsigned int, 32506U
          Compound: 
            Assignment: =
              ID: tmp
              Constant: unsigned int, 0U
        Assignment: =
          ID: limit
          ID: tmp
        Assignment: =
          ID: strend
          BinaryOp: +
            BinaryOp: +
              ID: window
              ID: strstart
            Constant: int, 258
        Assignment: =
          ID: scan_end1
          UnaryOp: *
            BinaryOp: +
              ID: scan
              BinaryOp: -
                ID: best_len
                Constant: int, 1
        Assignment: =
          ID: scan_end
          UnaryOp: *
            BinaryOp: +
              ID: scan
              ID: best_len
        If: 
          BinaryOp: >=
            ID: prev_length
            ID: good_match
          Compound: 
            Assignment: >>=
              ID: chain_length
              Constant: int, 2
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Assignment: =
                ID: match
                BinaryOp: +
                  ID: window
                  ID: cur_match
              If: 
                BinaryOp: !=
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    UnaryOp: *
                      BinaryOp: +
                        ID: match
                        ID: best_len
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ID: scan_end
                Compound: 
                  Goto: __Cont
                Compound: 
                  If: 
                    BinaryOp: !=
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        UnaryOp: *
                          BinaryOp: +
                            ID: match
                            BinaryOp: -
                              ID: best_len
                              Constant: int, 1
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: scan_end1
                    Compound: 
                      Goto: __Cont
                    Compound: 
                      If: 
                        BinaryOp: !=
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            UnaryOp: *
                              ID: match
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            UnaryOp: *
                              ID: scan
                        Compound: 
                          Goto: __Cont
                        Compound: 
                          UnaryOp: p++
                            ID: match
                          If: 
                            BinaryOp: !=
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                UnaryOp: *
                                  ID: match
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                UnaryOp: *
                                  BinaryOp: +
                                    ID: scan
                                    Constant: int, 1
                            Compound: 
                              Goto: __Cont
              Assignment: +=
                ID: scan
                Constant: int, 2
              UnaryOp: p++
                ID: match
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___0
                      EmptyStatement: 
                    UnaryOp: p++
                      ID: scan
                    UnaryOp: p++
                      ID: match
                    If: 
                      BinaryOp: ==
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          UnaryOp: *
                            ID: scan
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          UnaryOp: *
                            ID: match
                      Compound: 
                        UnaryOp: p++
                          ID: scan
                        UnaryOp: p++
                          ID: match
                        If: 
                          BinaryOp: ==
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              UnaryOp: *
                                ID: scan
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              UnaryOp: *
                                ID: match
                          Compound: 
                            UnaryOp: p++
                              ID: scan
                            UnaryOp: p++
                              ID: match
                            If: 
                              BinaryOp: ==
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  UnaryOp: *
                                    ID: scan
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  UnaryOp: *
                                    ID: match
                              Compound: 
                                UnaryOp: p++
                                  ID: scan
                                UnaryOp: p++
                                  ID: match
                                If: 
                                  BinaryOp: ==
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['int']
                                      UnaryOp: *
                                        ID: scan
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['int']
                                      UnaryOp: *
                                        ID: match
                                  Compound: 
                                    UnaryOp: p++
                                      ID: scan
                                    UnaryOp: p++
                                      ID: match
                                    If: 
                                      BinaryOp: ==
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['int']
                                          UnaryOp: *
                                            ID: scan
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['int']
                                          UnaryOp: *
                                            ID: match
                                      Compound: 
                                        UnaryOp: p++
                                          ID: scan
                                        UnaryOp: p++
                                          ID: match
                                        If: 
                                          BinaryOp: ==
                                            Cast: 
                                              Typename: None, [], None
                                                TypeDecl: None, [], None
                                                  IdentifierType: ['int']
                                              UnaryOp: *
                                                ID: scan
                                            Cast: 
                                              Typename: None, [], None
                                                TypeDecl: None, [], None
                                                  IdentifierType: ['int']
                                              UnaryOp: *
                                                ID: match
                                          Compound: 
                                            UnaryOp: p++
                                              ID: scan
                                            UnaryOp: p++
                                              ID: match
                                            If: 
                                              BinaryOp: ==
                                                Cast: 
                                                  Typename: None, [], None
                                                    TypeDecl: None, [], None
                                                      IdentifierType: ['int']
                                                  UnaryOp: *
                                                    ID: scan
                                                Cast: 
                                                  Typename: None, [], None
                                                    TypeDecl: None, [], None
                                                      IdentifierType: ['int']
                                                  UnaryOp: *
                                                    ID: match
                                              Compound: 
                                                UnaryOp: p++
                                                  ID: scan
                                                UnaryOp: p++
                                                  ID: match
                                                If: 
                                                  BinaryOp: ==
                                                    Cast: 
                                                      Typename: None, [], None
                                                        TypeDecl: None, [], None
                                                          IdentifierType: ['int']
                                                      UnaryOp: *
                                                        ID: scan
                                                    Cast: 
                                                      Typename: None, [], None
                                                        TypeDecl: None, [], None
                                                          IdentifierType: ['int']
                                                      UnaryOp: *
                                                        ID: match
                                                  Compound: 
                                                    If: 
                                                      UnaryOp: !
                                                        BinaryOp: <
                                                          Cast: 
                                                            Typename: None, [], None
                                                              TypeDecl: None, [], None
                                                                IdentifierType: ['unsigned', 'long']
                                                            ID: scan
                                                          Cast: 
                                                            Typename: None, [], None
                                                              TypeDecl: None, [], None
                                                                IdentifierType: ['unsigned', 'long']
                                                            ID: strend
                                                      Compound: 
                                                        Goto: while_break___0
                                                  Compound: 
                                                    Goto: while_break___0
                                              Compound: 
                                                Goto: while_break___0
                                          Compound: 
                                            Goto: while_break___0
                                      Compound: 
                                        Goto: while_break___0
                                  Compound: 
                                    Goto: while_break___0
                              Compound: 
                                Goto: while_break___0
                          Compound: 
                            Goto: while_break___0
                      Compound: 
                        Goto: while_break___0
                Label: while_break___0
                  EmptyStatement: 
              Assignment: =
                ID: len
                BinaryOp: -
                  Constant: int, 258
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    BinaryOp: -
                      ID: strend
                      ID: scan
              Assignment: =
                ID: scan
                BinaryOp: -
                  ID: strend
                  Constant: int, 258
              If: 
                BinaryOp: >
                  ID: len
                  ID: best_len
                Compound: 
                  Assignment: =
                    ID: match_start
                    ID: cur_match
                  Assignment: =
                    ID: best_len
                    ID: len
                  If: 
                    BinaryOp: >=
                      ID: len
                      ID: nice_match
                    Compound: 
                      Goto: while_break
                  Assignment: =
                    ID: scan_end1
                    UnaryOp: *
                      BinaryOp: +
                        ID: scan
                        BinaryOp: -
                          ID: best_len
                          Constant: int, 1
                  Assignment: =
                    ID: scan_end
                    UnaryOp: *
                      BinaryOp: +
                        ID: scan
                        ID: best_len
              Label: __Cont
                Assignment: =
                  ID: cur_match
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['IPos']
                    ArrayRef: 
                      ID: prev
                      BinaryOp: &
                        ID: cur_match
                        Constant: unsigned int, 32767U
              If: 
                BinaryOp: >
                  ID: cur_match
                  ID: limit
                Compound: 
                  UnaryOp: p--
                    ID: chain_length
                  If: 
                    UnaryOp: !
                      BinaryOp: !=
                        ID: chain_length
                        Constant: unsigned int, 0U
                    Compound: 
                      Goto: while_break
                Compound: 
                  Goto: while_break
          Label: while_break
            EmptyStatement: 
        Return: 
          ID: best_len
  FuncDef: 
    Decl: fill_window, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: fill_window, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: n, [], [], ['register'], []
        TypeDecl: n, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: m, [], [], ['register'], []
        TypeDecl: m, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: more, [], [], [], []
        TypeDecl: more, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Assignment: =
          ID: more
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['unsigned', 'int']
            BinaryOp: -
              BinaryOp: -
                ID: window_size
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ulg']
                  ID: lookahead
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['ulg']
                ID: strstart
        If: 
          BinaryOp: ==
            ID: more
            Constant: unsigned int, 4294967295U
          Compound: 
            UnaryOp: p--
              ID: more
          Compound: 
            If: 
              BinaryOp: >=
                ID: strstart
                Constant: unsigned int, 65274U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: memcpy
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['void']
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                          ID: window
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['void']
                        BinaryOp: +
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char']
                            ID: window
                          Constant: int, 32768
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['size_t']
                        Constant: unsigned int, 32768U
                  Assignment: -=
                    ID: match_start
                    Constant: unsigned int, 32768U
                  Assignment: -=
                    ID: strstart
                    Constant: unsigned int, 32768U
                  Assignment: -=
                    ID: block_start
                    Constant: long int, 32768L
                  Assignment: =
                    ID: n
                    Constant: unsigned int, 0U
                Compound: 
                  While: 
                    Constant: int, 1
                    Compound: 
                      Label: while_continue
                        EmptyStatement: 
                      If: 
                        UnaryOp: !
                          BinaryOp: <
                            ID: n
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              BinaryOp: <<
                                Constant: int, 1
                                Constant: int, 15
                        Compound: 
                          Goto: while_break
                      Assignment: =
                        ID: m
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          UnaryOp: *
                            BinaryOp: +
                              BinaryOp: +
                                ID: prev
                                Constant: int, 32768
                              ID: n
                      If: 
                        BinaryOp: >=
                          ID: m
                          Constant: unsigned int, 32768U
                        Compound: 
                          Assignment: =
                            ID: tmp
                            BinaryOp: -
                              ID: m
                              Constant: unsigned int, 32768U
                        Compound: 
                          Assignment: =
                            ID: tmp
                            Constant: unsigned int, 0U
                      Assignment: =
                        UnaryOp: *
                          BinaryOp: +
                            BinaryOp: +
                              ID: prev
                              Constant: int, 32768
                            ID: n
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['Pos']
                          ID: tmp
                      UnaryOp: p++
                        ID: n
                  Label: while_break
                    EmptyStatement: 
                Assignment: =
                  ID: n
                  Constant: unsigned int, 0U
                Compound: 
                  While: 
                    Constant: int, 1
                    Compound: 
                      Label: while_continue___0
                        EmptyStatement: 
                      If: 
                        UnaryOp: !
                          BinaryOp: <
                            ID: n
                            Constant: unsigned int, 32768U
                        Compound: 
                          Goto: while_break___0
                      Assignment: =
                        ID: m
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ArrayRef: 
                            ID: prev
                            ID: n
                      If: 
                        BinaryOp: >=
                          ID: m
                          Constant: unsigned int, 32768U
                        Compound: 
                          Assignment: =
                            ID: tmp___0
                            BinaryOp: -
                              ID: m
                              Constant: unsigned int, 32768U
                        Compound: 
                          Assignment: =
                            ID: tmp___0
                            Constant: unsigned int, 0U
                      Assignment: =
                        ArrayRef: 
                          ID: prev
                          ID: n
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['Pos']
                          ID: tmp___0
                      UnaryOp: p++
                        ID: n
                  Label: while_break___0
                    EmptyStatement: 
                Assignment: +=
                  ID: more
                  Constant: unsigned int, 32768U
        If: 
          UnaryOp: !
            ID: eofile
          Compound: 
            Compound: 
              Assignment: =
                ID: n
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'int']
                  FuncCall: 
                    UnaryOp: *
                      ID: read_buf
                    ExprList: 
                      BinaryOp: +
                        BinaryOp: +
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char']
                            ID: window
                          ID: strstart
                        ID: lookahead
                      ID: more
            If: 
              BinaryOp: ==
                ID: n
                Constant: unsigned int, 0U
              Compound: 
                Assignment: =
                  ID: eofile
                  Constant: int, 1
              Compound: 
                If: 
                  BinaryOp: ==
                    ID: n
                    Constant: unsigned int, 4294967295U
                  Compound: 
                    Assignment: =
                      ID: eofile
                      Constant: int, 1
                  Compound: 
                    Assignment: +=
                      ID: lookahead
                      ID: n
        Return: 
  FuncDef: 
    Decl: deflate_fast, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: deflate_fast, [], None
          IdentifierType: ['ulg']
    Compound: 
      Decl: hash_head, [], [], [], []
        TypeDecl: hash_head, [], None
          IdentifierType: ['IPos']
      Decl: flush, [], [], [], []
        TypeDecl: flush, [], None
          IdentifierType: ['int']
      Decl: match_length, [], [], [], []
        TypeDecl: match_length, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp, [], None
            IdentifierType: ['char']
      Decl: tmp___0, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___0, [], None
            IdentifierType: ['char']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['ulg']
      Compound: 
        Assignment: =
          ID: match_length
          Constant: unsigned int, 0U
        Assignment: =
          ID: prev_length
          Constant: unsigned int, 2U
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    ID: lookahead
                    Constant: unsigned int, 0U
                Compound: 
                  Goto: while_break
              Assignment: =
                ID: ins_h
                BinaryOp: &
                  BinaryOp: ^
                    BinaryOp: <<
                      ID: ins_h
                      Constant: int, 5
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ArrayRef: 
                        ID: window
                        BinaryOp: -
                          BinaryOp: +
                            ID: strstart
                            Constant: unsigned int, 3U
                          Constant: unsigned int, 1U
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      BinaryOp: <<
                        Constant: int, 1
                        Constant: int, 15
                    Constant: unsigned int, 1U
              Assignment: =
                ID: hash_head
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['IPos']
                  UnaryOp: *
                    BinaryOp: +
                      BinaryOp: +
                        ID: prev
                        Constant: int, 32768
                      ID: ins_h
              Assignment: =
                ArrayRef: 
                  ID: prev
                  BinaryOp: &
                    ID: strstart
                    Constant: unsigned int, 32767U
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  ID: hash_head
              Assignment: =
                UnaryOp: *
                  BinaryOp: +
                    BinaryOp: +
                      ID: prev
                      Constant: int, 32768
                    ID: ins_h
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  ID: strstart
              If: 
                BinaryOp: !=
                  ID: hash_head
                  Constant: unsigned int, 0U
                Compound: 
                  If: 
                    BinaryOp: <=
                      BinaryOp: -
                        ID: strstart
                        ID: hash_head
                      Constant: unsigned int, 32506U
                    Compound: 
                      Compound: 
                        Assignment: =
                          ID: match_length
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'int']
                            FuncCall: 
                              ID: longest_match
                              ExprList: 
                                ID: hash_head
                      If: 
                        BinaryOp: >
                          ID: match_length
                          ID: lookahead
                        Compound: 
                          Assignment: =
                            ID: match_length
                            ID: lookahead
              If: 
                BinaryOp: >=
                  ID: match_length
                  Constant: unsigned int, 3U
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: flush
                      FuncCall: 
                        ID: ct_tally
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            BinaryOp: -
                              ID: strstart
                              ID: match_start
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            BinaryOp: -
                              ID: match_length
                              Constant: unsigned int, 3U
                    Assignment: -=
                      ID: lookahead
                      ID: match_length
                  If: 
                    BinaryOp: <=
                      ID: match_length
                      ID: max_lazy_match
                    Compound: 
                      UnaryOp: p--
                        ID: match_length
                      Compound: 
                        While: 
                          Constant: int, 1
                          Compound: 
                            Label: while_continue___0
                              EmptyStatement: 
                            UnaryOp: p++
                              ID: strstart
                            Assignment: =
                              ID: ins_h
                              BinaryOp: &
                                BinaryOp: ^
                                  BinaryOp: <<
                                    ID: ins_h
                                    Constant: int, 5
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['unsigned', 'int']
                                    ArrayRef: 
                                      ID: window
                                      BinaryOp: -
                                        BinaryOp: +
                                          ID: strstart
                                          Constant: unsigned int, 3U
                                        Constant: unsigned int, 1U
                                BinaryOp: -
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['unsigned', 'int']
                                    BinaryOp: <<
                                      Constant: int, 1
                                      Constant: int, 15
                                  Constant: unsigned int, 1U
                            Assignment: =
                              ID: hash_head
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['IPos']
                                UnaryOp: *
                                  BinaryOp: +
                                    BinaryOp: +
                                      ID: prev
                                      Constant: int, 32768
                                    ID: ins_h
                            Assignment: =
                              ArrayRef: 
                                ID: prev
                                BinaryOp: &
                                  ID: strstart
                                  Constant: unsigned int, 32767U
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                ID: hash_head
                            Assignment: =
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: prev
                                    Constant: int, 32768
                                  ID: ins_h
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                ID: strstart
                            UnaryOp: p--
                              ID: match_length
                            If: 
                              UnaryOp: !
                                BinaryOp: !=
                                  ID: match_length
                                  Constant: unsigned int, 0U
                              Compound: 
                                Goto: while_break___0
                        Label: while_break___0
                          EmptyStatement: 
                      UnaryOp: p++
                        ID: strstart
                    Compound: 
                      Assignment: +=
                        ID: strstart
                        ID: match_length
                      Assignment: =
                        ID: match_length
                        Constant: unsigned int, 0U
                      Assignment: =
                        ID: ins_h
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ArrayRef: 
                            ID: window
                            ID: strstart
                      Assignment: =
                        ID: ins_h
                        BinaryOp: &
                          BinaryOp: ^
                            BinaryOp: <<
                              ID: ins_h
                              Constant: int, 5
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              ArrayRef: 
                                ID: window
                                BinaryOp: +
                                  ID: strstart
                                  Constant: unsigned int, 1U
                          BinaryOp: -
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['unsigned', 'int']
                              BinaryOp: <<
                                Constant: int, 1
                                Constant: int, 15
                            Constant: unsigned int, 1U
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: flush
                      FuncCall: 
                        ID: ct_tally
                        ExprList: 
                          Constant: int, 0
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: window
                              ID: strstart
                    UnaryOp: p--
                      ID: lookahead
                    UnaryOp: p++
                      ID: strstart
              If: 
                ID: flush
                Compound: 
                  If: 
                    BinaryOp: >=
                      ID: block_start
                      Constant: long int, 0L
                    Compound: 
                      Assignment: =
                        ID: tmp
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                          UnaryOp: &
                            ArrayRef: 
                              ID: window
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                ID: block_start
                    Compound: 
                      Assignment: =
                        ID: tmp
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['void']
                            Constant: int, 0
                  Compound: 
                    FuncCall: 
                      ID: flush_block
                      ExprList: 
                        ID: tmp
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          BinaryOp: -
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['long']
                              ID: strstart
                            ID: block_start
                        Constant: int, 0
                    Assignment: =
                      ID: block_start
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['long']
                        ID: strstart
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___1
                      EmptyStatement: 
                    If: 
                      BinaryOp: <
                        ID: lookahead
                        Constant: unsigned int, 262U
                      Compound: 
                        If: 
                          UnaryOp: !
                            UnaryOp: !
                              ID: eofile
                          Compound: 
                            Goto: while_break___1
                      Compound: 
                        Goto: while_break___1
                    Compound: 
                      FuncCall: 
                        ID: fill_window
                Label: while_break___1
                  EmptyStatement: 
          Label: while_break
            EmptyStatement: 
        If: 
          BinaryOp: >=
            ID: block_start
            Constant: long int, 0L
          Compound: 
            Assignment: =
              ID: tmp___0
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                UnaryOp: &
                  ArrayRef: 
                    ID: window
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: block_start
          Compound: 
            Assignment: =
              ID: tmp___0
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['void']
                  Constant: int, 0
        Compound: 
          Assignment: =
            ID: tmp___1
            FuncCall: 
              ID: flush_block
              ExprList: 
                ID: tmp___0
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ulg']
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['long']
                      ID: strstart
                    ID: block_start
                Constant: int, 1
        Return: 
          ID: tmp___1
  FuncDef: 
    Decl: deflate, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: deflate, [], None
          IdentifierType: ['ulg']
    Compound: 
      Decl: hash_head, [], [], [], []
        TypeDecl: hash_head, [], None
          IdentifierType: ['IPos']
      Decl: prev_match, [], [], [], []
        TypeDecl: prev_match, [], None
          IdentifierType: ['IPos']
      Decl: flush, [], [], [], []
        TypeDecl: flush, [], None
          IdentifierType: ['int']
      Decl: match_available, [], [], [], []
        TypeDecl: match_available, [], None
          IdentifierType: ['int']
      Decl: match_length, [], [], ['register'], []
        TypeDecl: match_length, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['ulg']
      Decl: tmp___0, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___0, [], None
            IdentifierType: ['char']
      Decl: tmp___1, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___1, [], None
            IdentifierType: ['char']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Decl: tmp___3, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___3, [], None
            IdentifierType: ['char']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['ulg']
      Compound: 
        Assignment: =
          ID: match_available
          Constant: int, 0
        Assignment: =
          ID: match_length
          Constant: unsigned int, 2U
        If: 
          BinaryOp: <=
            ID: compr_level
            Constant: int, 3
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp
                FuncCall: 
                  ID: deflate_fast
            Return: 
              ID: tmp
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    ID: lookahead
                    Constant: unsigned int, 0U
                Compound: 
                  Goto: while_break
              Assignment: =
                ID: ins_h
                BinaryOp: &
                  BinaryOp: ^
                    BinaryOp: <<
                      ID: ins_h
                      Constant: int, 5
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ArrayRef: 
                        ID: window
                        BinaryOp: -
                          BinaryOp: +
                            ID: strstart
                            Constant: unsigned int, 3U
                          Constant: unsigned int, 1U
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      BinaryOp: <<
                        Constant: int, 1
                        Constant: int, 15
                    Constant: unsigned int, 1U
              Assignment: =
                ID: hash_head
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['IPos']
                  UnaryOp: *
                    BinaryOp: +
                      BinaryOp: +
                        ID: prev
                        Constant: int, 32768
                      ID: ins_h
              Assignment: =
                ArrayRef: 
                  ID: prev
                  BinaryOp: &
                    ID: strstart
                    Constant: unsigned int, 32767U
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  ID: hash_head
              Assignment: =
                UnaryOp: *
                  BinaryOp: +
                    BinaryOp: +
                      ID: prev
                      Constant: int, 32768
                    ID: ins_h
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ush']
                  ID: strstart
              Assignment: =
                ID: prev_length
                ID: match_length
              Assignment: =
                ID: prev_match
                ID: match_start
              Assignment: =
                ID: match_length
                Constant: unsigned int, 2U
              If: 
                BinaryOp: !=
                  ID: hash_head
                  Constant: unsigned int, 0U
                Compound: 
                  If: 
                    BinaryOp: <
                      ID: prev_length
                      ID: max_lazy_match
                    Compound: 
                      If: 
                        BinaryOp: <=
                          BinaryOp: -
                            ID: strstart
                            ID: hash_head
                          Constant: unsigned int, 32506U
                        Compound: 
                          Compound: 
                            Assignment: =
                              ID: match_length
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['unsigned', 'int']
                                FuncCall: 
                                  ID: longest_match
                                  ExprList: 
                                    ID: hash_head
                          If: 
                            BinaryOp: >
                              ID: match_length
                              ID: lookahead
                            Compound: 
                              Assignment: =
                                ID: match_length
                                ID: lookahead
                          If: 
                            BinaryOp: ==
                              ID: match_length
                              Constant: unsigned int, 3U
                            Compound: 
                              If: 
                                BinaryOp: >
                                  BinaryOp: -
                                    ID: strstart
                                    ID: match_start
                                  Constant: unsigned int, 4096U
                                Compound: 
                                  UnaryOp: p--
                                    ID: match_length
              If: 
                BinaryOp: >=
                  ID: prev_length
                  Constant: unsigned int, 3U
                Compound: 
                  If: 
                    BinaryOp: <=
                      ID: match_length
                      ID: prev_length
                    Compound: 
                      Compound: 
                        Assignment: =
                          ID: flush
                          FuncCall: 
                            ID: ct_tally
                            ExprList: 
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                BinaryOp: -
                                  BinaryOp: -
                                    ID: strstart
                                    Constant: unsigned int, 1U
                                  ID: prev_match
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                BinaryOp: -
                                  ID: prev_length
                                  Constant: unsigned int, 3U
                        Assignment: -=
                          ID: lookahead
                          BinaryOp: -
                            ID: prev_length
                            Constant: unsigned int, 1U
                        Assignment: -=
                          ID: prev_length
                          Constant: unsigned int, 2U
                      Compound: 
                        While: 
                          Constant: int, 1
                          Compound: 
                            Label: while_continue___0
                              EmptyStatement: 
                            UnaryOp: p++
                              ID: strstart
                            Assignment: =
                              ID: ins_h
                              BinaryOp: &
                                BinaryOp: ^
                                  BinaryOp: <<
                                    ID: ins_h
                                    Constant: int, 5
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['unsigned', 'int']
                                    ArrayRef: 
                                      ID: window
                                      BinaryOp: -
                                        BinaryOp: +
                                          ID: strstart
                                          Constant: unsigned int, 3U
                                        Constant: unsigned int, 1U
                                BinaryOp: -
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['unsigned', 'int']
                                    BinaryOp: <<
                                      Constant: int, 1
                                      Constant: int, 15
                                  Constant: unsigned int, 1U
                            Assignment: =
                              ID: hash_head
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['IPos']
                                UnaryOp: *
                                  BinaryOp: +
                                    BinaryOp: +
                                      ID: prev
                                      Constant: int, 32768
                                    ID: ins_h
                            Assignment: =
                              ArrayRef: 
                                ID: prev
                                BinaryOp: &
                                  ID: strstart
                                  Constant: unsigned int, 32767U
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                ID: hash_head
                            Assignment: =
                              UnaryOp: *
                                BinaryOp: +
                                  BinaryOp: +
                                    ID: prev
                                    Constant: int, 32768
                                  ID: ins_h
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                ID: strstart
                            UnaryOp: p--
                              ID: prev_length
                            If: 
                              UnaryOp: !
                                BinaryOp: !=
                                  ID: prev_length
                                  Constant: unsigned int, 0U
                              Compound: 
                                Goto: while_break___0
                        Label: while_break___0
                          EmptyStatement: 
                      Assignment: =
                        ID: match_available
                        Constant: int, 0
                      Assignment: =
                        ID: match_length
                        Constant: unsigned int, 2U
                      UnaryOp: p++
                        ID: strstart
                      If: 
                        ID: flush
                        Compound: 
                          If: 
                            BinaryOp: >=
                              ID: block_start
                              Constant: long int, 0L
                            Compound: 
                              Assignment: =
                                ID: tmp___0
                                Cast: 
                                  Typename: None, [], None
                                    PtrDecl: []
                                      TypeDecl: None, [], None
                                        IdentifierType: ['char']
                                  UnaryOp: &
                                    ArrayRef: 
                                      ID: window
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['unsigned', 'int']
                                        ID: block_start
                            Compound: 
                              Assignment: =
                                ID: tmp___0
                                Cast: 
                                  Typename: None, [], None
                                    PtrDecl: []
                                      TypeDecl: None, [], None
                                        IdentifierType: ['char']
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['void']
                                    Constant: int, 0
                          Compound: 
                            FuncCall: 
                              ID: flush_block
                              ExprList: 
                                ID: tmp___0
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['ulg']
                                  BinaryOp: -
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['long']
                                      ID: strstart
                                    ID: block_start
                                Constant: int, 0
                            Assignment: =
                              ID: block_start
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['long']
                                ID: strstart
                    Compound: 
                      Goto: _L
                Compound: 
                  Label: _L
                    If: 
                      ID: match_available
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___2
                            FuncCall: 
                              ID: ct_tally
                              ExprList: 
                                Constant: int, 0
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  ArrayRef: 
                                    ID: window
                                    BinaryOp: -
                                      ID: strstart
                                      Constant: unsigned int, 1U
                        If: 
                          ID: tmp___2
                          Compound: 
                            If: 
                              BinaryOp: >=
                                ID: block_start
                                Constant: long int, 0L
                              Compound: 
                                Assignment: =
                                  ID: tmp___1
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['char']
                                    UnaryOp: &
                                      ArrayRef: 
                                        ID: window
                                        Cast: 
                                          Typename: None, [], None
                                            TypeDecl: None, [], None
                                              IdentifierType: ['unsigned', 'int']
                                          ID: block_start
                              Compound: 
                                Assignment: =
                                  ID: tmp___1
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['char']
                                    Cast: 
                                      Typename: None, [], None
                                        PtrDecl: []
                                          TypeDecl: None, [], None
                                            IdentifierType: ['void']
                                      Constant: int, 0
                            Compound: 
                              FuncCall: 
                                ID: flush_block
                                ExprList: 
                                  ID: tmp___1
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ulg']
                                    BinaryOp: -
                                      Cast: 
                                        Typename: None, [], None
                                          TypeDecl: None, [], None
                                            IdentifierType: ['long']
                                        ID: strstart
                                      ID: block_start
                                  Constant: int, 0
                              Assignment: =
                                ID: block_start
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['long']
                                  ID: strstart
                        UnaryOp: p++
                          ID: strstart
                        UnaryOp: p--
                          ID: lookahead
                      Compound: 
                        Assignment: =
                          ID: match_available
                          Constant: int, 1
                        UnaryOp: p++
                          ID: strstart
                        UnaryOp: p--
                          ID: lookahead
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___1
                      EmptyStatement: 
                    If: 
                      BinaryOp: <
                        ID: lookahead
                        Constant: unsigned int, 262U
                      Compound: 
                        If: 
                          UnaryOp: !
                            UnaryOp: !
                              ID: eofile
                          Compound: 
                            Goto: while_break___1
                      Compound: 
                        Goto: while_break___1
                    Compound: 
                      FuncCall: 
                        ID: fill_window
                Label: while_break___1
                  EmptyStatement: 
          Label: while_break
            EmptyStatement: 
        If: 
          ID: match_available
          Compound: 
            Compound: 
              FuncCall: 
                ID: ct_tally
                ExprList: 
                  Constant: int, 0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ArrayRef: 
                      ID: window
                      BinaryOp: -
                        ID: strstart
                        Constant: unsigned int, 1U
        If: 
          BinaryOp: >=
            ID: block_start
            Constant: long int, 0L
          Compound: 
            Assignment: =
              ID: tmp___3
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                UnaryOp: &
                  ArrayRef: 
                    ID: window
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'int']
                      ID: block_start
          Compound: 
            Assignment: =
              ID: tmp___3
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['void']
                  Constant: int, 0
        Compound: 
          Assignment: =
            ID: tmp___4
            FuncCall: 
              ID: flush_block
              ExprList: 
                ID: tmp___3
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ulg']
                  BinaryOp: -
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['long']
                      ID: strstart
                    ID: block_start
                Constant: int, 1
        Return: 
          ID: tmp___4
  Decl: header_bytes, [], [], [], []
    TypeDecl: header_bytes, [], None
      IdentifierType: ['long']
  Decl: time_stamp, [], [], [], []
    TypeDecl: time_stamp, [], None
      IdentifierType: ['long']
  Decl: save_orig_name, [], [], [], []
    TypeDecl: save_orig_name, [], None
      IdentifierType: ['int']
  Decl: zip, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: in, [], [], [], []
          TypeDecl: in, [], None
            IdentifierType: ['int']
        Decl: out, [], [], [], []
          TypeDecl: out, [], None
            IdentifierType: ['int']
      TypeDecl: zip, [], None
        IdentifierType: ['int']
  Decl: crc___0, [], [], ['static'], []
    TypeDecl: crc___0, [], None
      IdentifierType: ['ulg']
  FuncDef: 
    Decl: zip, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: in, [], [], [], []
            TypeDecl: in, [], None
              IdentifierType: ['int']
          Decl: out, [], [], [], []
            TypeDecl: out, [], None
              IdentifierType: ['int']
        TypeDecl: zip, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: flags___0, [], [], [], []
        TypeDecl: flags___0, [], None
          IdentifierType: ['uch']
      Decl: attr, [], [], [], []
        TypeDecl: attr, [], None
          IdentifierType: ['ush']
      Decl: deflate_flags, [], [], [], []
        TypeDecl: deflate_flags, [], None
          IdentifierType: ['ush']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___10, [], [], [], []
        TypeDecl: tmp___10, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___11, [], [], [], []
        TypeDecl: tmp___11, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___12, [], [], [], []
        TypeDecl: tmp___12, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: p, [], [], [], []
        PtrDecl: []
          TypeDecl: p, [], None
            IdentifierType: ['char']
      Decl: tmp___13, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___13, [], None
            IdentifierType: ['char']
      Decl: tmp___14, [], [], [], []
        TypeDecl: tmp___14, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___15, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___15, [], None
            IdentifierType: ['char']
      Decl: tmp___16, [], [], [], []
        TypeDecl: tmp___16, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___17, [], [], [], []
        TypeDecl: tmp___17, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___18, [], [], [], []
        TypeDecl: tmp___18, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___19, [], [], [], []
        TypeDecl: tmp___19, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___20, [], [], [], []
        TypeDecl: tmp___20, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___21, [], [], [], []
        TypeDecl: tmp___21, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___22, [], [], [], []
        TypeDecl: tmp___22, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___23, [], [], [], []
        TypeDecl: tmp___23, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___24, [], [], [], []
        TypeDecl: tmp___24, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___25, [], [], [], []
        TypeDecl: tmp___25, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___26, [], [], [], []
        TypeDecl: tmp___26, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___27, [], [], [], []
        TypeDecl: tmp___27, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___28, [], [], [], []
        TypeDecl: tmp___28, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___29, [], [], [], []
        TypeDecl: tmp___29, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___30, [], [], [], []
        TypeDecl: tmp___30, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___31, [], [], [], []
        TypeDecl: tmp___31, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: __cil_tmp40, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp40, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp41, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp41, [], None
            IdentifierType: ['char']
      Compound: 
        Assignment: =
          ID: flags___0
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            Constant: int, 0
        Assignment: =
          ID: attr
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ush']
            Constant: int, 0
        Assignment: =
          ID: deflate_flags
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ush']
            Constant: int, 0
        Assignment: =
          ID: ifd
          ID: in
        Assignment: =
          ID: ofd
          ID: out
        Assignment: =
          ID: outcnt
          Constant: unsigned int, 0U
        Assignment: =
          ID: method
          Constant: int, 8
        Assignment: =
          ID: tmp
          ID: outcnt
        UnaryOp: p++
          ID: outcnt
        Assignment: =
          ArrayRef: 
            ID: outbuf
            ID: tmp
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            UnaryOp: *
              BinaryOp: +
                Constant: string, "\037\213"
                Constant: int, 0
        If: 
          BinaryOp: ==
            ID: outcnt
            Constant: unsigned int, 16384U
          Compound: 
            Compound: 
              FuncCall: 
                ID: flush_outbuf
        Assignment: =
          ID: tmp___0
          ID: outcnt
        UnaryOp: p++
          ID: outcnt
        Assignment: =
          ArrayRef: 
            ID: outbuf
            ID: tmp___0
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            UnaryOp: *
              BinaryOp: +
                Constant: string, "\037\213"
                Constant: int, 1
        If: 
          BinaryOp: ==
            ID: outcnt
            Constant: unsigned int, 16384U
          Compound: 
            Compound: 
              FuncCall: 
                ID: flush_outbuf
        Assignment: =
          ID: tmp___1
          ID: outcnt
        UnaryOp: p++
          ID: outcnt
        Assignment: =
          ArrayRef: 
            ID: outbuf
            ID: tmp___1
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            Constant: int, 8
        If: 
          BinaryOp: ==
            ID: outcnt
            Constant: unsigned int, 16384U
          Compound: 
            Compound: 
              FuncCall: 
                ID: flush_outbuf
        If: 
          ID: save_orig_name
          Compound: 
            Assignment: =
              ID: flags___0
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: |
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ID: flags___0
                  Constant: int, 8
        Assignment: =
          ID: tmp___2
          ID: outcnt
        UnaryOp: p++
          ID: outcnt
        Assignment: =
          ArrayRef: 
            ID: outbuf
            ID: tmp___2
          ID: flags___0
        If: 
          BinaryOp: ==
            ID: outcnt
            Constant: unsigned int, 16384U
          Compound: 
            Compound: 
              FuncCall: 
                ID: flush_outbuf
        If: 
          BinaryOp: <
            ID: outcnt
            Constant: unsigned int, 16382U
          Compound: 
            Assignment: =
              ID: tmp___3
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___3
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: &
                    ID: time_stamp
                    Constant: long int, 65535L
                  Constant: long int, 255L
            Assignment: =
              ID: tmp___4
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___4
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: &
                        ID: time_stamp
                        Constant: long int, 65535L
                  Constant: int, 8
          Compound: 
            Assignment: =
              ID: tmp___5
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___5
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: &
                    ID: time_stamp
                    Constant: long int, 65535L
                  Constant: long int, 255L
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
            Assignment: =
              ID: tmp___6
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___6
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: &
                        ID: time_stamp
                        Constant: long int, 65535L
                  Constant: int, 8
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
        If: 
          BinaryOp: <
            ID: outcnt
            Constant: unsigned int, 16382U
          Compound: 
            Assignment: =
              ID: tmp___7
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___7
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: >>
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: time_stamp
                    Constant: int, 16
                  Constant: unsigned long int, 255UL
            Assignment: =
              ID: tmp___8
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___8
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: >>
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          ID: time_stamp
                        Constant: int, 16
                  Constant: int, 8
          Compound: 
            Assignment: =
              ID: tmp___9
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___9
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: >>
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: time_stamp
                    Constant: int, 16
                  Constant: unsigned long int, 255UL
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
            Assignment: =
              ID: tmp___10
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___10
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: >>
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          ID: time_stamp
                        Constant: int, 16
                  Constant: int, 8
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
        Compound: 
          Assignment: =
            ID: crc___0
            FuncCall: 
              ID: updcrc
              ExprList: 
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                  Constant: int, 0
                Constant: unsigned int, 0U
          FuncCall: 
            ID: bi_init
            ExprList: 
              ID: out
          FuncCall: 
            ID: ct_init
            ExprList: 
              UnaryOp: &
                ID: attr
              UnaryOp: &
                ID: method
          FuncCall: 
            ID: lm_init
            ExprList: 
              ID: level
              UnaryOp: &
                ID: deflate_flags
          Assignment: =
            ID: tmp___11
            ID: outcnt
          UnaryOp: p++
            ID: outcnt
          Assignment: =
            ArrayRef: 
              ID: outbuf
              ID: tmp___11
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['uch']
              ID: deflate_flags
        If: 
          BinaryOp: ==
            ID: outcnt
            Constant: unsigned int, 16384U
          Compound: 
            Compound: 
              FuncCall: 
                ID: flush_outbuf
        Assignment: =
          ID: tmp___12
          ID: outcnt
        UnaryOp: p++
          ID: outcnt
        Assignment: =
          ArrayRef: 
            ID: outbuf
            ID: tmp___12
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['uch']
            Constant: int, 3
        If: 
          BinaryOp: ==
            ID: outcnt
            Constant: unsigned int, 16384U
          Compound: 
            Compound: 
              FuncCall: 
                ID: flush_outbuf
        If: 
          ID: save_orig_name
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___13
                FuncCall: 
                  ID: basename
                  ExprList: 
                    ID: ifname
              Assignment: =
                ID: p
                ID: tmp___13
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue
                    EmptyStatement: 
                  Assignment: =
                    ID: tmp___14
                    ID: outcnt
                  UnaryOp: p++
                    ID: outcnt
                  Assignment: =
                    ArrayRef: 
                      ID: outbuf
                      ID: tmp___14
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['uch']
                      UnaryOp: *
                        ID: p
                  If: 
                    BinaryOp: ==
                      ID: outcnt
                      Constant: unsigned int, 16384U
                    Compound: 
                      Compound: 
                        FuncCall: 
                          ID: flush_outbuf
                  Assignment: =
                    ID: tmp___15
                    ID: p
                  UnaryOp: p++
                    ID: p
                  If: 
                    UnaryOp: !
                      UnaryOp: *
                        ID: tmp___15
                    Compound: 
                      Goto: while_break
              Label: while_break
                EmptyStatement: 
        Compound: 
          Assignment: =
            ID: header_bytes
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['long']
              ID: outcnt
          FuncCall: 
            ID: deflate
        If: 
          BinaryOp: <
            ID: outcnt
            Constant: unsigned int, 16382U
          Compound: 
            Assignment: =
              ID: tmp___16
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___16
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: &
                    ID: crc___0
                    Constant: unsigned long int, 65535UL
                  Constant: unsigned long int, 255UL
            Assignment: =
              ID: tmp___17
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___17
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: &
                        ID: crc___0
                        Constant: unsigned long int, 65535UL
                  Constant: int, 8
          Compound: 
            Assignment: =
              ID: tmp___18
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___18
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: &
                    ID: crc___0
                    Constant: unsigned long int, 65535UL
                  Constant: unsigned long int, 255UL
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
            Assignment: =
              ID: tmp___19
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___19
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: &
                        ID: crc___0
                        Constant: unsigned long int, 65535UL
                  Constant: int, 8
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
        If: 
          BinaryOp: <
            ID: outcnt
            Constant: unsigned int, 16382U
          Compound: 
            Assignment: =
              ID: tmp___20
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___20
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: >>
                    ID: crc___0
                    Constant: int, 16
                  Constant: unsigned long int, 255UL
            Assignment: =
              ID: tmp___21
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___21
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: >>
                        ID: crc___0
                        Constant: int, 16
                  Constant: int, 8
          Compound: 
            Assignment: =
              ID: tmp___22
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___22
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: >>
                    ID: crc___0
                    Constant: int, 16
                  Constant: unsigned long int, 255UL
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
            Assignment: =
              ID: tmp___23
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___23
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: >>
                        ID: crc___0
                        Constant: int, 16
                  Constant: int, 8
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
        If: 
          BinaryOp: <
            ID: outcnt
            Constant: unsigned int, 16382U
          Compound: 
            Assignment: =
              ID: tmp___24
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___24
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: &
                    ID: bytes_in
                    Constant: long int, 65535L
                  Constant: long int, 255L
            Assignment: =
              ID: tmp___25
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___25
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: &
                        ID: bytes_in
                        Constant: long int, 65535L
                  Constant: int, 8
          Compound: 
            Assignment: =
              ID: tmp___26
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___26
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: &
                    ID: bytes_in
                    Constant: long int, 65535L
                  Constant: long int, 255L
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
            Assignment: =
              ID: tmp___27
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___27
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: &
                        ID: bytes_in
                        Constant: long int, 65535L
                  Constant: int, 8
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
        If: 
          BinaryOp: <
            ID: outcnt
            Constant: unsigned int, 16382U
          Compound: 
            Assignment: =
              ID: tmp___28
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___28
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: >>
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: bytes_in
                    Constant: int, 16
                  Constant: unsigned long int, 255UL
            Assignment: =
              ID: tmp___29
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___29
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: >>
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          ID: bytes_in
                        Constant: int, 16
                  Constant: int, 8
          Compound: 
            Assignment: =
              ID: tmp___30
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___30
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: &
                  BinaryOp: >>
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: bytes_in
                    Constant: int, 16
                  Constant: unsigned long int, 255UL
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
            Assignment: =
              ID: tmp___31
              ID: outcnt
            UnaryOp: p++
              ID: outcnt
            Assignment: =
              ArrayRef: 
                ID: outbuf
                ID: tmp___31
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['uch']
                BinaryOp: >>
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ush']
                      BinaryOp: >>
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          ID: bytes_in
                        Constant: int, 16
                  Constant: int, 8
            If: 
              BinaryOp: ==
                ID: outcnt
                Constant: unsigned int, 16384U
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: flush_outbuf
        Compound: 
          Assignment: =
            ID: header_bytes
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['long']
              BinaryOp: +
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'long']
                  ID: header_bytes
                BinaryOp: *
                  Constant: unsigned long int, 2UL
                  UnaryOp: sizeof
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['long']
          FuncCall: 
            ID: flush_outbuf
        Return: 
          Constant: int, 0
  FuncDef: 
    Decl: file_read, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: buf, [], [], [], []
            PtrDecl: []
              TypeDecl: buf, [], None
                IdentifierType: ['char']
          Decl: size, [], [], [], []
            TypeDecl: size, [], None
              IdentifierType: ['unsigned', 'int']
        TypeDecl: file_read, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['unsigned', 'int']
      Compound: 
        Compound: 
          Assignment: =
            ID: len
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'int']
              FuncCall: 
                ID: read
                ExprList: 
                  ID: ifd
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    ID: buf
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['size_t']
                    ID: size
        If: 
          BinaryOp: ==
            ID: len
            Constant: unsigned int, 4294967295U
          Compound: 
            Return: 
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['int']
                ID: len
          Compound: 
            If: 
              BinaryOp: ==
                ID: len
                Constant: unsigned int, 0U
              Compound: 
                Return: 
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ID: len
        Compound: 
          Assignment: =
            ID: crc___0
            FuncCall: 
              ID: updcrc
              ExprList: 
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                  ID: buf
                ID: len
          Assignment: =
            ID: bytes_in
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['long']
              BinaryOp: +
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ulg']
                  ID: bytes_in
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['ulg']
                  ID: len
        Return: 
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['int']
            ID: len
  Decl: license_msg, [], [], ['static'], []
    ArrayDecl: []
      PtrDecl: []
        TypeDecl: license_msg, [], None
          IdentifierType: ['char']
      Constant: int, 15
    InitList: 
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   Copyright (C) 1992-1993 Jean-loup Gailly"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   This program is free software; you can redistribute it and/or modify"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   it under the terms of the GNU General Public License as published by"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   the Free Software Foundation; either version 2, or (at your option)"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   any later version."
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ""
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   This program is distributed in the hope that it will be useful,"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   but WITHOUT ANY WARRANTY; without even the implied warranty of"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   GNU General Public License for more details."
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ""
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   You should have received a copy of the GNU General Public License"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   along with this program; if not, write to the Free Software"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA."
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: int, 0
  Decl: stdin, [], [], ['extern'], []
    PtrDecl: []
      TypeDecl: stdin, [], None
        Struct: _IO_FILE
  Decl: stdout, [], [], ['extern'], []
    PtrDecl: []
      TypeDecl: stdout, [], None
        Struct: _IO_FILE
  Decl: fflush, [], [], ['extern'], []
    FuncDecl: 
      ParamList: 
        Decl: __stream, [], [], [], []
          PtrDecl: []
            TypeDecl: __stream, [], None
              IdentifierType: ['FILE']
      TypeDecl: fflush, [], None
        IdentifierType: ['int']
  Decl: ifile_size, [], [], [], []
    TypeDecl: ifile_size, [], None
      IdentifierType: ['long']
  Decl: verbose, [], [], [], []
    TypeDecl: verbose, [], None
      IdentifierType: ['int']
  Decl: optarg, [], [], ['extern'], []
    PtrDecl: []
      TypeDecl: optarg, [], None
        IdentifierType: ['char']
  Decl: optind, [], [], ['extern'], []
    TypeDecl: optind, [], None
      IdentifierType: ['int']
  Decl: getopt_long, [], [], ['extern'], []
    FuncDecl: 
      ParamList: 
        Decl: argc, [], [], [], []
          TypeDecl: argc, [], None
            IdentifierType: ['int']
        Decl: argv, [], [], [], []
          PtrDecl: []
            PtrDecl: ['const']
              TypeDecl: argv, [], None
                IdentifierType: ['char']
        Decl: shortopts, ['const'], [], [], []
          PtrDecl: []
            TypeDecl: shortopts, ['const'], None
              IdentifierType: ['char']
        Decl: longopts, ['const'], [], [], []
          PtrDecl: []
            TypeDecl: longopts, ['const'], None
              Struct: option
        Decl: longind, [], [], [], []
          PtrDecl: []
            TypeDecl: longind, [], None
              IdentifierType: ['int']
      TypeDecl: getopt_long, [], None
        IdentifierType: ['int']
  Decl: ascii, [], [], [], []
    TypeDecl: ascii, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: to_stdout, [], [], [], []
    TypeDecl: to_stdout, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: decompress, [], [], [], []
    TypeDecl: decompress, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: force, [], [], [], []
    TypeDecl: force, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: no_name, [], [], [], []
    TypeDecl: no_name, [], None
      IdentifierType: ['int']
    UnaryOp: -
      Constant: int, 1
  Decl: no_time, [], [], [], []
    TypeDecl: no_time, [], None
      IdentifierType: ['int']
    UnaryOp: -
      Constant: int, 1
  Decl: recursive, [], [], [], []
    TypeDecl: recursive, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: list, [], [], [], []
    TypeDecl: list, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: verbose, [], [], [], []
    TypeDecl: verbose, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: quiet, [], [], [], []
    TypeDecl: quiet, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: do_lzw, [], [], [], []
    TypeDecl: do_lzw, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: test, [], [], [], []
    TypeDecl: test, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: foreground, [], [], [], []
    TypeDecl: foreground, [], None
      IdentifierType: ['int']
  Decl: maxbits, [], [], [], []
    TypeDecl: maxbits, [], None
      IdentifierType: ['int']
    Constant: int, 16
  Decl: method, [], [], [], []
    TypeDecl: method, [], None
      IdentifierType: ['int']
    Constant: int, 8
  Decl: level, [], [], [], []
    TypeDecl: level, [], None
      IdentifierType: ['int']
    Constant: int, 6
  Decl: exit_code, [], [], [], []
    TypeDecl: exit_code, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: last_member, [], [], [], []
    TypeDecl: last_member, [], None
      IdentifierType: ['int']
  Decl: part_nb, [], [], [], []
    TypeDecl: part_nb, [], None
      IdentifierType: ['int']
  Decl: env, [], [], [], []
    PtrDecl: []
      TypeDecl: env, [], None
        IdentifierType: ['char']
  Decl: args, [], [], [], []
    PtrDecl: []
      PtrDecl: []
        TypeDecl: args, [], None
          IdentifierType: ['char']
    Cast: 
      Typename: None, [], None
        PtrDecl: []
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['void']
        Constant: int, 0
  Decl: z_suffix, [], [], [], []
    ArrayDecl: []
      TypeDecl: z_suffix, [], None
        IdentifierType: ['char']
      Constant: int, 31
  Decl: z_len, [], [], [], []
    TypeDecl: z_len, [], None
      IdentifierType: ['int']
  Decl: total_in, [], [], [], []
    TypeDecl: total_in, [], None
      IdentifierType: ['long']
    Constant: long int, 0L
  Decl: total_out, [], [], [], []
    TypeDecl: total_out, [], None
      IdentifierType: ['long']
    Constant: long int, 0L
  Decl: remove_ofname, [], [], [], []
    TypeDecl: remove_ofname, [], None
      IdentifierType: ['int']
    Constant: int, 0
  Decl: istat, [], [], [], []
    TypeDecl: istat, [], None
      Struct: stat
  Decl: longopts, [], [], [], []
    ArrayDecl: []
      TypeDecl: longopts, [], None
        Struct: option
      Constant: int, 24
    InitList: 
      InitList: 
        Constant: string, "ascii"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'a'
      InitList: 
        Constant: string, "to-stdout"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'c'
      InitList: 
        Constant: string, "stdout"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'c'
      InitList: 
        Constant: string, "decompress"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'd'
      InitList: 
        Constant: string, "uncompress"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'd'
      InitList: 
        Constant: string, "force"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'f'
      InitList: 
        Constant: string, "help"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'h'
      InitList: 
        Constant: string, "list"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'l'
      InitList: 
        Constant: string, "license"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'L'
      InitList: 
        Constant: string, "no-name"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'n'
      InitList: 
        Constant: string, "name"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'N'
      InitList: 
        Constant: string, "quiet"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'q'
      InitList: 
        Constant: string, "silent"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'q'
      InitList: 
        Constant: string, "recursive"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'r'
      InitList: 
        Constant: string, "suffix"
        Constant: int, 1
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'S'
      InitList: 
        Constant: string, "test"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 't'
      InitList: 
        Constant: string, "no-time"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'T'
      InitList: 
        Constant: string, "verbose"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'v'
      InitList: 
        Constant: string, "version"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'V'
      InitList: 
        Constant: string, "fast"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, '1'
      InitList: 
        Constant: string, "best"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, '9'
      InitList: 
        Constant: string, "lzw"
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'Z'
      InitList: 
        Constant: string, "bits"
        Constant: int, 1
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: char, 'b'
      InitList: 
        Cast: 
          Typename: None, ['const'], None
            PtrDecl: []
              TypeDecl: None, ['const'], None
                IdentifierType: ['char']
          Constant: int, 0
        Constant: int, 0
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['int']
          Constant: int, 0
        Constant: int, 0
  Decl: usage, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: usage, [], None
        IdentifierType: ['void']
  Decl: help, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: help, [], None
        IdentifierType: ['void']
  Decl: license, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: license, [], None
        IdentifierType: ['void']
  Decl: version, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: version, [], None
        IdentifierType: ['void']
  Decl: treat_stdin, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: treat_stdin, [], None
        IdentifierType: ['void']
  Decl: treat_file, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: iname, [], [], [], []
          PtrDecl: []
            TypeDecl: iname, [], None
              IdentifierType: ['char']
      TypeDecl: treat_file, [], None
        IdentifierType: ['void']
  Decl: create_outfile, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: create_outfile, [], None
        IdentifierType: ['int']
  Decl: do_stat, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: name, [], [], [], []
          PtrDecl: []
            TypeDecl: name, [], None
              IdentifierType: ['char']
        Decl: sbuf, [], [], [], []
          PtrDecl: []
            TypeDecl: sbuf, [], None
              Struct: stat
      TypeDecl: do_stat, [], None
        IdentifierType: ['int']
  Decl: get_suffix, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: name, [], [], [], []
          PtrDecl: []
            TypeDecl: name, [], None
              IdentifierType: ['char']
      PtrDecl: []
        TypeDecl: get_suffix, [], None
          IdentifierType: ['char']
  Decl: get_istat, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: iname, [], [], [], []
          PtrDecl: []
            TypeDecl: iname, [], None
              IdentifierType: ['char']
        Decl: sbuf, [], [], [], []
          PtrDecl: []
            TypeDecl: sbuf, [], None
              Struct: stat
      TypeDecl: get_istat, [], None
        IdentifierType: ['int']
  Decl: make_ofname, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: make_ofname, [], None
        IdentifierType: ['int']
  Decl: same_file, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: stat1, [], [], [], []
          PtrDecl: []
            TypeDecl: stat1, [], None
              Struct: stat
        Decl: stat2, [], [], [], []
          PtrDecl: []
            TypeDecl: stat2, [], None
              Struct: stat
      TypeDecl: same_file, [], None
        IdentifierType: ['int']
  Decl: name_too_long, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: name, [], [], [], []
          PtrDecl: []
            TypeDecl: name, [], None
              IdentifierType: ['char']
        Decl: statb, [], [], [], []
          PtrDecl: []
            TypeDecl: statb, [], None
              Struct: stat
      TypeDecl: name_too_long, [], None
        IdentifierType: ['int']
  Decl: shorten_name, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: name, [], [], [], []
          PtrDecl: []
            TypeDecl: name, [], None
              IdentifierType: ['char']
      TypeDecl: shorten_name, [], None
        IdentifierType: ['void']
  Decl: get_method, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: in, [], [], [], []
          TypeDecl: in, [], None
            IdentifierType: ['int']
      TypeDecl: get_method, [], None
        IdentifierType: ['int']
  Decl: do_list, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: ifd___0, [], [], [], []
          TypeDecl: ifd___0, [], None
            IdentifierType: ['int']
        Decl: method___0, [], [], [], []
          TypeDecl: method___0, [], None
            IdentifierType: ['int']
      TypeDecl: do_list, [], None
        IdentifierType: ['void']
  Decl: check_ofname, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Typename: None, [], None
          TypeDecl: None, [], None
            IdentifierType: ['void']
      TypeDecl: check_ofname, [], None
        IdentifierType: ['int']
  Decl: copy_stat, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: ifstat, [], [], [], []
          PtrDecl: []
            TypeDecl: ifstat, [], None
              Struct: stat
      TypeDecl: copy_stat, [], None
        IdentifierType: ['void']
  Decl: do_exit, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: exitcode, [], [], [], []
          TypeDecl: exitcode, [], None
            IdentifierType: ['int']
      TypeDecl: do_exit, [], None
        IdentifierType: ['void']
  Decl: main, [], [], [], []
    FuncDecl: 
      ParamList: 
        Decl: argc, [], [], [], []
          TypeDecl: argc, [], None
            IdentifierType: ['int']
        Decl: argv, [], [], [], []
          PtrDecl: []
            PtrDecl: []
              TypeDecl: argv, [], None
                IdentifierType: ['char']
      TypeDecl: main, [], None
        IdentifierType: ['int']
  Decl: work, [], [], [], []
    PtrDecl: []
      FuncDecl: 
        ParamList: 
          Decl: infile, [], [], [], []
            TypeDecl: infile, [], None
              IdentifierType: ['int']
          Decl: outfile, [], [], [], []
            TypeDecl: outfile, [], None
              IdentifierType: ['int']
        TypeDecl: work, [], None
          IdentifierType: ['int']
    UnaryOp: &
      ID: zip
  Decl: treat_dir, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: dir, [], [], [], []
          PtrDecl: []
            TypeDecl: dir, [], None
              IdentifierType: ['char']
      TypeDecl: treat_dir, [], None
        IdentifierType: ['void']
  Decl: reset_times, [], [], ['static'], []
    FuncDecl: 
      ParamList: 
        Decl: name, [], [], [], []
          PtrDecl: []
            TypeDecl: name, [], None
              IdentifierType: ['char']
        Decl: statb, [], [], [], []
          PtrDecl: []
            TypeDecl: statb, [], None
              Struct: stat
      TypeDecl: reset_times, [], None
        IdentifierType: ['void']
  FuncDef: 
    Decl: usage, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: usage, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        Compound: 
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "usage: %s [-%scdfhlLnN%stvV19] [-S suffix] [file ...]\n"
              ID: progname
              Constant: string, ""
              Constant: string, "r"
        Return: 
  Decl: help_msg, [], [], ['static'], []
    ArrayDecl: []
      PtrDecl: []
        TypeDecl: help_msg, [], None
          IdentifierType: ['char']
      Constant: int, 18
    InitList: 
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -c --stdout      write on standard output, keep original files unchanged"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -d --decompress  decompress"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -f --force       force overwrite of output file and compress links"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -h --help        give this help"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -l --list        list compressed file contents"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -L --license     display software license"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -n --no-name     do not save or restore the original name and time stamp"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -N --name        save or restore the original name and time stamp"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -q --quiet       suppress all warnings"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -r --recursive   operate recursively on directories"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -S .suf  --suffix .suf     use suffix .suf on compressed files"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -t --test        test compressed file integrity"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -v --verbose     verbose mode"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -V --version     display version number"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -1 --fast        compress faster"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " -9 --best        compress better"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, " file...          files to (de)compress. If none given, use standard input."
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: int, 0
  FuncDef: 
    Decl: help, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: help, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: p, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: p, [], None
              IdentifierType: ['char']
      Decl: tmp, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: tmp, [], None
              IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: p
            ID: help_msg
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "%s %s (%s)\n"
              ID: progname
              Constant: string, "1.2.4"
              Constant: string, "18 Aug 93"
          FuncCall: 
            ID: usage
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  UnaryOp: *
                    ID: p
                Compound: 
                  Goto: while_break
              Compound: 
                Assignment: =
                  ID: tmp
                  ID: p
                UnaryOp: p++
                  ID: p
                FuncCall: 
                  ID: fprintf
                  ExprList: 
                    Cast: 
                      Typename: None, [], None
                        PtrDecl: []
                          TypeDecl: None, [], None
                            IdentifierType: ['FILE']
                      ID: stderr
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      Constant: string, "%s\n"
                    UnaryOp: *
                      ID: tmp
          Label: while_break
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: license, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: license, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: p, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: p, [], None
              IdentifierType: ['char']
      Decl: tmp, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: tmp, [], None
              IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: p
            ID: license_msg
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "%s %s (%s)\n"
              ID: progname
              Constant: string, "1.2.4"
              Constant: string, "18 Aug 93"
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              If: 
                UnaryOp: !
                  UnaryOp: *
                    ID: p
                Compound: 
                  Goto: while_break
              Compound: 
                Assignment: =
                  ID: tmp
                  ID: p
                UnaryOp: p++
                  ID: p
                FuncCall: 
                  ID: fprintf
                  ExprList: 
                    Cast: 
                      Typename: None, [], None
                        PtrDecl: []
                          TypeDecl: None, [], None
                            IdentifierType: ['FILE']
                      ID: stderr
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      Constant: string, "%s\n"
                    UnaryOp: *
                      ID: tmp
          Label: while_break
            EmptyStatement: 
        Return: 
  FuncDef: 
    Decl: version, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: version, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        Compound: 
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "%s %s (%s)\n"
              ID: progname
              Constant: string, "1.2.4"
              Constant: string, "18 Aug 93"
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "Compilation options:\n%s %s "
              Constant: string, "DIRENT"
              Constant: string, "UTIME"
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "STDC_HEADERS "
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "HAVE_UNISTD_H "
          FuncCall: 
            ID: fprintf
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['FILE']
                ID: stderr
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "\n"
        Return: 
  FuncDef: 
    Decl: main, [], [], [], []
      FuncDecl: 
        ParamList: 
          Decl: argc, [], [], [], []
            TypeDecl: argc, [], None
              IdentifierType: ['int']
          Decl: argv, [], [], [], []
            PtrDecl: []
              PtrDecl: []
                TypeDecl: argv, [], None
                  IdentifierType: ['char']
        TypeDecl: main, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: file_count, [], [], [], []
        TypeDecl: file_count, [], None
          IdentifierType: ['int']
      Decl: proglen, [], [], [], []
        TypeDecl: proglen, [], None
          IdentifierType: ['int']
      Decl: optc, [], [], [], []
        TypeDecl: optc, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        PtrDecl: []
          FuncDecl: 
            ParamList: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
            TypeDecl: tmp___0, [], None
              IdentifierType: ['void']
      Decl: tmp___1, [], [], [], []
        PtrDecl: []
          FuncDecl: 
            ParamList: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
            TypeDecl: tmp___1, [], None
              IdentifierType: ['void']
      Decl: tmp___2, [], [], [], []
        PtrDecl: []
          FuncDecl: 
            ParamList: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
            TypeDecl: tmp___2, [], None
              IdentifierType: ['void']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp19, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp19, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp20, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp20, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: progname
            FuncCall: 
              ID: basename
              ExprList: 
                UnaryOp: *
                  BinaryOp: +
                    ID: argv
                    Constant: int, 0
          Assignment: =
            ID: proglen
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              FuncCall: 
                ID: strlen
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: progname
        If: 
          BinaryOp: >
            ID: proglen
            Constant: int, 4
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp
                FuncCall: 
                  ID: strcmp
                  ExprList: 
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      BinaryOp: -
                        BinaryOp: +
                          ID: progname
                          ID: proglen
                        Constant: int, 4
                    Constant: string, ".exe"
            If: 
              BinaryOp: ==
                ID: tmp
                Constant: int, 0
              Compound: 
                Assignment: =
                  UnaryOp: *
                    BinaryOp: +
                      ID: progname
                      BinaryOp: -
                        ID: proglen
                        Constant: int, 4
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
                    Constant: char, '\000'
        Compound: 
          Assignment: =
            ID: env
            FuncCall: 
              ID: add_envopt
              ExprList: 
                UnaryOp: &
                  ID: argc
                UnaryOp: &
                  ID: argv
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
                  Constant: string, "GZIP"
        If: 
          BinaryOp: !=
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: env
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Assignment: =
              ID: args
              ID: argv
        Compound: 
          Assignment: =
            ID: tmp___0
            FuncCall: 
              ID: signal
              ExprList: 
                Constant: int, 2
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      FuncDecl: 
                        ParamList: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                  Constant: int, 1
          Assignment: =
            ID: foreground
            BinaryOp: !=
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'long']
                ID: tmp___0
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['unsigned', 'long']
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      FuncDecl: 
                        ParamList: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                  Constant: int, 1
        If: 
          ID: foreground
          Compound: 
            Compound: 
              FuncCall: 
                ID: signal
                ExprList: 
                  Constant: int, 2
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        FuncDecl: 
                          ParamList: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                          TypeDecl: None, [], None
                            IdentifierType: ['void']
                    UnaryOp: &
                      ID: abort_gzip
        Compound: 
          Assignment: =
            ID: tmp___1
            FuncCall: 
              ID: signal
              ExprList: 
                Constant: int, 15
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      FuncDecl: 
                        ParamList: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                  Constant: int, 1
        If: 
          BinaryOp: !=
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: tmp___1
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    FuncDecl: 
                      ParamList: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                      TypeDecl: None, [], None
                        IdentifierType: ['void']
                Constant: int, 1
          Compound: 
            Compound: 
              FuncCall: 
                ID: signal
                ExprList: 
                  Constant: int, 15
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        FuncDecl: 
                          ParamList: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                          TypeDecl: None, [], None
                            IdentifierType: ['void']
                    UnaryOp: &
                      ID: abort_gzip
        Compound: 
          Assignment: =
            ID: tmp___2
            FuncCall: 
              ID: signal
              ExprList: 
                Constant: int, 1
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      FuncDecl: 
                        ParamList: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                  Constant: int, 1
        If: 
          BinaryOp: !=
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: tmp___2
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    FuncDecl: 
                      ParamList: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                      TypeDecl: None, [], None
                        IdentifierType: ['void']
                Constant: int, 1
          Compound: 
            Compound: 
              FuncCall: 
                ID: signal
                ExprList: 
                  Constant: int, 1
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        FuncDecl: 
                          ParamList: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                          TypeDecl: None, [], None
                            IdentifierType: ['void']
                    UnaryOp: &
                      ID: abort_gzip
        Compound: 
          Assignment: =
            ID: tmp___5
            FuncCall: 
              ID: strncmp
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: progname
                Constant: string, "un"
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['size_t']
                  Constant: int, 2
        If: 
          BinaryOp: ==
            ID: tmp___5
            Constant: int, 0
          Compound: 
            Assignment: =
              ID: decompress
              Constant: int, 1
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___6
                FuncCall: 
                  ID: strncmp
                  ExprList: 
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      ID: progname
                    Constant: string, "gun"
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['size_t']
                      Constant: int, 3
            If: 
              BinaryOp: ==
                ID: tmp___6
                Constant: int, 0
              Compound: 
                Assignment: =
                  ID: decompress
                  Constant: int, 1
              Compound: 
                Compound: 
                  Assignment: =
                    ID: tmp___3
                    FuncCall: 
                      ID: strcmp
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          BinaryOp: +
                            ID: progname
                            Constant: int, 1
                        Constant: string, "cat"
                If: 
                  BinaryOp: ==
                    ID: tmp___3
                    Constant: int, 0
                  Compound: 
                    Assignment: =
                      ID: to_stdout
                      Constant: int, 1
                    Assignment: =
                      ID: decompress
                      ID: to_stdout
                  Compound: 
                    Compound: 
                      Assignment: =
                        ID: tmp___4
                        FuncCall: 
                          ID: strcmp
                          ExprList: 
                            Cast: 
                              Typename: None, ['const'], None
                                PtrDecl: []
                                  TypeDecl: None, ['const'], None
                                    IdentifierType: ['char']
                              ID: progname
                            Constant: string, "gzcat"
                    If: 
                      BinaryOp: ==
                        ID: tmp___4
                        Constant: int, 0
                      Compound: 
                        Assignment: =
                          ID: to_stdout
                          Constant: int, 1
                        Assignment: =
                          ID: decompress
                          ID: to_stdout
        Compound: 
          FuncCall: 
            ID: strncpy
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                ID: z_suffix
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, ".gz"
              BinaryOp: -
                UnaryOp: sizeof
                  ID: z_suffix
                Constant: unsigned long int, 1UL
          Assignment: =
            ID: z_len
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              FuncCall: 
                ID: strlen
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: z_suffix
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: optc
                  FuncCall: 
                    ID: getopt_long
                    ExprList: 
                      ID: argc
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            PtrDecl: ['const']
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                        ID: argv
                      Constant: string, "ab:cdfhH?lLmMnNqrS:tvVZ123456789"
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              Struct: option
                        ID: longopts
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                        Constant: int, 0
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    ID: optc
                    UnaryOp: -
                      Constant: int, 1
                Compound: 
                  Goto: while_break
              Compound: 
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 97
                  Compound: 
                    Goto: case_97
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 98
                  Compound: 
                    Goto: case_98
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 99
                  Compound: 
                    Goto: case_99
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 100
                  Compound: 
                    Goto: case_100
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 102
                  Compound: 
                    Goto: case_102
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 104
                  Compound: 
                    Goto: case_104
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 72
                  Compound: 
                    Goto: case_104
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 63
                  Compound: 
                    Goto: case_104
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 108
                  Compound: 
                    Goto: case_108
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 76
                  Compound: 
                    Goto: case_76
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 109
                  Compound: 
                    Goto: case_109
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 77
                  Compound: 
                    Goto: case_77
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 110
                  Compound: 
                    Goto: case_110
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 78
                  Compound: 
                    Goto: case_78
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 113
                  Compound: 
                    Goto: case_113
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 114
                  Compound: 
                    Goto: case_114
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 83
                  Compound: 
                    Goto: case_83
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 116
                  Compound: 
                    Goto: case_116
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 118
                  Compound: 
                    Goto: case_118
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 86
                  Compound: 
                    Goto: case_86
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 90
                  Compound: 
                    Goto: case_90
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 49
                  Compound: 
                    Goto: case_49
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 50
                  Compound: 
                    Goto: case_49
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 51
                  Compound: 
                    Goto: case_49
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 52
                  Compound: 
                    Goto: case_49
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 53
                  Compound: 
                    Goto: case_49
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 54
                  Compound: 
                    Goto: case_49
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 55
                  Compound: 
                    Goto: case_49
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 56
                  Compound: 
                    Goto: case_49
                If: 
                  BinaryOp: ==
                    ID: optc
                    Constant: int, 57
                  Compound: 
                    Goto: case_49
                Goto: switch_default
                Label: case_97
                  Assignment: =
                    ID: ascii
                    Constant: int, 1
                Goto: switch_break
                Label: case_98
                  Compound: 
                    Assignment: =
                      ID: maxbits
                      FuncCall: 
                        ID: atoi
                        ExprList: 
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            ID: optarg
                Goto: switch_break
                Label: case_99
                  Assignment: =
                    ID: to_stdout
                    Constant: int, 1
                Goto: switch_break
                Label: case_100
                  Assignment: =
                    ID: decompress
                    Constant: int, 1
                Goto: switch_break
                Label: case_102
                  UnaryOp: p++
                    ID: force
                Goto: switch_break
                Label: case_104
                  Label: case_72
                    Label: case_63
                      Compound: 
                        FuncCall: 
                          ID: help
                        FuncCall: 
                          ID: do_exit
                          ExprList: 
                            Constant: int, 0
                Goto: switch_break
                Label: case_108
                  Assignment: =
                    ID: to_stdout
                    Constant: int, 1
                Assignment: =
                  ID: decompress
                  ID: to_stdout
                Assignment: =
                  ID: list
                  ID: decompress
                Goto: switch_break
                Label: case_76
                  Compound: 
                    FuncCall: 
                      ID: license
                    FuncCall: 
                      ID: do_exit
                      ExprList: 
                        Constant: int, 0
                Goto: switch_break
                Label: case_109
                  Assignment: =
                    ID: no_time
                    Constant: int, 1
                Goto: switch_break
                Label: case_77
                  Assignment: =
                    ID: no_time
                    Constant: int, 0
                Goto: switch_break
                Label: case_110
                  Assignment: =
                    ID: no_time
                    Constant: int, 1
                Assignment: =
                  ID: no_name
                  ID: no_time
                Goto: switch_break
                Label: case_78
                  Assignment: =
                    ID: no_time
                    Constant: int, 0
                Assignment: =
                  ID: no_name
                  ID: no_time
                Goto: switch_break
                Label: case_113
                  Assignment: =
                    ID: quiet
                    Constant: int, 1
                Assignment: =
                  ID: verbose
                  Constant: int, 0
                Goto: switch_break
                Label: case_114
                  Assignment: =
                    ID: recursive
                    Constant: int, 1
                Goto: switch_break
                Label: case_83
                  Compound: 
                    Assignment: =
                      ID: z_len
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        FuncCall: 
                          ID: strlen
                          ExprList: 
                            Cast: 
                              Typename: None, ['const'], None
                                PtrDecl: []
                                  TypeDecl: None, ['const'], None
                                    IdentifierType: ['char']
                              ID: optarg
                    FuncCall: 
                      ID: strcpy
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                          ID: z_suffix
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: optarg
                Goto: switch_break
                Label: case_116
                  Assignment: =
                    ID: to_stdout
                    Constant: int, 1
                Assignment: =
                  ID: decompress
                  ID: to_stdout
                Assignment: =
                  ID: test
                  ID: decompress
                Goto: switch_break
                Label: case_118
                  UnaryOp: p++
                    ID: verbose
                Assignment: =
                  ID: quiet
                  Constant: int, 0
                Goto: switch_break
                Label: case_86
                  Compound: 
                    FuncCall: 
                      ID: version
                    FuncCall: 
                      ID: do_exit
                      ExprList: 
                        Constant: int, 0
                Goto: switch_break
                Label: case_90
                  Compound: 
                    FuncCall: 
                      ID: fprintf
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['FILE']
                          ID: stderr
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          Constant: string, "%s: -Z not supported in this version\n"
                        ID: progname
                    FuncCall: 
                      ID: usage
                    FuncCall: 
                      ID: do_exit
                      ExprList: 
                        Constant: int, 1
                Goto: switch_break
                Label: case_49
                  Label: case_50
                    Label: case_51
                      Label: case_52
                        Label: case_53
                          Label: case_54
                            Label: case_55
                              Label: case_56
                                Label: case_57
                                  Assignment: =
                                    ID: level
                                    BinaryOp: -
                                      ID: optc
                                      Constant: int, 48
                Goto: switch_break
                Label: switch_default
                  Compound: 
                    FuncCall: 
                      ID: usage
                    FuncCall: 
                      ID: do_exit
                      ExprList: 
                        Constant: int, 1
                Label: switch_break
                  EmptyStatement: 
          Label: while_break
            EmptyStatement: 
        If: 
          BinaryOp: <
            ID: no_time
            Constant: int, 0
          Compound: 
            Assignment: =
              ID: no_time
              ID: decompress
        If: 
          BinaryOp: <
            ID: no_name
            Constant: int, 0
          Compound: 
            Assignment: =
              ID: no_name
              ID: decompress
        Assignment: =
          ID: file_count
          BinaryOp: -
            ID: argc
            ID: optind
        If: 
          ID: ascii
          Compound: 
            If: 
              UnaryOp: !
                ID: quiet
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "%s: option --ascii ignored on this system\n"
                      ID: progname
        If: 
          BinaryOp: ==
            ID: z_len
            Constant: int, 0
          Compound: 
            If: 
              UnaryOp: !
                ID: decompress
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "%s: incorrect suffix \'%s\'\n"
                      ID: progname
                      ID: optarg
                  FuncCall: 
                    ID: do_exit
                    ExprList: 
                      Constant: int, 1
              Compound: 
                Goto: _L
          Compound: 
            Label: _L
              If: 
                BinaryOp: >
                  ID: z_len
                  Constant: int, 30
                Compound: 
                  Compound: 
                    FuncCall: 
                      ID: fprintf
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['FILE']
                          ID: stderr
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          Constant: string, "%s: incorrect suffix \'%s\'\n"
                        ID: progname
                        ID: optarg
                    FuncCall: 
                      ID: do_exit
                      ExprList: 
                        Constant: int, 1
        If: 
          ID: do_lzw
          Compound: 
            If: 
              UnaryOp: !
                ID: decompress
              Compound: 
                Assignment: =
                  ID: work
                  UnaryOp: &
                    ID: lzw
        If: 
          BinaryOp: !=
            ID: file_count
            Constant: int, 0
          Compound: 
            If: 
              ID: to_stdout
              Compound: 
                If: 
                  UnaryOp: !
                    ID: test
                  Compound: 
                    If: 
                      UnaryOp: !
                        ID: list
                      Compound: 
                        If: 
                          UnaryOp: !
                            ID: decompress
                          Compound: 
                            Assignment: =
                              ID: tmp___7
                              Constant: int, 1
                          Compound: 
                            If: 
                              UnaryOp: !
                                ID: ascii
                              Compound: 
                                Assignment: =
                                  ID: tmp___7
                                  Constant: int, 1
                              Compound: 
                                Assignment: =
                                  ID: tmp___7
                                  Constant: int, 0
                      Compound: 
                        Assignment: =
                          ID: tmp___7
                          Constant: int, 0
                  Compound: 
                    Assignment: =
                      ID: tmp___7
                      Constant: int, 0
              Compound: 
                Assignment: =
                  ID: tmp___7
                  Constant: int, 0
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___0
                    EmptyStatement: 
                  If: 
                    UnaryOp: !
                      BinaryOp: <
                        ID: optind
                        ID: argc
                    Compound: 
                      Goto: while_break___0
                  Compound: 
                    Assignment: =
                      ID: tmp___8
                      ID: optind
                    UnaryOp: p++
                      ID: optind
                    FuncCall: 
                      ID: treat_file
                      ExprList: 
                        UnaryOp: *
                          BinaryOp: +
                            ID: argv
                            ID: tmp___8
              Label: while_break___0
                EmptyStatement: 
          Compound: 
            Compound: 
              FuncCall: 
                ID: treat_stdin
        If: 
          ID: list
          Compound: 
            If: 
              UnaryOp: !
                ID: quiet
              Compound: 
                If: 
                  BinaryOp: >
                    ID: file_count
                    Constant: int, 1
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: do_list
                        ExprList: 
                          UnaryOp: -
                            Constant: int, 1
                          UnaryOp: -
                            Constant: int, 1
        Compound: 
          FuncCall: 
            ID: do_exit
            ExprList: 
              ID: exit_code
        Return: 
          ID: exit_code
  FuncDef: 
    Decl: treat_stdin, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: treat_stdin, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: tmp, ['const'], [], [], []
        PtrDecl: []
          TypeDecl: tmp, ['const'], None
            IdentifierType: ['char']
      Decl: tmp___0, ['const'], [], [], []
        PtrDecl: []
          TypeDecl: tmp___0, ['const'], None
            IdentifierType: ['char']
      Decl: tmp___1, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___1, [], None
            Struct: _IO_FILE
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['int']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['int']
      Decl: tmp___10, [], [], [], []
        TypeDecl: tmp___10, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp13, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp13, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp14, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp14, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp15, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp15, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp16, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp16, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp17, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp17, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp18, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp18, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp19, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp19, [], None
            IdentifierType: ['char']
      Compound: 
        If: 
          UnaryOp: !
            ID: force
          Compound: 
            If: 
              UnaryOp: !
                ID: list
              Compound: 
                If: 
                  ID: decompress
                  Compound: 
                    Assignment: =
                      ID: tmp___1
                      ID: stdin
                  Compound: 
                    Assignment: =
                      ID: tmp___1
                      ID: stdout
                Compound: 
                  Assignment: =
                    ID: tmp___2
                    FuncCall: 
                      ID: fileno
                      ExprList: 
                        ID: tmp___1
                  Assignment: =
                    ID: tmp___3
                    FuncCall: 
                      ID: isatty
                      ExprList: 
                        ID: tmp___2
                If: 
                  ID: tmp___3
                  Compound: 
                    If: 
                      ID: decompress
                      Compound: 
                        Assignment: =
                          ID: tmp
                          Constant: string, "de"
                      Compound: 
                        Assignment: =
                          ID: tmp
                          Constant: string, ""
                    If: 
                      ID: decompress
                      Compound: 
                        Assignment: =
                          ID: tmp___0
                          Constant: string, "read from"
                      Compound: 
                        Assignment: =
                          ID: tmp___0
                          Constant: string, "written to"
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "%s: compressed data not %s a terminal. Use -f to force %scompression.\n"
                          ID: progname
                          ID: tmp___0
                          ID: tmp
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "For help, type: %s -h\n"
                          ID: progname
                      FuncCall: 
                        ID: do_exit
                        ExprList: 
                          Constant: int, 1
        If: 
          ID: decompress
          Compound: 
            Assignment: =
              ID: tmp___4
              Constant: int, 1
          Compound: 
            If: 
              UnaryOp: !
                ID: ascii
              Compound: 
                Assignment: =
                  ID: tmp___4
                  Constant: int, 1
              Compound: 
                Assignment: =
                  ID: tmp___4
                  Constant: int, 0
        If: 
          UnaryOp: !
            ID: test
          Compound: 
            If: 
              UnaryOp: !
                ID: list
              Compound: 
                If: 
                  UnaryOp: !
                    ID: decompress
                  Compound: 
                    Assignment: =
                      ID: tmp___5
                      Constant: int, 1
                  Compound: 
                    If: 
                      UnaryOp: !
                        ID: ascii
                      Compound: 
                        Assignment: =
                          ID: tmp___5
                          Constant: int, 1
                      Compound: 
                        Assignment: =
                          ID: tmp___5
                          Constant: int, 0
              Compound: 
                Assignment: =
                  ID: tmp___5
                  Constant: int, 0
          Compound: 
            Assignment: =
              ID: tmp___5
              Constant: int, 0
        Compound: 
          FuncCall: 
            ID: strcpy
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                ID: ifname
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "stdin"
          FuncCall: 
            ID: strcpy
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                ID: ofname
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "stdout"
          Assignment: =
            ID: time_stamp
            Constant: long int, 0L
        If: 
          ID: list
          Compound: 
            Goto: _L
          Compound: 
            If: 
              UnaryOp: !
                ID: no_time
              Compound: 
                Label: _L
                  Compound: 
                    Assignment: =
                      ID: tmp___6
                      FuncCall: 
                        ID: fileno
                        ExprList: 
                          ID: stdin
                    Assignment: =
                      ID: tmp___7
                      FuncCall: 
                        ID: fstat
                        ExprList: 
                          ID: tmp___6
                          UnaryOp: &
                            ID: istat
                If: 
                  BinaryOp: !=
                    ID: tmp___7
                    Constant: int, 0
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: error
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char']
                            Constant: string, "fstat(stdin)"
                Assignment: =
                  ID: time_stamp
                  StructRef: .
                    StructRef: .
                      ID: istat
                      ID: st_mtim
                    ID: tv_sec
        Compound: 
          Assignment: =
            ID: ifile_size
            UnaryOp: -
              Constant: long int, 1L
          FuncCall: 
            ID: clear_bufs
          Assignment: =
            ID: to_stdout
            Constant: int, 1
          Assignment: =
            ID: part_nb
            Constant: int, 0
        If: 
          ID: decompress
          Compound: 
            Compound: 
              Assignment: =
                ID: method
                FuncCall: 
                  ID: get_method
                  ExprList: 
                    ID: ifd
            If: 
              BinaryOp: <
                ID: method
                Constant: int, 0
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: do_exit
                    ExprList: 
                      ID: exit_code
        If: 
          ID: list
          Compound: 
            Compound: 
              FuncCall: 
                ID: do_list
                ExprList: 
                  ID: ifd
                  ID: method
            Return: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: tmp___8
                  FuncCall: 
                    ID: fileno
                    ExprList: 
                      ID: stdout
                Assignment: =
                  ID: tmp___9
                  FuncCall: 
                    ID: fileno
                    ExprList: 
                      ID: stdin
                Assignment: =
                  ID: tmp___10
                  FuncCall: 
                    UnaryOp: *
                      ID: work
                    ExprList: 
                      ID: tmp___9
                      ID: tmp___8
              If: 
                BinaryOp: !=
                  ID: tmp___10
                  Constant: int, 0
                Compound: 
                  Return: 
              If: 
                UnaryOp: !
                  ID: decompress
                Compound: 
                  Goto: while_break
                Compound: 
                  If: 
                    ID: last_member
                    Compound: 
                      Goto: while_break
                    Compound: 
                      If: 
                        BinaryOp: ==
                          ID: inptr
                          ID: insize
                        Compound: 
                          Goto: while_break
              Compound: 
                Assignment: =
                  ID: method
                  FuncCall: 
                    ID: get_method
                    ExprList: 
                      ID: ifd
              If: 
                BinaryOp: <
                  ID: method
                  Constant: int, 0
                Compound: 
                  Return: 
              Assignment: =
                ID: bytes_out
                Constant: long int, 0L
          Label: while_break
            EmptyStatement: 
        If: 
          ID: verbose
          Compound: 
            If: 
              ID: test
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, " OK\n"
              Compound: 
                If: 
                  UnaryOp: !
                    ID: decompress
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: display_ratio
                        ExprList: 
                          BinaryOp: -
                            ID: bytes_in
                            BinaryOp: -
                              ID: bytes_out
                              ID: header_bytes
                          ID: bytes_in
                          ID: stderr
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "\n"
        Return: 
  FuncDef: 
    Decl: treat_file, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: iname, [], [], [], []
            PtrDecl: []
              TypeDecl: iname, [], None
                IdentifierType: ['char']
        TypeDecl: treat_file, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: cflag, [], [], [], []
        TypeDecl: cflag, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: st, [], [], [], []
        TypeDecl: st, [], None
          Struct: stat
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___7, ['const'], [], [], []
        PtrDecl: []
          TypeDecl: tmp___7, ['const'], None
            IdentifierType: ['char']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['size_t']
      Decl: tmp___9, ['const'], [], [], []
        PtrDecl: []
          TypeDecl: tmp___9, ['const'], None
            IdentifierType: ['char']
      Decl: tmp___10, [], [], [], []
        TypeDecl: tmp___10, [], None
          IdentifierType: ['size_t']
      Decl: tmp___11, [], [], [], []
        TypeDecl: tmp___11, [], None
          IdentifierType: ['int']
      Decl: tmp___12, [], [], [], []
        TypeDecl: tmp___12, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp16, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp16, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp17, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp17, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp18, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp18, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp19, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp19, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp20, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp20, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: strcmp
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: iname
                Constant: string, "-"
        If: 
          BinaryOp: ==
            ID: tmp
            Constant: int, 0
          Compound: 
            Compound: 
              Assignment: =
                ID: cflag
                ID: to_stdout
              FuncCall: 
                ID: treat_stdin
              Assignment: =
                ID: to_stdout
                ID: cflag
            Return: 
        Compound: 
          Assignment: =
            ID: tmp___0
            FuncCall: 
              ID: get_istat
              ExprList: 
                ID: iname
                UnaryOp: &
                  ID: istat
        If: 
          BinaryOp: !=
            ID: tmp___0
            Constant: int, 0
          Compound: 
            Return: 
        If: 
          BinaryOp: ==
            BinaryOp: &
              StructRef: .
                ID: istat
                ID: st_mode
              Constant: unsigned int, 61440U
            Constant: unsigned int, 16384U
          Compound: 
            If: 
              ID: recursive
              Compound: 
                Compound: 
                  Assignment: =
                    ID: st
                    ID: istat
                  FuncCall: 
                    ID: treat_dir
                    ExprList: 
                      ID: iname
                  FuncCall: 
                    ID: reset_times
                    ExprList: 
                      ID: iname
                      UnaryOp: &
                        ID: st
              Compound: 
                If: 
                  UnaryOp: !
                    ID: quiet
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "%s: %s is a directory -- ignored\n"
                          ID: progname
                          ID: ifname
                If: 
                  BinaryOp: ==
                    ID: exit_code
                    Constant: int, 0
                  Compound: 
                    Assignment: =
                      ID: exit_code
                      Constant: int, 2
            Return: 
        If: 
          UnaryOp: !
            BinaryOp: ==
              BinaryOp: &
                StructRef: .
                  ID: istat
                  ID: st_mode
                Constant: unsigned int, 61440U
              Constant: unsigned int, 32768U
          Compound: 
            If: 
              UnaryOp: !
                ID: quiet
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "%s: %s is not a directory or a regular file - ignored\n"
                      ID: progname
                      ID: ifname
            If: 
              BinaryOp: ==
                ID: exit_code
                Constant: int, 0
              Compound: 
                Assignment: =
                  ID: exit_code
                  Constant: int, 2
            Return: 
        If: 
          BinaryOp: >
            StructRef: .
              ID: istat
              ID: st_nlink
            Constant: unsigned long int, 1UL
          Compound: 
            If: 
              UnaryOp: !
                ID: to_stdout
              Compound: 
                If: 
                  UnaryOp: !
                    ID: force
                  Compound: 
                    If: 
                      UnaryOp: !
                        ID: quiet
                      Compound: 
                        If: 
                          BinaryOp: >
                            StructRef: .
                              ID: istat
                              ID: st_nlink
                            Constant: unsigned long int, 2UL
                          Compound: 
                            Assignment: =
                              ID: tmp___1
                              Constant: char, 's'
                          Compound: 
                            Assignment: =
                              ID: tmp___1
                              Constant: char, ' '
                        Compound: 
                          FuncCall: 
                            ID: fprintf
                            ExprList: 
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['FILE']
                                ID: stderr
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['char']
                                Constant: string, "%s: %s has %d other link%c -- unchanged\n"
                              ID: progname
                              ID: ifname
                              BinaryOp: -
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  StructRef: .
                                    ID: istat
                                    ID: st_nlink
                                Constant: int, 1
                              ID: tmp___1
                    If: 
                      BinaryOp: ==
                        ID: exit_code
                        Constant: int, 0
                      Compound: 
                        Assignment: =
                          ID: exit_code
                          Constant: int, 2
                    Return: 
        Assignment: =
          ID: ifile_size
          StructRef: .
            ID: istat
            ID: st_size
        If: 
          ID: no_time
          Compound: 
            If: 
              UnaryOp: !
                ID: list
              Compound: 
                Assignment: =
                  ID: time_stamp
                  Constant: long int, 0L
              Compound: 
                Assignment: =
                  ID: time_stamp
                  StructRef: .
                    StructRef: .
                      ID: istat
                      ID: st_mtim
                    ID: tv_sec
          Compound: 
            Assignment: =
              ID: time_stamp
              StructRef: .
                StructRef: .
                  ID: istat
                  ID: st_mtim
                ID: tv_sec
        If: 
          ID: to_stdout
          Compound: 
            If: 
              UnaryOp: !
                ID: list
              Compound: 
                If: 
                  UnaryOp: !
                    ID: test
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: strcpy
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char']
                            ID: ofname
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "stdout"
                  Compound: 
                    Goto: _L___0
              Compound: 
                Goto: _L___0
          Compound: 
            Label: _L___0
              Compound: 
                Assignment: =
                  ID: tmp___2
                  FuncCall: 
                    ID: make_ofname
            If: 
              BinaryOp: !=
                ID: tmp___2
                Constant: int, 0
              Compound: 
                Return: 
        If: 
          ID: ascii
          Compound: 
            If: 
              UnaryOp: !
                ID: decompress
              Compound: 
                Assignment: =
                  ID: tmp___3
                  Constant: int, 0
              Compound: 
                Assignment: =
                  ID: tmp___3
                  Constant: int, 0
          Compound: 
            Assignment: =
              ID: tmp___3
              Constant: int, 0
        Compound: 
          Assignment: =
            ID: ifd
            FuncCall: 
              ID: open
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: ifname
                ID: tmp___3
                Constant: int, 384
        If: 
          BinaryOp: ==
            ID: ifd
            UnaryOp: -
              Constant: int, 1
          Compound: 
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "%s: "
                  ID: progname
              FuncCall: 
                ID: perror
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: ifname
              Assignment: =
                ID: exit_code
                Constant: int, 1
            Return: 
        Compound: 
          FuncCall: 
            ID: clear_bufs
          Assignment: =
            ID: part_nb
            Constant: int, 0
        If: 
          ID: decompress
          Compound: 
            Compound: 
              Assignment: =
                ID: method
                FuncCall: 
                  ID: get_method
                  ExprList: 
                    ID: ifd
            If: 
              BinaryOp: <
                ID: method
                Constant: int, 0
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: close
                    ExprList: 
                      ID: ifd
                Return: 
        If: 
          ID: list
          Compound: 
            Compound: 
              FuncCall: 
                ID: do_list
                ExprList: 
                  ID: ifd
                  ID: method
              FuncCall: 
                ID: close
                ExprList: 
                  ID: ifd
            Return: 
        If: 
          ID: to_stdout
          Compound: 
            Compound: 
              Assignment: =
                ID: ofd
                FuncCall: 
                  ID: fileno
                  ExprList: 
                    ID: stdout
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___4
                FuncCall: 
                  ID: create_outfile
            If: 
              BinaryOp: !=
                ID: tmp___4
                Constant: int, 0
              Compound: 
                Return: 
            If: 
              UnaryOp: !
                ID: decompress
              Compound: 
                If: 
                  ID: save_orig_name
                  Compound: 
                    If: 
                      UnaryOp: !
                        ID: verbose
                      Compound: 
                        If: 
                          UnaryOp: !
                            ID: quiet
                          Compound: 
                            Compound: 
                              FuncCall: 
                                ID: fprintf
                                ExprList: 
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['FILE']
                                    ID: stderr
                                  Cast: 
                                    Typename: None, ['const'], None
                                      PtrDecl: []
                                        TypeDecl: None, ['const'], None
                                          IdentifierType: ['char']
                                    Constant: string, "%s: %s compressed to %s\n"
                                  ID: progname
                                  ID: ifname
                                  ID: ofname
        If: 
          UnaryOp: !
            ID: save_orig_name
          Compound: 
            Assignment: =
              ID: save_orig_name
              UnaryOp: !
                ID: no_name
        If: 
          ID: verbose
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___10
                FuncCall: 
                  ID: strlen
                  ExprList: 
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      ID: ifname
            If: 
              BinaryOp: >=
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  ID: tmp___10
                Constant: int, 15
              Compound: 
                Assignment: =
                  ID: tmp___9
                  Constant: string, ""
              Compound: 
                Compound: 
                  Assignment: =
                    ID: tmp___8
                    FuncCall: 
                      ID: strlen
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: ifname
                If: 
                  BinaryOp: >=
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ID: tmp___8
                    Constant: int, 7
                  Compound: 
                    Assignment: =
                      ID: tmp___7
                      Constant: string, "\t"
                  Compound: 
                    Assignment: =
                      ID: tmp___7
                      Constant: string, "\t\t"
                Assignment: =
                  ID: tmp___9
                  ID: tmp___7
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "%s:\t%s"
                  ID: ifname
                  ID: tmp___9
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: tmp___11
                  FuncCall: 
                    UnaryOp: *
                      ID: work
                    ExprList: 
                      ID: ifd
                      ID: ofd
              If: 
                BinaryOp: !=
                  ID: tmp___11
                  Constant: int, 0
                Compound: 
                  Assignment: =
                    ID: method
                    UnaryOp: -
                      Constant: int, 1
                  Goto: while_break
              If: 
                UnaryOp: !
                  ID: decompress
                Compound: 
                  Goto: while_break
                Compound: 
                  If: 
                    ID: last_member
                    Compound: 
                      Goto: while_break
                    Compound: 
                      If: 
                        BinaryOp: ==
                          ID: inptr
                          ID: insize
                        Compound: 
                          Goto: while_break
              Compound: 
                Assignment: =
                  ID: method
                  FuncCall: 
                    ID: get_method
                    ExprList: 
                      ID: ifd
              If: 
                BinaryOp: <
                  ID: method
                  Constant: int, 0
                Compound: 
                  Goto: while_break
              Assignment: =
                ID: bytes_out
                Constant: long int, 0L
          Label: while_break
            EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: close
            ExprList: 
              ID: ifd
        If: 
          UnaryOp: !
            ID: to_stdout
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___12
                FuncCall: 
                  ID: close
                  ExprList: 
                    ID: ofd
            If: 
              ID: tmp___12
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: write_error
        If: 
          BinaryOp: ==
            ID: method
            UnaryOp: -
              Constant: int, 1
          Compound: 
            If: 
              UnaryOp: !
                ID: to_stdout
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: unlink
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: ofname
            Return: 
        If: 
          ID: verbose
          Compound: 
            If: 
              ID: test
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, " OK"
              Compound: 
                If: 
                  ID: decompress
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: display_ratio
                        ExprList: 
                          BinaryOp: -
                            ID: bytes_out
                            BinaryOp: -
                              ID: bytes_in
                              ID: header_bytes
                          ID: bytes_out
                          ID: stderr
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: display_ratio
                        ExprList: 
                          BinaryOp: -
                            ID: bytes_in
                            BinaryOp: -
                              ID: bytes_out
                              ID: header_bytes
                          ID: bytes_in
                          ID: stderr
            If: 
              UnaryOp: !
                ID: test
              Compound: 
                If: 
                  UnaryOp: !
                    ID: to_stdout
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, " -- replaced with %s"
                          ID: ofname
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "\n"
        If: 
          UnaryOp: !
            ID: to_stdout
          Compound: 
            Compound: 
              FuncCall: 
                ID: copy_stat
                ExprList: 
                  UnaryOp: &
                    ID: istat
        Return: 
  FuncDef: 
    Decl: create_outfile, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: create_outfile, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: ostat, [], [], [], []
        TypeDecl: ostat, [], None
          Struct: stat
      Decl: flags___0, [], [], [], []
        TypeDecl: flags___0, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp6, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp6, [], None
            IdentifierType: ['void']
      Compound: 
        Assignment: =
          ID: flags___0
          Constant: int, 193
        If: 
          ID: ascii
          Compound: 
            If: 
              ID: decompress
              Compound: 
                Assignment: &=
                  ID: flags___0
                  UnaryOp: -
                    Constant: int, 1
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: tmp
                  FuncCall: 
                    ID: check_ofname
              If: 
                BinaryOp: !=
                  ID: tmp
                  Constant: int, 0
                Compound: 
                  Compound: 
                    FuncCall: 
                      ID: close
                      ExprList: 
                        ID: ifd
                  Return: 
                    Constant: int, 1
              Compound: 
                Assignment: =
                  ID: remove_ofname
                  Constant: int, 1
                Assignment: =
                  ID: ofd
                  FuncCall: 
                    ID: open
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: ofname
                      ID: flags___0
                      Constant: int, 384
              If: 
                BinaryOp: ==
                  ID: ofd
                  UnaryOp: -
                    Constant: int, 1
                Compound: 
                  Compound: 
                    FuncCall: 
                      ID: perror
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: ofname
                    FuncCall: 
                      ID: close
                      ExprList: 
                        ID: ifd
                    Assignment: =
                      ID: exit_code
                      Constant: int, 1
                  Return: 
                    Constant: int, 1
              Compound: 
                Assignment: =
                  ID: tmp___0
                  FuncCall: 
                    ID: fstat
                    ExprList: 
                      ID: ofd
                      UnaryOp: &
                        ID: ostat
              If: 
                BinaryOp: !=
                  ID: tmp___0
                  Constant: int, 0
                Compound: 
                  Compound: 
                    FuncCall: 
                      ID: fprintf
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['FILE']
                          ID: stderr
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          Constant: string, "%s: "
                        ID: progname
                    FuncCall: 
                      ID: perror
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: ofname
                    FuncCall: 
                      ID: close
                      ExprList: 
                        ID: ifd
                    FuncCall: 
                      ID: close
                      ExprList: 
                        ID: ofd
                    FuncCall: 
                      ID: unlink
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: ofname
                    Assignment: =
                      ID: exit_code
                      Constant: int, 1
                  Return: 
                    Constant: int, 1
              Compound: 
                Assignment: =
                  ID: tmp___1
                  FuncCall: 
                    ID: name_too_long
                    ExprList: 
                      ID: ofname
                      UnaryOp: &
                        ID: ostat
              If: 
                UnaryOp: !
                  ID: tmp___1
                Compound: 
                  Return: 
                    Constant: int, 0
              If: 
                ID: decompress
                Compound: 
                  If: 
                    UnaryOp: !
                      ID: quiet
                    Compound: 
                      Compound: 
                        FuncCall: 
                          ID: fprintf
                          ExprList: 
                            Cast: 
                              Typename: None, [], None
                                PtrDecl: []
                                  TypeDecl: None, [], None
                                    IdentifierType: ['FILE']
                              ID: stderr
                            Cast: 
                              Typename: None, ['const'], None
                                PtrDecl: []
                                  TypeDecl: None, ['const'], None
                                    IdentifierType: ['char']
                              Constant: string, "%s: %s: warning, name truncated\n"
                            ID: progname
                            ID: ofname
                  If: 
                    BinaryOp: ==
                      ID: exit_code
                      Constant: int, 0
                    Compound: 
                      Assignment: =
                        ID: exit_code
                        Constant: int, 2
                  Return: 
                    Constant: int, 0
              Compound: 
                FuncCall: 
                  ID: close
                  ExprList: 
                    ID: ofd
                FuncCall: 
                  ID: unlink
                  ExprList: 
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      ID: ofname
                FuncCall: 
                  ID: shorten_name
                  ExprList: 
                    ID: ofname
          Label: while_break
            EmptyStatement: 
  FuncDef: 
    Decl: do_stat, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: name, [], [], [], []
            PtrDecl: []
              TypeDecl: name, [], None
                IdentifierType: ['char']
          Decl: sbuf, [], [], [], []
            PtrDecl: []
              TypeDecl: sbuf, [], None
                Struct: stat
        TypeDecl: do_stat, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: tmp, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp, [], None
            IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Compound: 
        Compound: 
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: __errno_location
          Assignment: =
            UnaryOp: *
              ID: tmp
            Constant: int, 0
        If: 
          UnaryOp: !
            ID: to_stdout
          Compound: 
            If: 
              UnaryOp: !
                ID: force
              Compound: 
                Compound: 
                  Assignment: =
                    ID: tmp___0
                    FuncCall: 
                      ID: lstat
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: name
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                Struct: stat
                          ID: sbuf
                Return: 
                  ID: tmp___0
        Compound: 
          Assignment: =
            ID: tmp___1
            FuncCall: 
              ID: stat
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: name
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        Struct: stat
                  ID: sbuf
        Return: 
          ID: tmp___1
  Decl: known_suffixes, [], [], ['static'], []
    ArrayDecl: []
      PtrDecl: []
        TypeDecl: known_suffixes, [], None
          IdentifierType: ['char']
      Constant: int, 9
    InitList: 
      ID: z_suffix
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ".gz"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ".z"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ".taz"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ".tgz"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "-gz"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "-z"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "_z"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['void']
          Constant: int, 0
  FuncDef: 
    Decl: get_suffix, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: name, [], [], [], []
            PtrDecl: []
              TypeDecl: name, [], None
                IdentifierType: ['char']
        PtrDecl: []
          TypeDecl: get_suffix, [], None
            IdentifierType: ['char']
    Compound: 
      Decl: nlen, [], [], [], []
        TypeDecl: nlen, [], None
          IdentifierType: ['int']
      Decl: slen, [], [], [], []
        TypeDecl: slen, [], None
          IdentifierType: ['int']
      Decl: suffix, [], [], [], []
        ArrayDecl: []
          TypeDecl: suffix, [], None
            IdentifierType: ['char']
          Constant: int, 33
      Decl: suf, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: suf, [], None
              IdentifierType: ['char']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: s, [], [], [], []
        TypeDecl: s, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp13, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp13, [], None
            IdentifierType: ['void']
      Compound: 
        Compound: 
          Assignment: =
            ID: suf
            ID: known_suffixes
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: strcmp
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: z_suffix
                Constant: string, "z"
        If: 
          BinaryOp: ==
            ID: tmp
            Constant: int, 0
          Compound: 
            UnaryOp: p++
              ID: suf
        Compound: 
          Assignment: =
            ID: nlen
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              FuncCall: 
                ID: strlen
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: name
        If: 
          BinaryOp: <=
            ID: nlen
            Constant: int, 32
          Compound: 
            Compound: 
              FuncCall: 
                ID: strcpy
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    ID: suffix
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: name
          Compound: 
            Compound: 
              FuncCall: 
                ID: strcpy
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    ID: suffix
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    BinaryOp: -
                      BinaryOp: -
                        BinaryOp: +
                          ID: name
                          ID: nlen
                        Constant: int, 30
                      Constant: int, 2
        Compound: 
          FuncCall: 
            ID: strlwr
            ExprList: 
              ID: suffix
          Assignment: =
            ID: slen
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              FuncCall: 
                ID: strlen
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: suffix
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: tmp___0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    FuncCall: 
                      ID: strlen
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          UnaryOp: *
                            ID: suf
                Assignment: =
                  ID: s
                  ID: tmp___0
              If: 
                BinaryOp: >
                  ID: slen
                  ID: s
                Compound: 
                  If: 
                    BinaryOp: !=
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: suffix
                          BinaryOp: -
                            BinaryOp: -
                              ID: slen
                              ID: s
                            Constant: int, 1
                      Constant: int, 47
                    Compound: 
                      Compound: 
                        Assignment: =
                          ID: tmp___1
                          FuncCall: 
                            ID: strcmp
                            ExprList: 
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['char']
                                BinaryOp: -
                                  BinaryOp: +
                                    ID: suffix
                                    ID: slen
                                  ID: s
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['char']
                                UnaryOp: *
                                  ID: suf
                      If: 
                        BinaryOp: ==
                          ID: tmp___1
                          Constant: int, 0
                        Compound: 
                          Return: 
                            BinaryOp: -
                              BinaryOp: +
                                ID: name
                                ID: nlen
                              ID: s
              UnaryOp: p++
                ID: suf
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      UnaryOp: *
                        ID: suf
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['void']
                        Constant: int, 0
                Compound: 
                  Goto: while_break
          Label: while_break
            EmptyStatement: 
        Return: 
          Cast: 
            Typename: None, [], None
              PtrDecl: []
                TypeDecl: None, [], None
                  IdentifierType: ['char']
            Cast: 
              Typename: None, [], None
                PtrDecl: []
                  TypeDecl: None, [], None
                    IdentifierType: ['void']
              Constant: int, 0
  Decl: suffixes, [], [], ['static'], []
    ArrayDecl: []
      PtrDecl: []
        TypeDecl: suffixes, [], None
          IdentifierType: ['char']
      Constant: int, 6
    InitList: 
      ID: z_suffix
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ".gz"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ".z"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "-z"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ".Z"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Cast: 
          Typename: None, [], None
            PtrDecl: []
              TypeDecl: None, [], None
                IdentifierType: ['void']
          Constant: int, 0
  FuncDef: 
    Decl: get_istat, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: iname, [], [], [], []
            PtrDecl: []
              TypeDecl: iname, [], None
                IdentifierType: ['char']
          Decl: sbuf, [], [], [], []
            PtrDecl: []
              TypeDecl: sbuf, [], None
                Struct: stat
        TypeDecl: get_istat, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: ilen, [], [], [], []
        TypeDecl: ilen, [], None
          IdentifierType: ['int']
      Decl: suf, [], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: suf, [], None
              IdentifierType: ['char']
      Decl: s, [], [], [], []
        PtrDecl: []
          TypeDecl: s, [], None
            IdentifierType: ['char']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___0, [], None
            IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Compound: 
        Compound: 
          Assignment: =
            ID: suf
            ID: suffixes
          FuncCall: 
            ID: strcpy
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                ID: ifname
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                ID: iname
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: do_stat
              ExprList: 
                ID: ifname
                ID: sbuf
        If: 
          BinaryOp: ==
            ID: tmp
            Constant: int, 0
          Compound: 
            Return: 
              Constant: int, 0
        If: 
          UnaryOp: !
            ID: decompress
          Compound: 
            Compound: 
              FuncCall: 
                ID: perror
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: ifname
              Assignment: =
                ID: exit_code
                Constant: int, 1
            Return: 
              Constant: int, 1
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___0
                FuncCall: 
                  ID: __errno_location
            If: 
              BinaryOp: !=
                UnaryOp: *
                  ID: tmp___0
                Constant: int, 2
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: perror
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: ifname
                  Assignment: =
                    ID: exit_code
                    Constant: int, 1
                Return: 
                  Constant: int, 1
        Compound: 
          Assignment: =
            ID: s
            FuncCall: 
              ID: get_suffix
              ExprList: 
                ID: ifname
        If: 
          BinaryOp: !=
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: s
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: perror
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: ifname
              Assignment: =
                ID: exit_code
                Constant: int, 1
            Return: 
              Constant: int, 1
        Compound: 
          Assignment: =
            ID: ilen
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              FuncCall: 
                ID: strlen
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: ifname
          Assignment: =
            ID: tmp___1
            FuncCall: 
              ID: strcmp
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: z_suffix
                Constant: string, ".gz"
        If: 
          BinaryOp: ==
            ID: tmp___1
            Constant: int, 0
          Compound: 
            UnaryOp: p++
              ID: suf
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: s
                  UnaryOp: *
                    ID: suf
                FuncCall: 
                  ID: strcat
                  ExprList: 
                    Cast: 
                      Typename: None, [], None
                        PtrDecl: []
                          TypeDecl: None, [], None
                            IdentifierType: ['char']
                      ID: ifname
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      ID: s
                Assignment: =
                  ID: tmp___2
                  FuncCall: 
                    ID: do_stat
                    ExprList: 
                      ID: ifname
                      ID: sbuf
              If: 
                BinaryOp: ==
                  ID: tmp___2
                  Constant: int, 0
                Compound: 
                  Return: 
                    Constant: int, 0
              Assignment: =
                ArrayRef: 
                  ID: ifname
                  ID: ilen
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                  Constant: char, '\000'
              UnaryOp: p++
                ID: suf
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      UnaryOp: *
                        ID: suf
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['void']
                        Constant: int, 0
                Compound: 
                  Goto: while_break
          Label: while_break
            EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: strcat
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                ID: ifname
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                ID: z_suffix
          FuncCall: 
            ID: perror
            ExprList: 
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                ID: ifname
          Assignment: =
            ID: exit_code
            Constant: int, 1
        Return: 
          Constant: int, 1
  FuncDef: 
    Decl: make_ofname, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: make_ofname, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: suff, [], [], [], []
        PtrDecl: []
          TypeDecl: suff, [], None
            IdentifierType: ['char']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp4, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp4, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp5, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp5, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          FuncCall: 
            ID: strcpy
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                ID: ofname
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                ID: ifname
          Assignment: =
            ID: suff
            FuncCall: 
              ID: get_suffix
              ExprList: 
                ID: ofname
        If: 
          ID: decompress
          Compound: 
            If: 
              BinaryOp: ==
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'long']
                  ID: suff
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'long']
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    Constant: int, 0
              Compound: 
                If: 
                  UnaryOp: !
                    ID: recursive
                  Compound: 
                    If: 
                      ID: list
                      Compound: 
                        Return: 
                          Constant: int, 0
                      Compound: 
                        If: 
                          ID: test
                          Compound: 
                            Return: 
                              Constant: int, 0
                If: 
                  ID: verbose
                  Compound: 
                    Goto: _L
                  Compound: 
                    If: 
                      UnaryOp: !
                        ID: recursive
                      Compound: 
                        If: 
                          UnaryOp: !
                            ID: quiet
                          Compound: 
                            Label: _L
                              If: 
                                UnaryOp: !
                                  ID: quiet
                                Compound: 
                                  Compound: 
                                    FuncCall: 
                                      ID: fprintf
                                      ExprList: 
                                        Cast: 
                                          Typename: None, [], None
                                            PtrDecl: []
                                              TypeDecl: None, [], None
                                                IdentifierType: ['FILE']
                                          ID: stderr
                                        Cast: 
                                          Typename: None, ['const'], None
                                            PtrDecl: []
                                              TypeDecl: None, ['const'], None
                                                IdentifierType: ['char']
                                          Constant: string, "%s: %s: unknown suffix -- ignored\n"
                                        ID: progname
                                        ID: ifname
                            If: 
                              BinaryOp: ==
                                ID: exit_code
                                Constant: int, 0
                              Compound: 
                                Assignment: =
                                  ID: exit_code
                                  Constant: int, 2
                Return: 
                  Constant: int, 2
            Compound: 
              FuncCall: 
                ID: strlwr
                ExprList: 
                  ID: suff
              Assignment: =
                ID: tmp
                FuncCall: 
                  ID: strcmp
                  ExprList: 
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      ID: suff
                    Constant: string, ".tgz"
            If: 
              BinaryOp: ==
                ID: tmp
                Constant: int, 0
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: strcpy
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        ID: suff
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, ".tar"
              Compound: 
                Compound: 
                  Assignment: =
                    ID: tmp___0
                    FuncCall: 
                      ID: strcmp
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: suff
                        Constant: string, ".taz"
                If: 
                  BinaryOp: ==
                    ID: tmp___0
                    Constant: int, 0
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: strcpy
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char']
                            ID: suff
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, ".tar"
                  Compound: 
                    Assignment: =
                      UnaryOp: *
                        ID: suff
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['char']
                        Constant: char, '\000'
          Compound: 
            If: 
              BinaryOp: !=
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'long']
                  ID: suff
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'long']
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    Constant: int, 0
              Compound: 
                If: 
                  ID: verbose
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "%s: %s already has %s suffix -- unchanged\n"
                          ID: progname
                          ID: ifname
                          ID: suff
                  Compound: 
                    If: 
                      UnaryOp: !
                        ID: recursive
                      Compound: 
                        If: 
                          UnaryOp: !
                            ID: quiet
                          Compound: 
                            Compound: 
                              FuncCall: 
                                ID: fprintf
                                ExprList: 
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['FILE']
                                    ID: stderr
                                  Cast: 
                                    Typename: None, ['const'], None
                                      PtrDecl: []
                                        TypeDecl: None, ['const'], None
                                          IdentifierType: ['char']
                                    Constant: string, "%s: %s already has %s suffix -- unchanged\n"
                                  ID: progname
                                  ID: ifname
                                  ID: suff
                If: 
                  BinaryOp: ==
                    ID: exit_code
                    Constant: int, 0
                  Compound: 
                    Assignment: =
                      ID: exit_code
                      Constant: int, 2
                Return: 
                  Constant: int, 2
              Compound: 
                Compound: 
                  Assignment: =
                    ID: save_orig_name
                    Constant: int, 0
                  FuncCall: 
                    ID: strcat
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        ID: ofname
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: z_suffix
        Return: 
          Constant: int, 0
  FuncDef: 
    Decl: get_method, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: in, [], [], [], []
            TypeDecl: in, [], None
              IdentifierType: ['int']
        TypeDecl: get_method, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: flags___0, [], [], [], []
        TypeDecl: flags___0, [], None
          IdentifierType: ['uch']
      Decl: magic, [], [], [], []
        ArrayDecl: []
          TypeDecl: magic, [], None
            IdentifierType: ['char']
          Constant: int, 2
      Decl: stamp, [], [], [], []
        TypeDecl: stamp, [], None
          IdentifierType: ['ulg']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, [], [], [], []
        TypeDecl: tmp___4, [], None
          IdentifierType: ['int']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['int']
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___9, [], [], [], []
        TypeDecl: tmp___9, [], None
          IdentifierType: ['int']
      Decl: tmp___10, [], [], [], []
        TypeDecl: tmp___10, [], None
          IdentifierType: ['int']
      Decl: tmp___11, [], [], [], []
        TypeDecl: tmp___11, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___12, [], [], [], []
        TypeDecl: tmp___12, [], None
          IdentifierType: ['int']
      Decl: tmp___13, [], [], [], []
        TypeDecl: tmp___13, [], None
          IdentifierType: ['int']
      Decl: tmp___14, [], [], [], []
        TypeDecl: tmp___14, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___15, [], [], [], []
        TypeDecl: tmp___15, [], None
          IdentifierType: ['int']
      Decl: tmp___16, [], [], [], []
        TypeDecl: tmp___16, [], None
          IdentifierType: ['int']
      Decl: tmp___17, [], [], [], []
        TypeDecl: tmp___17, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___18, [], [], [], []
        TypeDecl: tmp___18, [], None
          IdentifierType: ['int']
      Decl: tmp___19, [], [], [], []
        TypeDecl: tmp___19, [], None
          IdentifierType: ['int']
      Decl: tmp___20, [], [], [], []
        TypeDecl: tmp___20, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___21, [], [], [], []
        TypeDecl: tmp___21, [], None
          IdentifierType: ['int']
      Decl: tmp___22, [], [], [], []
        TypeDecl: tmp___22, [], None
          IdentifierType: ['int']
      Decl: tmp___23, [], [], [], []
        TypeDecl: tmp___23, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___24, [], [], [], []
        TypeDecl: tmp___24, [], None
          IdentifierType: ['int']
      Decl: tmp___25, [], [], [], []
        TypeDecl: tmp___25, [], None
          IdentifierType: ['int']
      Decl: tmp___26, [], [], [], []
        TypeDecl: tmp___26, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___27, [], [], [], []
        TypeDecl: tmp___27, [], None
          IdentifierType: ['int']
      Decl: tmp___28, [], [], [], []
        TypeDecl: tmp___28, [], None
          IdentifierType: ['int']
      Decl: tmp___29, [], [], [], []
        TypeDecl: tmp___29, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___30, [], [], [], []
        TypeDecl: tmp___30, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: part, [], [], [], []
        TypeDecl: part, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___31, [], [], [], []
        TypeDecl: tmp___31, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___32, [], [], [], []
        TypeDecl: tmp___32, [], None
          IdentifierType: ['int']
      Decl: tmp___33, [], [], [], []
        TypeDecl: tmp___33, [], None
          IdentifierType: ['int']
      Decl: tmp___34, [], [], [], []
        TypeDecl: tmp___34, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___35, [], [], [], []
        TypeDecl: tmp___35, [], None
          IdentifierType: ['int']
      Decl: tmp___36, [], [], [], []
        TypeDecl: tmp___36, [], None
          IdentifierType: ['int']
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___37, [], [], [], []
        TypeDecl: tmp___37, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___38, [], [], [], []
        TypeDecl: tmp___38, [], None
          IdentifierType: ['int']
      Decl: tmp___39, [], [], [], []
        TypeDecl: tmp___39, [], None
          IdentifierType: ['int']
      Decl: tmp___40, [], [], [], []
        TypeDecl: tmp___40, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___41, [], [], [], []
        TypeDecl: tmp___41, [], None
          IdentifierType: ['int']
      Decl: tmp___42, [], [], [], []
        TypeDecl: tmp___42, [], None
          IdentifierType: ['int']
      Decl: tmp___43, [], [], [], []
        TypeDecl: tmp___43, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___44, [], [], [], []
        TypeDecl: tmp___44, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: c, [], [], [], []
        TypeDecl: c, [], None
          IdentifierType: ['char']
      Decl: tmp___45, [], [], [], []
        TypeDecl: tmp___45, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___46, [], [], [], []
        TypeDecl: tmp___46, [], None
          IdentifierType: ['int']
      Decl: p, [], [], [], []
        PtrDecl: []
          TypeDecl: p, [], None
            IdentifierType: ['char']
      Decl: tmp___47, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___47, [], None
            IdentifierType: ['char']
      Decl: base, [], [], [], []
        PtrDecl: []
          TypeDecl: base, [], None
            IdentifierType: ['char']
      Decl: tmp___48, [], [], [], []
        TypeDecl: tmp___48, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___49, [], [], [], []
        TypeDecl: tmp___49, [], None
          IdentifierType: ['int']
      Decl: tmp___50, [], [], [], []
        TypeDecl: tmp___50, [], None
          IdentifierType: ['int']
      Decl: tmp___51, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___51, [], None
            IdentifierType: ['char']
      Decl: tmp___52, [], [], [], []
        TypeDecl: tmp___52, [], None
          IdentifierType: ['unsigned', 'int']
      Decl: tmp___53, [], [], [], []
        TypeDecl: tmp___53, [], None
          IdentifierType: ['int']
      Decl: tmp___54, [], [], [], []
        TypeDecl: tmp___54, [], None
          IdentifierType: ['int']
      Decl: tmp___55, [], [], [], []
        TypeDecl: tmp___55, [], None
          IdentifierType: ['int']
      Decl: tmp___56, [], [], [], []
        TypeDecl: tmp___56, [], None
          IdentifierType: ['int']
      Decl: tmp___57, [], [], [], []
        TypeDecl: tmp___57, [], None
          IdentifierType: ['int']
      Decl: tmp___58, [], [], [], []
        TypeDecl: tmp___58, [], None
          IdentifierType: ['int']
      Decl: tmp___59, [], [], [], []
        TypeDecl: tmp___59, [], None
          IdentifierType: ['int']
      Decl: tmp___60, [], [], [], []
        TypeDecl: tmp___60, [], None
          IdentifierType: ['int']
      Decl: tmp___61, [], [], [], []
        TypeDecl: tmp___61, [], None
          IdentifierType: ['int']
      Decl: tmp___62, [], [], [], []
        TypeDecl: tmp___62, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp74, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp74, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp75, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp75, [], None
            IdentifierType: ['char']
      Compound: 
        If: 
          ID: force
          Compound: 
            If: 
              ID: to_stdout
              Compound: 
                If: 
                  BinaryOp: <
                    ID: inptr
                    ID: insize
                  Compound: 
                    Assignment: =
                      ID: tmp
                      ID: inptr
                    UnaryOp: p++
                      ID: inptr
                    Assignment: =
                      ID: tmp___1
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: inbuf
                          ID: tmp
                  Compound: 
                    Compound: 
                      Assignment: =
                        ID: tmp___0
                        FuncCall: 
                          ID: fill_inbuf
                          ExprList: 
                            Constant: int, 1
                      Assignment: =
                        ID: tmp___1
                        ID: tmp___0
                Assignment: =
                  ArrayRef: 
                    ID: magic
                    Constant: int, 0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
                    ID: tmp___1
                If: 
                  BinaryOp: <
                    ID: inptr
                    ID: insize
                  Compound: 
                    Assignment: =
                      ID: tmp___2
                      ID: inptr
                    UnaryOp: p++
                      ID: inptr
                    Assignment: =
                      ID: tmp___4
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: inbuf
                          ID: tmp___2
                  Compound: 
                    Compound: 
                      Assignment: =
                        ID: tmp___3
                        FuncCall: 
                          ID: fill_inbuf
                          ExprList: 
                            Constant: int, 1
                      Assignment: =
                        ID: tmp___4
                        ID: tmp___3
                Assignment: =
                  ArrayRef: 
                    ID: magic
                    Constant: int, 1
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
                    ID: tmp___4
              Compound: 
                Goto: _L
          Compound: 
            Label: _L
              If: 
                BinaryOp: <
                  ID: inptr
                  ID: insize
                Compound: 
                  Assignment: =
                    ID: tmp___5
                    ID: inptr
                  UnaryOp: p++
                    ID: inptr
                  Assignment: =
                    ID: tmp___7
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      ArrayRef: 
                        ID: inbuf
                        ID: tmp___5
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___6
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                    Assignment: =
                      ID: tmp___7
                      ID: tmp___6
            Assignment: =
              ArrayRef: 
                ID: magic
                Constant: int, 0
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['char']
                ID: tmp___7
            If: 
              BinaryOp: <
                ID: inptr
                ID: insize
              Compound: 
                Assignment: =
                  ID: tmp___8
                  ID: inptr
                UnaryOp: p++
                  ID: inptr
                Assignment: =
                  ID: tmp___10
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ArrayRef: 
                      ID: inbuf
                      ID: tmp___8
              Compound: 
                Compound: 
                  Assignment: =
                    ID: tmp___9
                    FuncCall: 
                      ID: fill_inbuf
                      ExprList: 
                        Constant: int, 0
                  Assignment: =
                    ID: tmp___10
                    ID: tmp___9
            Assignment: =
              ArrayRef: 
                ID: magic
                Constant: int, 1
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['char']
                ID: tmp___10
        Compound: 
          Assignment: =
            ID: method
            UnaryOp: -
              Constant: int, 1
          UnaryOp: p++
            ID: part_nb
          Assignment: =
            ID: header_bytes
            Constant: long int, 0L
          Assignment: =
            ID: last_member
            Constant: int, 0
          Assignment: =
            ID: tmp___61
            FuncCall: 
              ID: memcmp
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['void']
                  ID: magic
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['void']
                  Constant: string, "\037\213"
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['size_t']
                  Constant: int, 2
        If: 
          BinaryOp: ==
            ID: tmp___61
            Constant: int, 0
          Compound: 
            Goto: _L___4
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___62
                FuncCall: 
                  ID: memcmp
                  ExprList: 
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['void']
                      ID: magic
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['void']
                      Constant: string, "\037\236"
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['size_t']
                      Constant: int, 2
            If: 
              BinaryOp: ==
                ID: tmp___62
                Constant: int, 0
              Compound: 
                Label: _L___4
                  If: 
                    BinaryOp: <
                      ID: inptr
                      ID: insize
                    Compound: 
                      Assignment: =
                        ID: tmp___11
                        ID: inptr
                      UnaryOp: p++
                        ID: inptr
                      Assignment: =
                        ID: tmp___13
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          ArrayRef: 
                            ID: inbuf
                            ID: tmp___11
                    Compound: 
                      Compound: 
                        Assignment: =
                          ID: tmp___12
                          FuncCall: 
                            ID: fill_inbuf
                            ExprList: 
                              Constant: int, 0
                        Assignment: =
                          ID: tmp___13
                          ID: tmp___12
                Assignment: =
                  ID: method
                  ID: tmp___13
                If: 
                  BinaryOp: !=
                    ID: method
                    Constant: int, 8
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "%s: %s: unknown method %d -- get newer version of gzip\n"
                          ID: progname
                          ID: ifname
                          ID: method
                      Assignment: =
                        ID: exit_code
                        Constant: int, 1
                    Return: 
                      UnaryOp: -
                        Constant: int, 1
                Assignment: =
                  ID: work
                  UnaryOp: &
                    ID: unzip
                If: 
                  BinaryOp: <
                    ID: inptr
                    ID: insize
                  Compound: 
                    Assignment: =
                      ID: tmp___14
                      ID: inptr
                    UnaryOp: p++
                      ID: inptr
                    Assignment: =
                      ID: tmp___16
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: inbuf
                          ID: tmp___14
                  Compound: 
                    Compound: 
                      Assignment: =
                        ID: tmp___15
                        FuncCall: 
                          ID: fill_inbuf
                          ExprList: 
                            Constant: int, 0
                      Assignment: =
                        ID: tmp___16
                        ID: tmp___15
                Assignment: =
                  ID: flags___0
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['uch']
                    ID: tmp___16
                If: 
                  BinaryOp: !=
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: flags___0
                      Constant: int, 32
                    Constant: int, 0
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "%s: %s is encrypted -- get newer version of gzip\n"
                          ID: progname
                          ID: ifname
                      Assignment: =
                        ID: exit_code
                        Constant: int, 1
                    Return: 
                      UnaryOp: -
                        Constant: int, 1
                If: 
                  BinaryOp: !=
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: flags___0
                      Constant: int, 2
                    Constant: int, 0
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "%s: %s is a a multi-part gzip file -- get newer version of gzip\n"
                          ID: progname
                          ID: ifname
                      Assignment: =
                        ID: exit_code
                        Constant: int, 1
                    If: 
                      BinaryOp: <=
                        ID: force
                        Constant: int, 1
                      Compound: 
                        Return: 
                          UnaryOp: -
                            Constant: int, 1
                If: 
                  BinaryOp: !=
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: flags___0
                      Constant: int, 192
                    Constant: int, 0
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "%s: %s has flags 0x%x -- get newer version of gzip\n"
                          ID: progname
                          ID: ifname
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ID: flags___0
                      Assignment: =
                        ID: exit_code
                        Constant: int, 1
                    If: 
                      BinaryOp: <=
                        ID: force
                        Constant: int, 1
                      Compound: 
                        Return: 
                          UnaryOp: -
                            Constant: int, 1
                If: 
                  BinaryOp: <
                    ID: inptr
                    ID: insize
                  Compound: 
                    Assignment: =
                      ID: tmp___17
                      ID: inptr
                    UnaryOp: p++
                      ID: inptr
                    Assignment: =
                      ID: tmp___19
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: inbuf
                          ID: tmp___17
                  Compound: 
                    Compound: 
                      Assignment: =
                        ID: tmp___18
                        FuncCall: 
                          ID: fill_inbuf
                          ExprList: 
                            Constant: int, 0
                      Assignment: =
                        ID: tmp___19
                        ID: tmp___18
                Assignment: =
                  ID: stamp
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['ulg']
                    ID: tmp___19
                If: 
                  BinaryOp: <
                    ID: inptr
                    ID: insize
                  Compound: 
                    Assignment: =
                      ID: tmp___20
                      ID: inptr
                    UnaryOp: p++
                      ID: inptr
                    Assignment: =
                      ID: tmp___22
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: inbuf
                          ID: tmp___20
                  Compound: 
                    Compound: 
                      Assignment: =
                        ID: tmp___21
                        FuncCall: 
                          ID: fill_inbuf
                          ExprList: 
                            Constant: int, 0
                      Assignment: =
                        ID: tmp___22
                        ID: tmp___21
                Assignment: |=
                  ID: stamp
                  BinaryOp: <<
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: tmp___22
                    Constant: int, 8
                If: 
                  BinaryOp: <
                    ID: inptr
                    ID: insize
                  Compound: 
                    Assignment: =
                      ID: tmp___23
                      ID: inptr
                    UnaryOp: p++
                      ID: inptr
                    Assignment: =
                      ID: tmp___25
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: inbuf
                          ID: tmp___23
                  Compound: 
                    Compound: 
                      Assignment: =
                        ID: tmp___24
                        FuncCall: 
                          ID: fill_inbuf
                          ExprList: 
                            Constant: int, 0
                      Assignment: =
                        ID: tmp___25
                        ID: tmp___24
                Assignment: |=
                  ID: stamp
                  BinaryOp: <<
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: tmp___25
                    Constant: int, 16
                If: 
                  BinaryOp: <
                    ID: inptr
                    ID: insize
                  Compound: 
                    Assignment: =
                      ID: tmp___26
                      ID: inptr
                    UnaryOp: p++
                      ID: inptr
                    Assignment: =
                      ID: tmp___28
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: inbuf
                          ID: tmp___26
                  Compound: 
                    Compound: 
                      Assignment: =
                        ID: tmp___27
                        FuncCall: 
                          ID: fill_inbuf
                          ExprList: 
                            Constant: int, 0
                      Assignment: =
                        ID: tmp___28
                        ID: tmp___27
                Assignment: |=
                  ID: stamp
                  BinaryOp: <<
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['ulg']
                      ID: tmp___28
                    Constant: int, 24
                If: 
                  BinaryOp: !=
                    ID: stamp
                    Constant: unsigned long int, 0UL
                  Compound: 
                    If: 
                      UnaryOp: !
                        ID: no_time
                      Compound: 
                        Assignment: =
                          ID: time_stamp
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['long']
                            ID: stamp
                If: 
                  BinaryOp: <
                    ID: inptr
                    ID: insize
                  Compound: 
                    Assignment: =
                      ID: tmp___29
                      ID: inptr
                    UnaryOp: p++
                      ID: inptr
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                If: 
                  BinaryOp: <
                    ID: inptr
                    ID: insize
                  Compound: 
                    Assignment: =
                      ID: tmp___30
                      ID: inptr
                    UnaryOp: p++
                      ID: inptr
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fill_inbuf
                        ExprList: 
                          Constant: int, 0
                If: 
                  BinaryOp: !=
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: flags___0
                      Constant: int, 2
                    Constant: int, 0
                  Compound: 
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp___31
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___33
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp___31
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___32
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___33
                            ID: tmp___32
                    Assignment: =
                      ID: part
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        ID: tmp___33
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp___34
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___36
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp___34
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___35
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___36
                            ID: tmp___35
                    Assignment: |=
                      ID: part
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ID: tmp___36
                        Constant: int, 8
                    If: 
                      ID: verbose
                      Compound: 
                        Compound: 
                          FuncCall: 
                            ID: fprintf
                            ExprList: 
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['FILE']
                                ID: stderr
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['char']
                                Constant: string, "%s: %s: part number %u\n"
                              ID: progname
                              ID: ifname
                              ID: part
                If: 
                  BinaryOp: !=
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: flags___0
                      Constant: int, 4
                    Constant: int, 0
                  Compound: 
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp___37
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___39
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp___37
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___38
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___39
                            ID: tmp___38
                    Assignment: =
                      ID: len
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['unsigned', 'int']
                        ID: tmp___39
                    If: 
                      BinaryOp: <
                        ID: inptr
                        ID: insize
                      Compound: 
                        Assignment: =
                          ID: tmp___40
                          ID: inptr
                        UnaryOp: p++
                          ID: inptr
                        Assignment: =
                          ID: tmp___42
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            ArrayRef: 
                              ID: inbuf
                              ID: tmp___40
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___41
                            FuncCall: 
                              ID: fill_inbuf
                              ExprList: 
                                Constant: int, 0
                          Assignment: =
                            ID: tmp___42
                            ID: tmp___41
                    Assignment: |=
                      ID: len
                      BinaryOp: <<
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'int']
                          ID: tmp___42
                        Constant: int, 8
                    If: 
                      ID: verbose
                      Compound: 
                        Compound: 
                          FuncCall: 
                            ID: fprintf
                            ExprList: 
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['FILE']
                                ID: stderr
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['char']
                                Constant: string, "%s: %s: extra field of %u bytes ignored\n"
                              ID: progname
                              ID: ifname
                              ID: len
                    Compound: 
                      While: 
                        Constant: int, 1
                        Compound: 
                          Label: while_continue
                            EmptyStatement: 
                          Assignment: =
                            ID: tmp___44
                            ID: len
                          UnaryOp: p--
                            ID: len
                          If: 
                            UnaryOp: !
                              ID: tmp___44
                            Compound: 
                              Goto: while_break
                          If: 
                            BinaryOp: <
                              ID: inptr
                              ID: insize
                            Compound: 
                              Assignment: =
                                ID: tmp___43
                                ID: inptr
                              UnaryOp: p++
                                ID: inptr
                            Compound: 
                              Compound: 
                                FuncCall: 
                                  ID: fill_inbuf
                                  ExprList: 
                                    Constant: int, 0
                      Label: while_break
                        EmptyStatement: 
                If: 
                  BinaryOp: !=
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: flags___0
                      Constant: int, 8
                    Constant: int, 0
                  Compound: 
                    If: 
                      ID: no_name
                      Compound: 
                        Goto: _L___0
                      Compound: 
                        If: 
                          ID: to_stdout
                          Compound: 
                            If: 
                              UnaryOp: !
                                ID: list
                              Compound: 
                                Goto: _L___0
                              Compound: 
                                Goto: _L___1
                          Compound: 
                            Label: _L___1
                              If: 
                                BinaryOp: >
                                  ID: part_nb
                                  Constant: int, 1
                                Compound: 
                                  Label: _L___0
                                    Compound: 
                                      While: 
                                        Constant: int, 1
                                        Compound: 
                                          Label: while_continue___0
                                            EmptyStatement: 
                                          If: 
                                            BinaryOp: <
                                              ID: inptr
                                              ID: insize
                                            Compound: 
                                              Assignment: =
                                                ID: tmp___45
                                                ID: inptr
                                              UnaryOp: p++
                                                ID: inptr
                                              Assignment: =
                                                ID: c
                                                Cast: 
                                                  Typename: None, [], None
                                                    TypeDecl: None, [], None
                                                      IdentifierType: ['char']
                                                  ArrayRef: 
                                                    ID: inbuf
                                                    ID: tmp___45
                                            Compound: 
                                              Compound: 
                                                Assignment: =
                                                  ID: tmp___46
                                                  FuncCall: 
                                                    ID: fill_inbuf
                                                    ExprList: 
                                                      Constant: int, 0
                                                Assignment: =
                                                  ID: c
                                                  Cast: 
                                                    Typename: None, [], None
                                                      TypeDecl: None, [], None
                                                        IdentifierType: ['char']
                                                    ID: tmp___46
                                          If: 
                                            UnaryOp: !
                                              BinaryOp: !=
                                                Cast: 
                                                  Typename: None, [], None
                                                    TypeDecl: None, [], None
                                                      IdentifierType: ['int']
                                                  ID: c
                                                Constant: int, 0
                                            Compound: 
                                              Goto: while_break___0
                                      Label: while_break___0
                                        EmptyStatement: 
                                Compound: 
                                  Compound: 
                                    Assignment: =
                                      ID: tmp___47
                                      FuncCall: 
                                        ID: basename
                                        ExprList: 
                                          ID: ofname
                                    Assignment: =
                                      ID: p
                                      ID: tmp___47
                                    Assignment: =
                                      ID: base
                                      ID: p
                                  Compound: 
                                    While: 
                                      Constant: int, 1
                                      Compound: 
                                        Label: while_continue___1
                                          EmptyStatement: 
                                        If: 
                                          BinaryOp: <
                                            ID: inptr
                                            ID: insize
                                          Compound: 
                                            Assignment: =
                                              ID: tmp___48
                                              ID: inptr
                                            UnaryOp: p++
                                              ID: inptr
                                            Assignment: =
                                              ID: tmp___50
                                              Cast: 
                                                Typename: None, [], None
                                                  TypeDecl: None, [], None
                                                    IdentifierType: ['int']
                                                ArrayRef: 
                                                  ID: inbuf
                                                  ID: tmp___48
                                          Compound: 
                                            Compound: 
                                              Assignment: =
                                                ID: tmp___49
                                                FuncCall: 
                                                  ID: fill_inbuf
                                                  ExprList: 
                                                    Constant: int, 0
                                              Assignment: =
                                                ID: tmp___50
                                                ID: tmp___49
                                        Assignment: =
                                          UnaryOp: *
                                            ID: p
                                          Cast: 
                                            Typename: None, [], None
                                              TypeDecl: None, [], None
                                                IdentifierType: ['char']
                                            ID: tmp___50
                                        Assignment: =
                                          ID: tmp___51
                                          ID: p
                                        UnaryOp: p++
                                          ID: p
                                        If: 
                                          BinaryOp: ==
                                            Cast: 
                                              Typename: None, [], None
                                                TypeDecl: None, [], None
                                                  IdentifierType: ['int']
                                              UnaryOp: *
                                                ID: tmp___51
                                            Constant: int, 0
                                          Compound: 
                                            Goto: while_break___1
                                        If: 
                                          BinaryOp: >=
                                            Cast: 
                                              Typename: None, [], None
                                                TypeDecl: None, [], None
                                                  IdentifierType: ['unsigned', 'long']
                                              ID: p
                                            Cast: 
                                              Typename: None, [], None
                                                TypeDecl: None, [], None
                                                  IdentifierType: ['unsigned', 'long']
                                              BinaryOp: +
                                                ID: ofname
                                                UnaryOp: sizeof
                                                  ID: ofname
                                          Compound: 
                                            Compound: 
                                              FuncCall: 
                                                ID: error
                                                ExprList: 
                                                  Cast: 
                                                    Typename: None, [], None
                                                      PtrDecl: []
                                                        TypeDecl: None, [], None
                                                          IdentifierType: ['char']
                                                    Constant: string, "corrupted input -- file name too large"
                                    Label: while_break___1
                                      EmptyStatement: 
                                  If: 
                                    UnaryOp: !
                                      ID: list
                                    Compound: 
                                      If: 
                                        ID: base
                                        Compound: 
                                          Assignment: =
                                            ID: list
                                            Constant: int, 0
                If: 
                  BinaryOp: !=
                    BinaryOp: &
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: flags___0
                      Constant: int, 16
                    Constant: int, 0
                  Compound: 
                    Compound: 
                      While: 
                        Constant: int, 1
                        Compound: 
                          Label: while_continue___2
                            EmptyStatement: 
                          If: 
                            BinaryOp: <
                              ID: inptr
                              ID: insize
                            Compound: 
                              Assignment: =
                                ID: tmp___52
                                ID: inptr
                              UnaryOp: p++
                                ID: inptr
                              Assignment: =
                                ID: tmp___54
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  ArrayRef: 
                                    ID: inbuf
                                    ID: tmp___52
                            Compound: 
                              Compound: 
                                Assignment: =
                                  ID: tmp___53
                                  FuncCall: 
                                    ID: fill_inbuf
                                    ExprList: 
                                      Constant: int, 0
                                Assignment: =
                                  ID: tmp___54
                                  ID: tmp___53
                          If: 
                            UnaryOp: !
                              BinaryOp: !=
                                ID: tmp___54
                                Constant: int, 0
                            Compound: 
                              Goto: while_break___2
                      Label: while_break___2
                        EmptyStatement: 
                If: 
                  BinaryOp: ==
                    ID: part_nb
                    Constant: int, 1
                  Compound: 
                    Assignment: =
                      ID: header_bytes
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['long']
                        BinaryOp: +
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['unsigned', 'long']
                            ID: inptr
                          BinaryOp: *
                            Constant: unsigned long int, 2UL
                            UnaryOp: sizeof
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['long']
              Compound: 
                Compound: 
                  Assignment: =
                    ID: tmp___59
                    FuncCall: 
                      ID: memcmp
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['void']
                          ID: magic
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['void']
                          Constant: string, "PK\003\004"
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['size_t']
                          Constant: int, 2
                If: 
                  BinaryOp: ==
                    ID: tmp___59
                    Constant: int, 0
                  Compound: 
                    If: 
                      BinaryOp: ==
                        ID: inptr
                        Constant: unsigned int, 2U
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___60
                            FuncCall: 
                              ID: memcmp
                              ExprList: 
                                Cast: 
                                  Typename: None, ['const'], None
                                    PtrDecl: []
                                      TypeDecl: None, ['const'], None
                                        IdentifierType: ['void']
                                  Cast: 
                                    Typename: None, [], None
                                      PtrDecl: []
                                        TypeDecl: None, [], None
                                          IdentifierType: ['char']
                                    ID: inbuf
                                Cast: 
                                  Typename: None, ['const'], None
                                    PtrDecl: []
                                      TypeDecl: None, ['const'], None
                                        IdentifierType: ['void']
                                  Constant: string, "PK\003\004"
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['size_t']
                                  Constant: int, 4
                        If: 
                          BinaryOp: ==
                            ID: tmp___60
                            Constant: int, 0
                          Compound: 
                            Compound: 
                              Assignment: =
                                ID: inptr
                                Constant: unsigned int, 0U
                              Assignment: =
                                ID: work
                                UnaryOp: &
                                  ID: unzip
                              Assignment: =
                                ID: tmp___55
                                FuncCall: 
                                  ID: check_zipfile
                                  ExprList: 
                                    ID: in
                            If: 
                              BinaryOp: !=
                                ID: tmp___55
                                Constant: int, 0
                              Compound: 
                                Return: 
                                  UnaryOp: -
                                    Constant: int, 1
                            Assignment: =
                              ID: last_member
                              Constant: int, 1
                          Compound: 
                            Goto: _L___3
                      Compound: 
                        Goto: _L___3
                  Compound: 
                    Label: _L___3
                      Compound: 
                        Assignment: =
                          ID: tmp___58
                          FuncCall: 
                            ID: memcmp
                            ExprList: 
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['void']
                                ID: magic
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['void']
                                Constant: string, "\037\036"
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['size_t']
                                Constant: int, 2
                    If: 
                      BinaryOp: ==
                        ID: tmp___58
                        Constant: int, 0
                      Compound: 
                        Assignment: =
                          ID: work
                          UnaryOp: &
                            ID: unpack
                        Assignment: =
                          ID: method
                          Constant: int, 2
                      Compound: 
                        Compound: 
                          Assignment: =
                            ID: tmp___57
                            FuncCall: 
                              ID: memcmp
                              ExprList: 
                                Cast: 
                                  Typename: None, ['const'], None
                                    PtrDecl: []
                                      TypeDecl: None, ['const'], None
                                        IdentifierType: ['void']
                                  ID: magic
                                Cast: 
                                  Typename: None, ['const'], None
                                    PtrDecl: []
                                      TypeDecl: None, ['const'], None
                                        IdentifierType: ['void']
                                  Constant: string, "\037\235"
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['size_t']
                                  Constant: int, 2
                        If: 
                          BinaryOp: ==
                            ID: tmp___57
                            Constant: int, 0
                          Compound: 
                            Assignment: =
                              ID: work
                              UnaryOp: &
                                ID: unlzw
                            Assignment: =
                              ID: method
                              Constant: int, 1
                            Assignment: =
                              ID: last_member
                              Constant: int, 1
                          Compound: 
                            Compound: 
                              Assignment: =
                                ID: tmp___56
                                FuncCall: 
                                  ID: memcmp
                                  ExprList: 
                                    Cast: 
                                      Typename: None, ['const'], None
                                        PtrDecl: []
                                          TypeDecl: None, ['const'], None
                                            IdentifierType: ['void']
                                      ID: magic
                                    Cast: 
                                      Typename: None, ['const'], None
                                        PtrDecl: []
                                          TypeDecl: None, ['const'], None
                                            IdentifierType: ['void']
                                      Constant: string, "\037\240"
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['size_t']
                                      Constant: int, 2
                            If: 
                              BinaryOp: ==
                                ID: tmp___56
                                Constant: int, 0
                              Compound: 
                                Assignment: =
                                  ID: work
                                  UnaryOp: &
                                    ID: unlzh
                                Assignment: =
                                  ID: method
                                  Constant: int, 3
                                Assignment: =
                                  ID: last_member
                                  Constant: int, 1
                              Compound: 
                                If: 
                                  ID: force
                                  Compound: 
                                    If: 
                                      ID: to_stdout
                                      Compound: 
                                        If: 
                                          UnaryOp: !
                                            ID: list
                                          Compound: 
                                            Assignment: =
                                              ID: method
                                              Constant: int, 0
                                            Assignment: =
                                              ID: work
                                              UnaryOp: &
                                                ID: copy
                                            Assignment: =
                                              ID: inptr
                                              Constant: unsigned int, 0U
                                            Assignment: =
                                              ID: last_member
                                              Constant: int, 1
        If: 
          BinaryOp: >=
            ID: method
            Constant: int, 0
          Compound: 
            Return: 
              ID: method
        If: 
          BinaryOp: ==
            ID: part_nb
            Constant: int, 1
          Compound: 
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "\n%s: %s: not in gzip format\n"
                  ID: progname
                  ID: ifname
              Assignment: =
                ID: exit_code
                Constant: int, 1
            Return: 
              UnaryOp: -
                Constant: int, 1
          Compound: 
            If: 
              UnaryOp: !
                ID: quiet
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "\n%s: %s: decompression OK, trailing garbage ignored\n"
                      ID: progname
                      ID: ifname
            If: 
              BinaryOp: ==
                ID: exit_code
                Constant: int, 0
              Compound: 
                Assignment: =
                  ID: exit_code
                  Constant: int, 2
            Return: 
              UnaryOp: -
                Constant: int, 2
  Decl: first_time, [], [], ['static'], []
    TypeDecl: first_time, [], None
      IdentifierType: ['int']
    Constant: int, 1
  Decl: methods, [], [], ['static'], []
    ArrayDecl: []
      PtrDecl: []
        TypeDecl: methods, [], None
          IdentifierType: ['char']
      Constant: int, 9
    InitList: 
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "store"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "compr"
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "pack "
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "lzh  "
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ""
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ""
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ""
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, ""
      Cast: 
        Typename: None, [], None
          PtrDecl: []
            TypeDecl: None, [], None
              IdentifierType: ['char']
        Constant: string, "defla"
  FuncDef: 
    Decl: do_list, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: ifd___0, [], [], [], []
            TypeDecl: ifd___0, [], None
              IdentifierType: ['int']
          Decl: method___0, [], [], [], []
            TypeDecl: method___0, [], None
              IdentifierType: ['int']
        TypeDecl: do_list, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: crc___1, [], [], [], []
        TypeDecl: crc___1, [], None
          IdentifierType: ['ulg']
      Decl: date, [], [], [], []
        PtrDecl: []
          TypeDecl: date, [], None
            IdentifierType: ['char']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['__off_t']
      Decl: buf, [], [], [], []
        ArrayDecl: []
          TypeDecl: buf, [], None
            IdentifierType: ['uch']
          Constant: int, 8
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['ssize_t']
      Decl: tmp___1, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___1, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp9, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp9, [], None
            IdentifierType: ['void']
      Compound: 
        If: 
          ID: first_time
          Compound: 
            If: 
              BinaryOp: >=
                ID: method___0
                Constant: int, 0
              Compound: 
                Assignment: =
                  ID: first_time
                  Constant: int, 0
                If: 
                  ID: verbose
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: printf
                        ExprList: 
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "method  crc     date  time  "
                If: 
                  UnaryOp: !
                    ID: quiet
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: printf
                        ExprList: 
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "compressed  uncompr. ratio uncompressed_name\n"
              Compound: 
                Goto: _L
          Compound: 
            Label: _L
              If: 
                BinaryOp: <
                  ID: method___0
                  Constant: int, 0
                Compound: 
                  If: 
                    BinaryOp: <=
                      ID: total_in
                      Constant: long int, 0L
                    Compound: 
                      Return: 
                    Compound: 
                      If: 
                        BinaryOp: <=
                          ID: total_out
                          Constant: long int, 0L
                        Compound: 
                          Return: 
                  If: 
                    ID: verbose
                    Compound: 
                      Compound: 
                        FuncCall: 
                          ID: printf
                          ExprList: 
                            Cast: 
                              Typename: None, ['const'], None
                                PtrDecl: []
                                  TypeDecl: None, ['const'], None
                                    IdentifierType: ['char']
                              Constant: string, "                            %9lu %9lu "
                            ID: total_in
                            ID: total_out
                    Compound: 
                      If: 
                        UnaryOp: !
                          ID: quiet
                        Compound: 
                          Compound: 
                            FuncCall: 
                              ID: printf
                              ExprList: 
                                Cast: 
                                  Typename: None, ['const'], None
                                    PtrDecl: []
                                      TypeDecl: None, ['const'], None
                                        IdentifierType: ['char']
                                  Constant: string, "%9ld %9ld "
                                ID: total_in
                                ID: total_out
                  Compound: 
                    FuncCall: 
                      ID: display_ratio
                      ExprList: 
                        BinaryOp: -
                          ID: total_out
                          BinaryOp: -
                            ID: total_in
                            ID: header_bytes
                        ID: total_out
                        ID: stdout
                    FuncCall: 
                      ID: printf
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          Constant: string, " (totals)\n"
                  Return: 
        Assignment: =
          ID: crc___1
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['ulg']
            UnaryOp: ~
              Constant: int, 0
        Assignment: =
          ID: bytes_out
          UnaryOp: -
            Constant: long int, 1L
        Assignment: =
          ID: bytes_in
          ID: ifile_size
        If: 
          BinaryOp: ==
            ID: method___0
            Constant: int, 8
          Compound: 
            If: 
              UnaryOp: !
                ID: last_member
              Compound: 
                Compound: 
                  Assignment: =
                    ID: tmp
                    FuncCall: 
                      ID: lseek
                      ExprList: 
                        ID: ifd___0
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['off_t']
                          UnaryOp: -
                            Constant: int, 8
                        Constant: int, 2
                  Assignment: =
                    ID: bytes_in
                    ID: tmp
                If: 
                  BinaryOp: !=
                    ID: bytes_in
                    UnaryOp: -
                      Constant: long int, 1L
                  Compound: 
                    Compound: 
                      Assignment: +=
                        ID: bytes_in
                        Constant: long int, 8L
                      Assignment: =
                        ID: tmp___0
                        FuncCall: 
                          ID: read
                          ExprList: 
                            ID: ifd___0
                            Cast: 
                              Typename: None, [], None
                                PtrDecl: []
                                  TypeDecl: None, [], None
                                    IdentifierType: ['void']
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['char']
                                ID: buf
                            UnaryOp: sizeof
                              ID: buf
                    If: 
                      BinaryOp: !=
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['unsigned', 'long']
                          ID: tmp___0
                        UnaryOp: sizeof
                          ID: buf
                      Compound: 
                        Compound: 
                          FuncCall: 
                            ID: read_error
                    Assignment: =
                      ID: crc___1
                      BinaryOp: |
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['ulg']
                          BinaryOp: |
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['int']
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['ush']
                                ArrayRef: 
                                  ID: buf
                                  Constant: int, 0
                            BinaryOp: <<
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['ush']
                                  ArrayRef: 
                                    ID: buf
                                    Constant: int, 1
                              Constant: int, 8
                        BinaryOp: <<
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ulg']
                            BinaryOp: |
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['ush']
                                  UnaryOp: *
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: buf
                                        Constant: int, 2
                                      Constant: int, 0
                              BinaryOp: <<
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ush']
                                    UnaryOp: *
                                      BinaryOp: +
                                        BinaryOp: +
                                          ID: buf
                                          Constant: int, 2
                                        Constant: int, 1
                                Constant: int, 8
                          Constant: int, 16
                    Assignment: =
                      ID: bytes_out
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['long']
                        BinaryOp: |
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['ulg']
                            BinaryOp: |
                              Cast: 
                                Typename: None, [], None
                                  TypeDecl: None, [], None
                                    IdentifierType: ['int']
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['ush']
                                  UnaryOp: *
                                    BinaryOp: +
                                      BinaryOp: +
                                        ID: buf
                                        Constant: int, 4
                                      Constant: int, 0
                              BinaryOp: <<
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ush']
                                    UnaryOp: *
                                      BinaryOp: +
                                        BinaryOp: +
                                          ID: buf
                                          Constant: int, 4
                                        Constant: int, 1
                                Constant: int, 8
                          BinaryOp: <<
                            Cast: 
                              Typename: None, [], None
                                TypeDecl: None, [], None
                                  IdentifierType: ['ulg']
                              BinaryOp: |
                                Cast: 
                                  Typename: None, [], None
                                    TypeDecl: None, [], None
                                      IdentifierType: ['int']
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['ush']
                                    UnaryOp: *
                                      BinaryOp: +
                                        BinaryOp: +
                                          BinaryOp: +
                                            ID: buf
                                            Constant: int, 4
                                          Constant: int, 2
                                        Constant: int, 0
                                BinaryOp: <<
                                  Cast: 
                                    Typename: None, [], None
                                      TypeDecl: None, [], None
                                        IdentifierType: ['int']
                                    Cast: 
                                      Typename: None, [], None
                                        TypeDecl: None, [], None
                                          IdentifierType: ['ush']
                                      UnaryOp: *
                                        BinaryOp: +
                                          BinaryOp: +
                                            BinaryOp: +
                                              ID: buf
                                              Constant: int, 4
                                            Constant: int, 2
                                          Constant: int, 1
                                  Constant: int, 8
                            Constant: int, 16
        Compound: 
          Assignment: =
            ID: tmp___1
            FuncCall: 
              ID: ctime
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['time_t']
                  UnaryOp: &
                    ID: time_stamp
          Assignment: =
            ID: date
            BinaryOp: +
              ID: tmp___1
              Constant: int, 4
          Assignment: =
            UnaryOp: *
              BinaryOp: +
                ID: date
                Constant: int, 12
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['char']
              Constant: char, '\000'
        If: 
          ID: verbose
          Compound: 
            Compound: 
              FuncCall: 
                ID: printf
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "%5s %08lx %11s "
                  ArrayRef: 
                    ID: methods
                    ID: method___0
                  ID: crc___1
                  ID: date
        Compound: 
          FuncCall: 
            ID: printf
            ExprList: 
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, "%9ld %9ld "
              ID: bytes_in
              ID: bytes_out
        If: 
          BinaryOp: ==
            ID: bytes_in
            UnaryOp: -
              Constant: long int, 1L
          Compound: 
            Assignment: =
              ID: total_in
              UnaryOp: -
                Constant: long int, 1L
            Assignment: =
              ID: header_bytes
              Constant: long int, 0L
            Assignment: =
              ID: bytes_out
              ID: header_bytes
            Assignment: =
              ID: bytes_in
              ID: bytes_out
          Compound: 
            If: 
              BinaryOp: >=
                ID: total_in
                Constant: long int, 0L
              Compound: 
                Assignment: +=
                  ID: total_in
                  ID: bytes_in
        If: 
          BinaryOp: ==
            ID: bytes_out
            UnaryOp: -
              Constant: long int, 1L
          Compound: 
            Assignment: =
              ID: total_out
              UnaryOp: -
                Constant: long int, 1L
            Assignment: =
              ID: header_bytes
              Constant: long int, 0L
            Assignment: =
              ID: bytes_out
              ID: header_bytes
            Assignment: =
              ID: bytes_in
              ID: bytes_out
          Compound: 
            If: 
              BinaryOp: >=
                ID: total_out
                Constant: long int, 0L
              Compound: 
                Assignment: +=
                  ID: total_out
                  ID: bytes_out
        Compound: 
          FuncCall: 
            ID: display_ratio
            ExprList: 
              BinaryOp: -
                ID: bytes_out
                BinaryOp: -
                  ID: bytes_in
                  ID: header_bytes
              ID: bytes_out
              ID: stdout
          FuncCall: 
            ID: printf
            ExprList: 
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                Constant: string, " %s\n"
              ID: ofname
        Return: 
  FuncDef: 
    Decl: same_file, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: stat1, [], [], [], []
            PtrDecl: []
              TypeDecl: stat1, [], None
                Struct: stat
          Decl: stat2, [], [], [], []
            PtrDecl: []
              TypeDecl: stat2, [], None
                Struct: stat
        TypeDecl: same_file, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Compound: 
        If: 
          BinaryOp: ==
            StructRef: ->
              ID: stat1
              ID: st_ino
            StructRef: ->
              ID: stat2
              ID: st_ino
          Compound: 
            If: 
              BinaryOp: ==
                StructRef: ->
                  ID: stat1
                  ID: st_dev
                StructRef: ->
                  ID: stat2
                  ID: st_dev
              Compound: 
                Assignment: =
                  ID: tmp
                  Constant: int, 1
              Compound: 
                Assignment: =
                  ID: tmp
                  Constant: int, 0
          Compound: 
            Assignment: =
              ID: tmp
              Constant: int, 0
        Return: 
          ID: tmp
  FuncDef: 
    Decl: name_too_long, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: name, [], [], [], []
            PtrDecl: []
              TypeDecl: name, [], None
                IdentifierType: ['char']
          Decl: statb, [], [], [], []
            PtrDecl: []
              TypeDecl: statb, [], None
                Struct: stat
        TypeDecl: name_too_long, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: s, [], [], [], []
        TypeDecl: s, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: c, [], [], [], []
        TypeDecl: c, [], None
          IdentifierType: ['char']
      Decl: tstat, [], [], [], []
        TypeDecl: tstat, [], None
          Struct: stat
      Decl: res, [], [], [], []
        TypeDecl: res, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp12, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp12, [], None
            IdentifierType: ['void']
      Compound: 
        Compound: 
          Assignment: =
            ID: tmp
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              FuncCall: 
                ID: strlen
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: name
          Assignment: =
            ID: s
            ID: tmp
          Assignment: =
            ID: c
            UnaryOp: *
              BinaryOp: +
                ID: name
                BinaryOp: -
                  ID: s
                  Constant: int, 1
          Assignment: =
            ID: tstat
            UnaryOp: *
              ID: statb
          Assignment: =
            UnaryOp: *
              BinaryOp: +
                ID: name
                BinaryOp: -
                  ID: s
                  Constant: int, 1
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['char']
              Constant: char, '\000'
          Assignment: =
            ID: tmp___0
            FuncCall: 
              ID: stat
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: name
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        Struct: stat
                  UnaryOp: &
                    ID: tstat
        If: 
          BinaryOp: ==
            ID: tmp___0
            Constant: int, 0
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___1
                FuncCall: 
                  ID: same_file
                  ExprList: 
                    ID: statb
                    UnaryOp: &
                      ID: tstat
            If: 
              ID: tmp___1
              Compound: 
                Assignment: =
                  ID: tmp___2
                  Constant: int, 1
              Compound: 
                Assignment: =
                  ID: tmp___2
                  Constant: int, 0
          Compound: 
            Assignment: =
              ID: tmp___2
              Constant: int, 0
        Assignment: =
          ID: res
          ID: tmp___2
        Assignment: =
          UnaryOp: *
            BinaryOp: +
              ID: name
              BinaryOp: -
                ID: s
                Constant: int, 1
          ID: c
        Return: 
          ID: res
  FuncDef: 
    Decl: shorten_name, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: name, [], [], [], []
            PtrDecl: []
              TypeDecl: name, [], None
                IdentifierType: ['char']
        TypeDecl: shorten_name, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['int']
      Decl: trunc, [], [], [], []
        PtrDecl: []
          TypeDecl: trunc, [], None
            IdentifierType: ['char']
      Decl: plen, [], [], [], []
        TypeDecl: plen, [], None
          IdentifierType: ['int']
      Decl: min_part, [], [], [], []
        TypeDecl: min_part, [], None
          IdentifierType: ['int']
      Decl: p, [], [], [], []
        PtrDecl: []
          TypeDecl: p, [], None
            IdentifierType: ['char']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___0, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp11, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp11, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp12, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp12, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp13, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp13, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp14, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp14, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp15, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp15, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: trunc
            Cast: 
              Typename: None, [], None
                PtrDecl: []
                  TypeDecl: None, [], None
                    IdentifierType: ['char']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Assignment: =
            ID: min_part
            Constant: int, 3
          Assignment: =
            ID: len
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['int']
              FuncCall: 
                ID: strlen
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: name
        If: 
          ID: decompress
          Compound: 
            If: 
              BinaryOp: <=
                ID: len
                Constant: int, 1
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: error
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        Constant: string, "name too short"
            Assignment: =
              UnaryOp: *
                BinaryOp: +
                  ID: name
                  BinaryOp: -
                    ID: len
                    Constant: int, 1
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['char']
                Constant: char, '\000'
            Return: 
        Compound: 
          Assignment: =
            ID: p
            FuncCall: 
              ID: get_suffix
              ExprList: 
                ID: name
        If: 
          BinaryOp: ==
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: p
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: error
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    Constant: string, "can\'t recover suffix\n"
        Assignment: =
          UnaryOp: *
            ID: p
          Cast: 
            Typename: None, [], None
              TypeDecl: None, [], None
                IdentifierType: ['char']
            Constant: char, '\000'
        Assignment: =
          ID: save_orig_name
          Constant: int, 1
        If: 
          BinaryOp: >
            ID: len
            Constant: int, 4
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp
                FuncCall: 
                  ID: strcmp
                  ExprList: 
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      BinaryOp: -
                        ID: p
                        Constant: int, 4
                    Constant: string, ".tar"
            If: 
              BinaryOp: ==
                ID: tmp
                Constant: int, 0
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: strcpy
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        BinaryOp: -
                          ID: p
                          Constant: int, 4
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, ".tgz"
                Return: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: p
                  FuncCall: 
                    ID: strrchr
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: name
                      Constant: char, '/'
              If: 
                ID: p
                Compound: 
                  UnaryOp: p++
                    ID: p
                Compound: 
                  Assignment: =
                    ID: p
                    ID: name
              Compound: 
                While: 
                  Constant: int, 1
                  Compound: 
                    Label: while_continue___0
                      EmptyStatement: 
                    If: 
                      UnaryOp: !
                        UnaryOp: *
                          ID: p
                      Compound: 
                        Goto: while_break___0
                    Compound: 
                      Assignment: =
                        ID: plen
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['int']
                          FuncCall: 
                            ID: strcspn
                            ExprList: 
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['char']
                                ID: p
                              Constant: string, "."
                      Assignment: +=
                        ID: p
                        ID: plen
                    If: 
                      BinaryOp: >
                        ID: plen
                        ID: min_part
                      Compound: 
                        Assignment: =
                          ID: trunc
                          BinaryOp: -
                            ID: p
                            Constant: int, 1
                    If: 
                      UnaryOp: *
                        ID: p
                      Compound: 
                        UnaryOp: p++
                          ID: p
                Label: while_break___0
                  EmptyStatement: 
              If: 
                BinaryOp: ==
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'long']
                    ID: trunc
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['unsigned', 'long']
                    Cast: 
                      Typename: None, [], None
                        PtrDecl: []
                          TypeDecl: None, [], None
                            IdentifierType: ['void']
                      Constant: int, 0
                Compound: 
                  UnaryOp: p--
                    ID: min_part
                  If: 
                    UnaryOp: !
                      BinaryOp: !=
                        ID: min_part
                        Constant: int, 0
                    Compound: 
                      Goto: while_break
                Compound: 
                  Goto: while_break
          Label: while_break
            EmptyStatement: 
        If: 
          BinaryOp: !=
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: trunc
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Compound: 
              While: 
                Constant: int, 1
                Compound: 
                  Label: while_continue___1
                    EmptyStatement: 
                  Assignment: =
                    UnaryOp: *
                      BinaryOp: +
                        ID: trunc
                        Constant: int, 0
                    UnaryOp: *
                      BinaryOp: +
                        ID: trunc
                        Constant: int, 1
                  Assignment: =
                    ID: tmp___0
                    ID: trunc
                  UnaryOp: p++
                    ID: trunc
                  If: 
                    UnaryOp: !
                      UnaryOp: *
                        ID: tmp___0
                    Compound: 
                      Goto: while_break___1
              Label: while_break___1
                EmptyStatement: 
            UnaryOp: p--
              ID: trunc
          Compound: 
            Compound: 
              Assignment: =
                ID: trunc
                FuncCall: 
                  ID: strrchr
                  ExprList: 
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      ID: name
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['int']
                      UnaryOp: *
                        BinaryOp: +
                          Constant: string, "."
                          Constant: int, 0
            If: 
              BinaryOp: ==
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'long']
                  ID: trunc
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['unsigned', 'long']
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    Constant: int, 0
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: error
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                        Constant: string, "internal error in shorten_name"
            If: 
              BinaryOp: ==
                Cast: 
                  Typename: None, [], None
                    TypeDecl: None, [], None
                      IdentifierType: ['int']
                  UnaryOp: *
                    BinaryOp: +
                      ID: trunc
                      Constant: int, 1
                Constant: int, 0
              Compound: 
                UnaryOp: p--
                  ID: trunc
        Compound: 
          FuncCall: 
            ID: strcpy
            ExprList: 
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['char']
                ID: trunc
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                ID: z_suffix
        Return: 
  FuncDef: 
    Decl: check_ofname, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: check_ofname, [], None
          IdentifierType: ['int']
    Compound: 
      Decl: ostat, [], [], [], []
        TypeDecl: ostat, [], None
          Struct: stat
      Decl: tmp, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp, [], None
            IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        PtrDecl: []
          TypeDecl: tmp___0, [], None
            IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['int']
      Decl: tmp___3, [], [], [], []
        TypeDecl: tmp___3, [], None
          IdentifierType: ['int']
      Decl: tmp___4, ['const'], [], [], []
        PtrDecl: []
          TypeDecl: tmp___4, ['const'], None
            IdentifierType: ['char']
      Decl: tmp___5, [], [], [], []
        TypeDecl: tmp___5, [], None
          IdentifierType: ['int']
      Decl: tmp___6, [], [], [], []
        TypeDecl: tmp___6, [], None
          IdentifierType: ['int']
      Decl: response, [], [], [], []
        ArrayDecl: []
          TypeDecl: response, [], None
            IdentifierType: ['char']
          Constant: int, 80
      Decl: tmp___7, [], [], [], []
        TypeDecl: tmp___7, [], None
          IdentifierType: ['int']
      Decl: tmp___8, [], [], [], []
        TypeDecl: tmp___8, [], None
          IdentifierType: ['int']
      Decl: tmp___10, [], [], [], []
        TypeDecl: tmp___10, [], None
          IdentifierType: ['int']
      Decl: tmp___11, ['const'], [], [], []
        PtrDecl: []
          PtrDecl: []
            TypeDecl: tmp___11, ['const'], None
              IdentifierType: ['unsigned', 'short']
      Decl: tmp___12, [], [], [], []
        TypeDecl: tmp___12, [], None
          IdentifierType: ['int']
      Decl: __cil_tmp16, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp16, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp17, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp17, [], None
            IdentifierType: ['void']
      Decl: __cil_tmp18, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp18, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp19, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp19, [], None
            IdentifierType: ['char']
      Decl: __cil_tmp20, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp20, [], None
            IdentifierType: ['char']
      Compound: 
        Compound: 
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: __errno_location
          Assignment: =
            UnaryOp: *
              ID: tmp
            Constant: int, 0
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: tmp___1
                  FuncCall: 
                    ID: stat
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: ofname
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              Struct: stat
                        UnaryOp: &
                          ID: ostat
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    ID: tmp___1
                    Constant: int, 0
                Compound: 
                  Goto: while_break
              Compound: 
                Assignment: =
                  ID: tmp___0
                  FuncCall: 
                    ID: __errno_location
              If: 
                BinaryOp: !=
                  UnaryOp: *
                    ID: tmp___0
                  Constant: int, 36
                Compound: 
                  Return: 
                    Constant: int, 0
              Compound: 
                FuncCall: 
                  ID: shorten_name
                  ExprList: 
                    ID: ofname
          Label: while_break
            EmptyStatement: 
        If: 
          UnaryOp: !
            ID: decompress
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___3
                FuncCall: 
                  ID: name_too_long
                  ExprList: 
                    ID: ofname
                    UnaryOp: &
                      ID: ostat
            If: 
              ID: tmp___3
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: shorten_name
                    ExprList: 
                      ID: ofname
                  Assignment: =
                    ID: tmp___2
                    FuncCall: 
                      ID: stat
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: ofname
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                Struct: stat
                          UnaryOp: &
                            ID: ostat
                If: 
                  BinaryOp: !=
                    ID: tmp___2
                    Constant: int, 0
                  Compound: 
                    Return: 
                      Constant: int, 0
        Compound: 
          Assignment: =
            ID: tmp___6
            FuncCall: 
              ID: same_file
              ExprList: 
                UnaryOp: &
                  ID: istat
                UnaryOp: &
                  ID: ostat
        If: 
          ID: tmp___6
          Compound: 
            Compound: 
              Assignment: =
                ID: tmp___5
                FuncCall: 
                  ID: strcmp
                  ExprList: 
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      ID: ifname
                    Cast: 
                      Typename: None, ['const'], None
                        PtrDecl: []
                          TypeDecl: None, ['const'], None
                            IdentifierType: ['char']
                      ID: ofname
            If: 
              BinaryOp: ==
                ID: tmp___5
                Constant: int, 0
              Compound: 
                If: 
                  ID: decompress
                  Compound: 
                    Assignment: =
                      ID: tmp___4
                      Constant: string, "de"
                  Compound: 
                    Assignment: =
                      ID: tmp___4
                      Constant: string, ""
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "%s: %s: cannot %scompress onto itself\n"
                      ID: progname
                      ID: ifname
                      ID: tmp___4
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "%s: %s and %s are the same file\n"
                      ID: progname
                      ID: ifname
                      ID: ofname
            Assignment: =
              ID: exit_code
              Constant: int, 1
            Return: 
              Constant: int, 1
        If: 
          UnaryOp: !
            ID: force
          Compound: 
            Compound: 
              FuncCall: 
                ID: strcpy
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                    ID: response
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "n"
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "%s: %s already exists;"
                  ID: progname
                  ID: ofname
            If: 
              ID: foreground
              Compound: 
                Compound: 
                  Assignment: =
                    ID: tmp___7
                    FuncCall: 
                      ID: fileno
                      ExprList: 
                        ID: stdin
                  Assignment: =
                    ID: tmp___8
                    FuncCall: 
                      ID: isatty
                      ExprList: 
                        ID: tmp___7
                If: 
                  ID: tmp___8
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, " do you wish to overwrite (y or n)? "
                      FuncCall: 
                        ID: fflush
                        ExprList: 
                          ID: stderr
                      FuncCall: 
                        ID: fgets
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['char']
                            ID: response
                          Cast: 
                            Typename: None, [], None
                              TypeDecl: None, [], None
                                IdentifierType: ['int']
                            BinaryOp: -
                              UnaryOp: sizeof
                                ID: response
                              Constant: unsigned long int, 1UL
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stdin
            Compound: 
              Assignment: =
                ID: tmp___11
                FuncCall: 
                  ID: __ctype_b_loc
            If: 
              BinaryOp: &
                Cast: 
                  Typename: None, ['const'], None
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['int']
                  UnaryOp: *
                    BinaryOp: +
                      UnaryOp: *
                        ID: tmp___11
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: response
                          Constant: int, 0
                Constant: int, 256
              Compound: 
                Assignment: =
                  ID: tmp___10
                  BinaryOp: +
                    BinaryOp: -
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ArrayRef: 
                          ID: response
                          Constant: int, 0
                      Constant: int, 65
                    Constant: int, 97
              Compound: 
                Assignment: =
                  ID: tmp___10
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    ArrayRef: 
                      ID: response
                      Constant: int, 0
            If: 
              BinaryOp: !=
                ID: tmp___10
                Constant: int, 121
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "\tnot overwritten\n"
                If: 
                  BinaryOp: ==
                    ID: exit_code
                    Constant: int, 0
                  Compound: 
                    Assignment: =
                      ID: exit_code
                      Constant: int, 2
                Return: 
                  Constant: int, 1
        Compound: 
          FuncCall: 
            ID: chmod
            ExprList: 
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                ID: ofname
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['__mode_t']
                Constant: int, 511
          Assignment: =
            ID: tmp___12
            FuncCall: 
              ID: unlink
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: ofname
        If: 
          ID: tmp___12
          Compound: 
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "%s: "
                  ID: progname
              FuncCall: 
                ID: perror
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: ofname
              Assignment: =
                ID: exit_code
                Constant: int, 1
            Return: 
              Constant: int, 1
        Return: 
          Constant: int, 0
  FuncDef: 
    Decl: reset_times, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: name, [], [], [], []
            PtrDecl: []
              TypeDecl: name, [], None
                IdentifierType: ['char']
          Decl: statb, [], [], [], []
            PtrDecl: []
              TypeDecl: statb, [], None
                Struct: stat
        TypeDecl: reset_times, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: timep, [], [], [], []
        TypeDecl: timep, [], None
          Struct: utimbuf
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Compound: 
        Compound: 
          Assignment: =
            StructRef: .
              ID: timep
              ID: actime
            StructRef: .
              StructRef: ->
                ID: statb
                ID: st_atim
              ID: tv_sec
          Assignment: =
            StructRef: .
              ID: timep
              ID: modtime
            StructRef: .
              StructRef: ->
                ID: statb
                ID: st_mtim
              ID: tv_sec
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: utime
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: name
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        Struct: utimbuf
                  UnaryOp: &
                    ID: timep
        If: 
          ID: tmp
          Compound: 
            If: 
              UnaryOp: !
                BinaryOp: ==
                  BinaryOp: &
                    StructRef: ->
                      ID: statb
                      ID: st_mode
                    Constant: unsigned int, 61440U
                  Constant: unsigned int, 16384U
              Compound: 
                If: 
                  UnaryOp: !
                    ID: quiet
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: fprintf
                        ExprList: 
                          Cast: 
                            Typename: None, [], None
                              PtrDecl: []
                                TypeDecl: None, [], None
                                  IdentifierType: ['FILE']
                            ID: stderr
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            Constant: string, "%s: "
                          ID: progname
                If: 
                  BinaryOp: ==
                    ID: exit_code
                    Constant: int, 0
                  Compound: 
                    Assignment: =
                      ID: exit_code
                      Constant: int, 2
                If: 
                  UnaryOp: !
                    ID: quiet
                  Compound: 
                    Compound: 
                      FuncCall: 
                        ID: perror
                        ExprList: 
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            ID: ofname
        Return: 
  FuncDef: 
    Decl: copy_stat, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: ifstat, [], [], [], []
            PtrDecl: []
              TypeDecl: ifstat, [], None
                Struct: stat
        TypeDecl: copy_stat, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Compound: 
        If: 
          ID: decompress
          Compound: 
            If: 
              BinaryOp: !=
                ID: time_stamp
                Constant: long int, 0L
              Compound: 
                If: 
                  BinaryOp: !=
                    StructRef: .
                      StructRef: ->
                        ID: ifstat
                        ID: st_mtim
                      ID: tv_sec
                    ID: time_stamp
                  Compound: 
                    Assignment: =
                      StructRef: .
                        StructRef: ->
                          ID: ifstat
                          ID: st_mtim
                        ID: tv_sec
                      ID: time_stamp
                    If: 
                      BinaryOp: >
                        ID: verbose
                        Constant: int, 1
                      Compound: 
                        Compound: 
                          FuncCall: 
                            ID: fprintf
                            ExprList: 
                              Cast: 
                                Typename: None, [], None
                                  PtrDecl: []
                                    TypeDecl: None, [], None
                                      IdentifierType: ['FILE']
                                ID: stderr
                              Cast: 
                                Typename: None, ['const'], None
                                  PtrDecl: []
                                    TypeDecl: None, ['const'], None
                                      IdentifierType: ['char']
                                Constant: string, "%s: time stamp restored\n"
                              ID: ofname
        Compound: 
          FuncCall: 
            ID: reset_times
            ExprList: 
              ID: ofname
              ID: ifstat
          Assignment: =
            ID: tmp
            FuncCall: 
              ID: chmod
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: ofname
                BinaryOp: &
                  StructRef: ->
                    ID: ifstat
                    ID: st_mode
                  Constant: unsigned int, 4095U
        If: 
          ID: tmp
          Compound: 
            If: 
              UnaryOp: !
                ID: quiet
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "%s: "
                      ID: progname
            If: 
              BinaryOp: ==
                ID: exit_code
                Constant: int, 0
              Compound: 
                Assignment: =
                  ID: exit_code
                  Constant: int, 2
            If: 
              UnaryOp: !
                ID: quiet
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: perror
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: ofname
        Compound: 
          FuncCall: 
            ID: chown
            ExprList: 
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                ID: ofname
              StructRef: ->
                ID: ifstat
                ID: st_uid
              StructRef: ->
                ID: ifstat
                ID: st_gid
          Assignment: =
            ID: remove_ofname
            Constant: int, 0
          FuncCall: 
            ID: chmod
            ExprList: 
              Cast: 
                Typename: None, ['const'], None
                  PtrDecl: []
                    TypeDecl: None, ['const'], None
                      IdentifierType: ['char']
                ID: ifname
              Cast: 
                Typename: None, [], None
                  TypeDecl: None, [], None
                    IdentifierType: ['__mode_t']
                Constant: int, 511
          Assignment: =
            ID: tmp___0
            FuncCall: 
              ID: unlink
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: ifname
        If: 
          ID: tmp___0
          Compound: 
            If: 
              UnaryOp: !
                ID: quiet
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: fprintf
                    ExprList: 
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['FILE']
                        ID: stderr
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        Constant: string, "%s: "
                      ID: progname
            If: 
              BinaryOp: ==
                ID: exit_code
                Constant: int, 0
              Compound: 
                Assignment: =
                  ID: exit_code
                  Constant: int, 2
            If: 
              UnaryOp: !
                ID: quiet
              Compound: 
                Compound: 
                  FuncCall: 
                    ID: perror
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        ID: ifname
        Return: 
  FuncDef: 
    Decl: treat_dir, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: dir, [], [], [], []
            PtrDecl: []
              TypeDecl: dir, [], None
                IdentifierType: ['char']
        TypeDecl: treat_dir, [], None
          IdentifierType: ['void']
    Compound: 
      Decl: dp, [], [], [], []
        PtrDecl: []
          TypeDecl: dp, [], None
            IdentifierType: ['dir_type']
      Decl: dirp, [], [], [], []
        PtrDecl: []
          TypeDecl: dirp, [], None
            IdentifierType: ['DIR']
      Decl: nbuf, [], [], [], []
        ArrayDecl: []
          TypeDecl: nbuf, [], None
            IdentifierType: ['char']
          Constant: int, 1024
      Decl: len, [], [], [], []
        TypeDecl: len, [], None
          IdentifierType: ['int']
      Decl: tmp, [], [], [], []
        TypeDecl: tmp, [], None
          IdentifierType: ['int']
      Decl: tmp___0, [], [], [], []
        TypeDecl: tmp___0, [], None
          IdentifierType: ['int']
      Decl: tmp___1, [], [], [], []
        TypeDecl: tmp___1, [], None
          IdentifierType: ['int']
      Decl: tmp___2, [], [], [], []
        TypeDecl: tmp___2, [], None
          IdentifierType: ['size_t']
      Decl: __cil_tmp11, [], [], [], []
        PtrDecl: []
          TypeDecl: __cil_tmp11, [], None
            IdentifierType: ['void']
      Compound: 
        Compound: 
          Assignment: =
            ID: dirp
            FuncCall: 
              ID: opendir
              ExprList: 
                Cast: 
                  Typename: None, ['const'], None
                    PtrDecl: []
                      TypeDecl: None, ['const'], None
                        IdentifierType: ['char']
                  ID: dir
        If: 
          BinaryOp: ==
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: dirp
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: fprintf
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['FILE']
                    ID: stderr
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    Constant: string, "%s: %s unreadable\n"
                  ID: progname
                  ID: dir
              Assignment: =
                ID: exit_code
                Constant: int, 1
            Return: 
        Compound: 
          While: 
            Constant: int, 1
            Compound: 
              Label: while_continue
                EmptyStatement: 
              Compound: 
                Assignment: =
                  ID: dp
                  FuncCall: 
                    ID: readdir
                    ExprList: 
                      ID: dirp
              If: 
                UnaryOp: !
                  BinaryOp: !=
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      ID: dp
                    Cast: 
                      Typename: None, [], None
                        TypeDecl: None, [], None
                          IdentifierType: ['unsigned', 'long']
                      Cast: 
                        Typename: None, [], None
                          PtrDecl: []
                            TypeDecl: None, [], None
                              IdentifierType: ['void']
                        Constant: int, 0
                Compound: 
                  Goto: while_break
              Compound: 
                Assignment: =
                  ID: tmp
                  FuncCall: 
                    ID: strcmp
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        StructRef: ->
                          ID: dp
                          ID: d_name
                      Constant: string, "."
              If: 
                BinaryOp: ==
                  ID: tmp
                  Constant: int, 0
                Compound: 
                  Goto: while_continue
                Compound: 
                  Compound: 
                    Assignment: =
                      ID: tmp___0
                      FuncCall: 
                        ID: strcmp
                        ExprList: 
                          Cast: 
                            Typename: None, ['const'], None
                              PtrDecl: []
                                TypeDecl: None, ['const'], None
                                  IdentifierType: ['char']
                            StructRef: ->
                              ID: dp
                              ID: d_name
                          Constant: string, ".."
                  If: 
                    BinaryOp: ==
                      ID: tmp___0
                      Constant: int, 0
                    Compound: 
                      Goto: while_continue
              Compound: 
                Assignment: =
                  ID: len
                  Cast: 
                    Typename: None, [], None
                      TypeDecl: None, [], None
                        IdentifierType: ['int']
                    FuncCall: 
                      ID: strlen
                      ExprList: 
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: dir
                Assignment: =
                  ID: tmp___2
                  FuncCall: 
                    ID: strlen
                    ExprList: 
                      Cast: 
                        Typename: None, ['const'], None
                          PtrDecl: []
                            TypeDecl: None, ['const'], None
                              IdentifierType: ['char']
                        StructRef: ->
                          ID: dp
                          ID: d_name
              If: 
                BinaryOp: <
                  BinaryOp: +
                    BinaryOp: +
                      ID: len
                      Cast: 
                        Typename: None, [], None
                          TypeDecl: None, [], None
                            IdentifierType: ['int']
                        ID: tmp___2
                    Constant: int, 1
                  Constant: int, 1023
                Compound: 
                  Compound: 
                    FuncCall: 
                      ID: strcpy
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                          ID: nbuf
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          ID: dir
                  If: 
                    BinaryOp: !=
                      ID: len
                      Constant: int, 0
                    Compound: 
                      Assignment: =
                        ID: tmp___1
                        ID: len
                      UnaryOp: p++
                        ID: len
                      Assignment: =
                        ArrayRef: 
                          ID: nbuf
                          ID: tmp___1
                        Cast: 
                          Typename: None, [], None
                            TypeDecl: None, [], None
                              IdentifierType: ['char']
                          Constant: char, '/'
                  Compound: 
                    FuncCall: 
                      ID: strcpy
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['char']
                          BinaryOp: +
                            ID: nbuf
                            ID: len
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          StructRef: ->
                            ID: dp
                            ID: d_name
                    FuncCall: 
                      ID: treat_file
                      ExprList: 
                        ID: nbuf
                Compound: 
                  Compound: 
                    FuncCall: 
                      ID: fprintf
                      ExprList: 
                        Cast: 
                          Typename: None, [], None
                            PtrDecl: []
                              TypeDecl: None, [], None
                                IdentifierType: ['FILE']
                          ID: stderr
                        Cast: 
                          Typename: None, ['const'], None
                            PtrDecl: []
                              TypeDecl: None, ['const'], None
                                IdentifierType: ['char']
                          Constant: string, "%s: %s/%s: pathname too long\n"
                        ID: progname
                        ID: dir
                        StructRef: ->
                          ID: dp
                          ID: d_name
                    Assignment: =
                      ID: exit_code
                      Constant: int, 1
          Label: while_break
            EmptyStatement: 
        Compound: 
          FuncCall: 
            ID: closedir
            ExprList: 
              ID: dirp
        Return: 
  Decl: in_exit, [], [], ['static'], []
    TypeDecl: in_exit, [], None
      IdentifierType: ['int']
    Constant: int, 0
  FuncDef: 
    Decl: do_exit, [], [], ['static'], []
      FuncDecl: 
        ParamList: 
          Decl: exitcode, [], [], [], []
            TypeDecl: exitcode, [], None
              IdentifierType: ['int']
        TypeDecl: do_exit, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        If: 
          ID: in_exit
          Compound: 
            Compound: 
              FuncCall: 
                ID: exit
                ExprList: 
                  ID: exitcode
        Assignment: =
          ID: in_exit
          Constant: int, 1
        If: 
          BinaryOp: !=
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: env
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: free
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    ID: env
              Assignment: =
                ID: env
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      TypeDecl: None, [], None
                        IdentifierType: ['char']
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    Constant: int, 0
        If: 
          BinaryOp: !=
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              ID: args
            Cast: 
              Typename: None, [], None
                TypeDecl: None, [], None
                  IdentifierType: ['unsigned', 'long']
              Cast: 
                Typename: None, [], None
                  PtrDecl: []
                    TypeDecl: None, [], None
                      IdentifierType: ['void']
                Constant: int, 0
          Compound: 
            Compound: 
              FuncCall: 
                ID: free
                ExprList: 
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    Cast: 
                      Typename: None, [], None
                        PtrDecl: []
                          TypeDecl: None, [], None
                            IdentifierType: ['char']
                      ID: args
              Assignment: =
                ID: args
                Cast: 
                  Typename: None, [], None
                    PtrDecl: []
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['char']
                  Cast: 
                    Typename: None, [], None
                      PtrDecl: []
                        TypeDecl: None, [], None
                          IdentifierType: ['void']
                    Constant: int, 0
        Compound: 
          FuncCall: 
            ID: exit
            ExprList: 
              ID: exitcode
  FuncDef: 
    Decl: abort_gzip, [], [], [], []
      FuncDecl: 
        ParamList: 
          Typename: None, [], None
            TypeDecl: None, [], None
              IdentifierType: ['void']
        TypeDecl: abort_gzip, [], None
          IdentifierType: ['void']
    Compound: 
      Compound: 
        If: 
          ID: remove_ofname
          Compound: 
            Compound: 
              FuncCall: 
                ID: close
                ExprList: 
                  ID: ofd
              FuncCall: 
                ID: unlink
                ExprList: 
                  Cast: 
                    Typename: None, ['const'], None
                      PtrDecl: []
                        TypeDecl: None, ['const'], None
                          IdentifierType: ['char']
                    ID: ofname
        Compound: 
          FuncCall: 
            ID: do_exit
            ExprList: 
              Constant: int, 1
        Return: 
